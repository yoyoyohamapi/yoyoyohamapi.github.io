<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>吴小蛆的巣</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoyoyohamapi.me/"/>
  <updated>2017-04-29T03:45:47.000Z</updated>
  <id>http://yoyoyohamapi.me/</id>
  
  <author>
    <name>吴晓军</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>斯坦福机器学习笔记</title>
    <link href="http://yoyoyohamapi.me/2017/04/29/%E6%96%AF%E5%9D%A6%E7%A6%8F%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoyoyohamapi.me/2017/04/29/斯坦福机器学习笔记/</id>
    <published>2017-04-29T03:45:13.000Z</published>
    <updated>2017-04-29T03:45:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>系列文章已发布至 <a href="https://www.gitbook.com/book/yoyoyohamapi/mit-ml" target="_blank" rel="external">Gitbook</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;系列文章已发布至 &lt;a href=&quot;https://www.gitbook.com/book/yoyoyohamapi/mit-ml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Gitbook&lt;/a&gt;&lt;/p&gt;

    
    </summary>
    
      <category term="机器学习" scheme="http://yoyoyohamapi.me/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="机器学习" scheme="http://yoyoyohamapi.me/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>数字图像处理（17）-- 颜色知识 (4)：全彩色图像处理</title>
    <link href="http://yoyoyohamapi.me/2017/03/08/Image_Processing/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%8817%EF%BC%89--%20%E9%A2%9C%E8%89%B2%E7%9F%A5%E8%AF%86(4)%EF%BC%9A%E5%85%A8%E5%BD%A9%E8%89%B2%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    <id>http://yoyoyohamapi.me/2017/03/08/Image_Processing/数字图像处理（17）-- 颜色知识(4)：全彩色图像处理/</id>
    <published>2017-03-08T02:17:57.000Z</published>
    <updated>2017-03-08T02:17:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>全彩色（full color）图像的处理通常有以下两种策略：</p>
<ol>
<li><p>对每一个颜色分量（通道）进行处理，得到各个分量的处理结果，最后进行叠加操作。</p>
</li>
<li><p>对整个像素的颜色向量进行处理，得到整个图的处理结果。</p>
</li>
</ol>
<p>先看一个对每个分量进行线性变换的处理，在该例子中，分别在 RGB 颜色模型和 HSV 颜色模型中对全彩色图像进行处理。</p>
<p>在 RGB 颜色模型中，变换函数为：</p>
<p>$s_i=kr_i$  $(i=1,2,3)$</p>
<p>其中，$s_i$ 为目标颜色分量 i 强度，$r_i$ 为原图像颜色分量 i 强度。</p>
<p>在 HSV 颜色模型中，变换函数为：</p>
<p>$s_3=kr_3$</p>
<p>即在 HSV 颜色模型中，只对强度 V 做线性变化。</p>
<p>当 $K=0.75$ 时，有如下处理结果：</p>
<p><img src="http://7pulhb.com1.z0.glb.clouddn.com/ip - 对 V 通道最线性变换. png" alt="对 V 通道做线性变换"></p>
<p>代码如下:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/imgproc/imgproc.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv/cv.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</div><div class="line"></div><div class="line"><span class="comment">// 图像处理基础素材路径</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BASEPATH <span class="meta-string">"/Users/feiyu06/Pictures/img_processing/"</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BYTE unsigned char</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 图像路径</span></div><div class="line">    <span class="built_in">string</span> img_path = <span class="string">"DIP3E_Original_Images_CH06/Fig0631(a)(strawberries_coffee_full_color).tif"</span>;</div><div class="line">    Mat img = imread(BASEPATH+img_path, <span class="number">1</span>);</div><div class="line">    <span class="comment">//img_rgb_processed 为 rgb 颜色模型处理后的图像</span></div><div class="line">    Mat img_rgb_processed;</div><div class="line">    <span class="comment">//img</span></div><div class="line">    Mat img_hsv_processed;</div><div class="line">    cvtColor(img, img_hsv_processed,CV_BGR2HSV);</div><div class="line">    img_hsv_processed.convertTo(img_hsv_processed, CV_32F);</div><div class="line">    img.convertTo(img, CV_32F);</div><div class="line">    <span class="comment">// 原图像大小</span></div><div class="line">    Size size = img.size();</div><div class="line">    <span class="comment">// 原图像通道数</span></div><div class="line">    <span class="keyword">int</span> channels_num = img.channels();</div><div class="line">    <span class="comment">// 拆分用通道</span></div><div class="line">    <span class="built_in">vector</span>&lt;Mat&gt; s_channels(channels_num);</div><div class="line">    <span class="comment">// 合并用通道</span></div><div class="line">    <span class="built_in">vector</span>&lt;Mat&gt; m_channels(channels_num);</div><div class="line">    <span class="comment">//************************ 开始进行 RGB 颜色空间的亮度降低 ***************************</span></div><div class="line">    split(img,s_channels);</div><div class="line">    <span class="comment">// 线性变化的 k 值</span></div><div class="line">    <span class="keyword">double</span> k = <span class="number">0.75</span>;</div><div class="line">    <span class="keyword">int</span> i,j;</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;channels_num;i++)&#123;</div><div class="line">        <span class="comment">// 灰度归一化处理</span></div><div class="line">        normalize(s_channels[i], s_channels[i],<span class="number">1.0</span>,<span class="number">0</span>,NORM_MINMAX);</div><div class="line">        m_channels[i] = s_channels[i]*k;</div><div class="line">    &#125;</div><div class="line">    merge(m_channels,img_rgb_processed);</div><div class="line">    <span class="comment">//****************************************************************************</span></div><div class="line">    </div><div class="line">    <span class="comment">//*********************** 开始进行 HSV 颜色空间的亮度降低 ****************************</span></div><div class="line">    split(img_hsv_processed,s_channels);</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;channels_num;i++)&#123;</div><div class="line">        <span class="keyword">if</span>(i==<span class="number">2</span>)&#123;</div><div class="line">            <span class="comment">// 灰度归一化处理</span></div><div class="line">            m_channels[i] = s_channels[i]*k;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            m_channels[i] = s_channels[i];</div><div class="line"></div><div class="line">    &#125;</div><div class="line">    merge(m_channels,img_hsv_processed);</div><div class="line">    <span class="comment">// 将 HSV 图像转换为 BGR 图像，方便显示</span></div><div class="line">    convertScaleAbs(img_hsv_processed, img_hsv_processed);</div><div class="line">    cvtColor(img_hsv_processed, img_hsv_processed, CV_HSV2BGR);</div><div class="line">    <span class="comment">//*****************************************************************************</span></div><div class="line">    <span class="comment">// 接下来是图像显示</span></div><div class="line">    convertScaleAbs(img, img);</div><div class="line">    namedWindow(<span class="string">"src pic"</span>, WINDOW_AUTOSIZE);</div><div class="line">    namedWindow(<span class="string">"rgb processed pic"</span>,WINDOW_AUTOSIZE);</div><div class="line">    namedWindow(<span class="string">"hsv processed pic"</span>,WINDOW_AUTOSIZE);</div><div class="line">    imshow(<span class="string">"src pic"</span>, img);</div><div class="line">    imshow(<span class="string">"rgb processed pic"</span>,img_rgb_processed);</div><div class="line">    imshow(<span class="string">"hsv processed pic"</span>,img_hsv_processed);</div><div class="line">    waitKey(<span class="number">0</span>);</div><div class="line">    <span class="comment">//return</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，在 RGB 颜色模型和 HSV 颜色模型中，达到了相同的降低亮度的效果，然而 HSV 中只需对强度 V 这一个分量进行操作即可，这也体现出了 HSV 的<strong>“分离了灰度（亮度）和颜色信息”</strong>这一优势。</p>
<h2 id="彩色分割"><a href="#彩色分割" class="headerlink" title="彩色分割"></a>彩色分割</h2><p>进行彩色分割的目的就在于突出图像中感兴趣的区域，由于彩色图像多是定义在三维空间，所以感兴趣的区域不再是平面线段，而是空间立体区域，通常有：</p>
<p>立方体区域：</p>
<p>$s_i=\begin{cases}0.5&amp;\text{if }[|r_j-a<em>j|&gt; \frac{w}{2}]</em>{any 1\leq{j}\leq{n}}\r_i&amp;\text{otherwise}\end{cases}$  $i=1,2,3….,n$</p>
<p>其中，$a_j$ 为感兴趣的颜色分量 $j$,$W$ 为感兴趣颜色立方体边长,$W$ 也可看做是最大不能偏离兴趣颜色分量的距离。考虑某颜色分量与感兴趣的颜色分量间的差值关系，若有任意一对分量差超过 $\frac{W}{2}$, 则输出的颜色分量被标定为 $0.5$。</p>
<p>例如，若感兴趣的颜色分量为(0.2,0.3,0.5),W=0.2, 则 $\frac{W}{2}$=0.1; 考虑某像素的颜色为(0,1,0,4,0.3)，那么颜色分量 $r_2=0.4$ 的输出应为多少？</p>
<p>因为：</p>
<p>$|0.1-0.2|=0.1\leq\frac{W}{2}$</p>
<p>$|0.4-0.3|=0.1\leq\frac{W}{2}$</p>
<p>$|0.3-0.5|=0.2\gt\frac{W}{2}$</p>
<p>故颜色分量 $r_2=0.4$ 的输出应为 $s_2=0.5$</p>
<p>球体区域：</p>
<p>$s<em>i=\begin{cases}0.5&amp;\text{if }\sum\limits</em>{j=1}^n(r_j-a_j)^2\gt R_0^2\r_i&amp;\text{otherwise}\end{cases}$</p>
<p>其中，$R_0$ 为球体半径</p>
<p>如下图所示，采用的 $W=0.1049$，突出显示了草莓区域：</p>
<p><img src="http://7pulhb.com1.z0.glb.clouddn.com/ip - 彩色分割. png" alt="彩色图像分割"></p>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/imgproc/imgproc.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv/cv.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</div><div class="line"></div><div class="line"><span class="comment">// 图像处理基础素材路径</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BASEPATH <span class="meta-string">"/Users/feiyu06/Pictures/img_processing/"</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BYTE unsigned char</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 图像路径</span></div><div class="line">    <span class="built_in">string</span> img_path = <span class="string">"DIP3E_Original_Images_CH06/Fig0631(a)(strawberries_coffee_full_color).tif"</span>;</div><div class="line">    Mat img = imread(BASEPATH+img_path, <span class="number">1</span>);</div><div class="line">    img.convertTo(img, CV_32FC3);</div><div class="line">    Mat img_dst = img.clone();</div><div class="line">    </div><div class="line">    <span class="comment">// 设定立方体边长</span></div><div class="line">    <span class="keyword">float</span> W = <span class="number">0.1049</span>;</div><div class="line">    <span class="comment">// 感兴趣的颜色</span></div><div class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">float</span>&gt; itst = &#123;<span class="number">0.1922</span>,<span class="number">0.1608</span>,<span class="number">0.6863</span>&#125;;</div><div class="line">    <span class="function">Mat <span class="title">interest</span><span class="params">(itst)</span></span>;</div><div class="line">    <span class="comment">// 用于分离通道</span></div><div class="line">    <span class="built_in">vector</span>&lt;Mat&gt; s_channels(img.channels());</div><div class="line">    split(img,s_channels);</div><div class="line">    <span class="keyword">int</span> i,j,k;</div><div class="line">    <span class="comment">// 标定每一个通道</span></div><div class="line">    <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;img.channels();k++)&#123;</div><div class="line">        normalize(s_channels[k],s_channels[k],<span class="number">1.0</span>,<span class="number">0.0</span>,NORM_MINMAX);</div><div class="line">    &#125;    <span class="comment">// 遍历像素</span></div><div class="line">    merge(s_channels, img);</div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;img.rows;i++)</div><div class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;img.cols;j++)&#123;</div><div class="line">            Mat r = interest.clone();</div><div class="line">            r.at&lt;<span class="keyword">float</span>&gt;(<span class="number">0</span>,<span class="number">0</span>) = img.at&lt;Vec3f&gt;(i,j)[<span class="number">0</span>];</div><div class="line">            r.at&lt;<span class="keyword">float</span>&gt;(<span class="number">1</span>,<span class="number">0</span>) = img.at&lt;Vec3f&gt;(i,j)[<span class="number">1</span>];</div><div class="line">            r.at&lt;<span class="keyword">float</span>&gt;(<span class="number">2</span>,<span class="number">0</span>) = img.at&lt;Vec3f&gt;(i,j)[<span class="number">2</span>];</div><div class="line">            <span class="keyword">double</span> max,min;</div><div class="line">            <span class="comment">// 获得距离矩阵</span></div><div class="line">            Mat distance = <span class="built_in">abs</span>(r-interest);</div><div class="line">            minMaxLoc(distance, &amp;min, &amp;max);</div><div class="line">            <span class="keyword">for</span>(k=<span class="number">0</span>;k&lt;img.channels();k++)&#123;</div><div class="line">                <span class="keyword">if</span>( min &gt; (W/<span class="number">2.0</span>) )</div><div class="line">                    img_dst.at&lt;Vec3f&gt;(i,j)[k]=<span class="number">0.5</span>;</div><div class="line">                <span class="keyword">else</span></div><div class="line">                    img_dst.at&lt;Vec3f&gt;(i,j)[k]=r.at&lt;<span class="keyword">float</span>&gt;(k,<span class="number">0</span>);</div><div class="line">                </div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    namedWindow(<span class="string">"src image"</span>,WINDOW_AUTOSIZE);</div><div class="line">    namedWindow(<span class="string">"dst image"</span>,WINDOW_AUTOSIZE);</div><div class="line">    imshow(<span class="string">"src image"</span>,img);</div><div class="line">    imshow(<span class="string">"dst image"</span>, img_dst);</div><div class="line">    waitKey(<span class="number">0</span>);</div><div class="line">    <span class="comment">//return</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="直方图处理："><a href="#直方图处理：" class="headerlink" title="直方图处理："></a>直方图处理：</h2><p>彩色图像的直方图处理通常只需要在灰度级完成，而非对每个颜色通道都进行直方图操作，故而我们在彩色图像的直方图处理中考虑使用 HSI（HSV）颜色模型。</p>
<p>下面我们看一则例子, 这则例子中，原图像亮度偏暗，操作其 V 通道进行直方图均衡化处理，加强了亮度：</p>
<p><img src="http://7pulhb.com1.z0.glb.clouddn.com/ip - 直方图处理. png" alt="V 通道直方图均衡化"></p>
<p><img src="http://7pulhb.com1.z0.glb.clouddn.com/ip - 直方图对比. png" alt="直方图对比"></p>
<h2 id="彩色图像模糊与锐化："><a href="#彩色图像模糊与锐化：" class="headerlink" title="彩色图像模糊与锐化："></a>彩色图像模糊与锐化：</h2><p>在 RGB 颜色空间中，一般的线性处理（如均值滤波）分别作用在各通道的结果等于直接作用在颜色向量的结果，然而，如统计排序滤波（如中值滤波等）这些非线性操作就不适用了，你很难衡量向量间的大小关系。</p>
<p>通常，为了不影响彩色图像的颜色信息，我们更乐意在 HSV 图像下的 V 通道（即灰度图）下进行图像的模糊处理。下面是一则例子，在这则例子中，分别对 RGB 图像的三个通道做均值滤波处理，而在 HSV 图像的 V 通道做均值滤波，在第四幅图（用对数进行过对比度增强，实际差异较小）中可以看到，二者的模糊效果还是有所差异：</p>
<p><img src="http://7pulhb.com1.z0.glb.clouddn.com/ip - 彩色图像锐化. png" alt="彩色图像模糊"></p>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/imgproc/imgproc.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv/cv.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</div><div class="line"></div><div class="line"><span class="comment">// 图像处理基础素材路径</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BASEPATH <span class="meta-string">"/Users/feiyu06/Pictures/img_processing/"</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BYTE unsigned char</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 图像路径</span></div><div class="line">    <span class="built_in">string</span> img_path = <span class="string">"DIP3E_Original_Images_CH06/Fig0638(a)(lenna_RGB).tif"</span>;</div><div class="line">    Mat img = imread(BASEPATH+img_path, <span class="number">1</span>);</div><div class="line">    Mat img_bgr = img.clone();</div><div class="line">    <span class="comment">// 将图像转换到 HSV 颜色空间</span></div><div class="line">    Mat img_hsv;</div><div class="line">    cvtColor(img, img_hsv, CV_BGR2HSV);</div><div class="line">    <span class="comment">// 分离用通道</span></div><div class="line">    <span class="built_in">vector</span>&lt;Mat&gt;  s_channels(img.channels());</div><div class="line">    <span class="comment">// 合并用通道</span></div><div class="line">    <span class="built_in">vector</span>&lt;Mat&gt; m_channels(img.channels());</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="comment">//********************************* 完成 RGB 图像的模糊处理 ***********************************************</span></div><div class="line">    split(img_bgr,s_channels);</div><div class="line">    <span class="comment">// 对各通道进行均值滤波</span></div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;img_bgr.channels();i++)&#123;</div><div class="line">        blur(s_channels[i], m_channels[i],&#123;<span class="number">3</span>,<span class="number">3</span>&#125;);</div><div class="line">    &#125;</div><div class="line">    merge(m_channels,img_bgr);</div><div class="line">    <span class="comment">//********************************* 完成 HSV 图像的模糊处理 ***********************************************</span></div><div class="line">    split(img_hsv,s_channels);</div><div class="line">    <span class="comment">// 仅对 V 通道进行均值滤波</span></div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;img_hsv.channels();i++)&#123;</div><div class="line">        <span class="keyword">if</span>(i==<span class="number">2</span>)</div><div class="line">            blur(s_channels[i], m_channels[i], &#123;<span class="number">3</span>,<span class="number">3</span>&#125;);</div><div class="line">        <span class="keyword">else</span></div><div class="line">            m_channels[i] = s_channels[i];</div><div class="line">    &#125;</div><div class="line">    merge(m_channels,img_hsv);</div><div class="line">    <span class="comment">// 讲 HSV 图像转换为 RGB 图像，方便显示</span></div><div class="line">    cvtColor(img_hsv, img_hsv, CV_HSV2BGR);</div><div class="line">    <span class="comment">//HSV 模糊处理与 RGB 模糊处理的差异图像</span></div><div class="line">    Mat diff = img_bgr - img_hsv;</div><div class="line">    cvtColor(diff,diff,CV_BGR2GRAY);</div><div class="line">    diff.convertTo(diff, CV_32F);</div><div class="line">    <span class="built_in">log</span>(diff, diff);</div><div class="line">    namedWindow(<span class="string">"src image"</span>,WINDOW_AUTOSIZE);</div><div class="line">    namedWindow(<span class="string">"RGB image blured"</span>,WINDOW_AUTOSIZE);</div><div class="line">    namedWindow(<span class="string">"HSV image blured"</span>,WINDOW_AUTOSIZE);</div><div class="line">    namedWindow(<span class="string">"The difference of bluring"</span>,WINDOW_AUTOSIZE);</div><div class="line">    imshow(<span class="string">"src image"</span>,img);</div><div class="line">    imshow(<span class="string">"RGB image blured"</span>, img_bgr);</div><div class="line">    imshow(<span class="string">"HSV image blured"</span>,img_hsv);</div><div class="line">    imshow(<span class="string">"The difference of bluring"</span>,diff);</div><div class="line">    waitKey(<span class="number">0</span>);</div><div class="line">    <span class="comment">//return</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下例是锐化操作，锐化滤波器为拉普拉斯滤波器，直接对 RGB 图像进行滤波：</p>
<p><img src="http://7pulhb.com1.z0.glb.clouddn.com/ip - 直接对 RGB 图像锐化. png" alt="彩色图像锐化"></p>
<p>##HSV 颜色空间的颜色分割（突出颜色区域）：</p>
<p>在<strong>冈萨雷斯的《数字图像处理》</strong>中其实还有提到 RGB 颜色空间的颜色分离，但实现起来比较复杂，在此不讨论，HSV 颜色空间通过色调 (hue) 和饱和度 (saturation) 就能很好地确定颜色信息，相当方便。</p>
<p>在 HSV 颜色空间的颜色分割的实现经历如下步骤：</p>
<ol>
<li><p>分离出 Hue 通道（首先，颜色参与提名“需要突出颜色”）</p>
</li>
<li><p>分离出 Saturation 通道，并且二值化为 0、1，用二值化后的饱和度图像作为掩膜，与色度图像做点积（淘汰那些饱和度不够的提名色）</p>
</li>
</ol>
<p>下面是例子，该例子中，原图像色泽较为浓郁的区域被突出（最右下角图片）：</p>
<p><img src="http://7pulhb.com1.z0.glb.clouddn.com/ip-HSV 颜色分割. png" alt="HSV 颜色分割"></p>
<p><img src="http://7pulhb.com1.z0.glb.clouddn.com/ip-HSV 颜色分割 2.png" alt="HSV 颜色分割 2"></p>
<p>(a)原图像 (b)Hue 通道 (c)饱和度通道</p>
<p>(d)二值化的饱和度通道 (e)分割后图像</p>
<p>代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/imgproc/imgproc.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv/cv.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</div><div class="line"></div><div class="line"><span class="comment">// 图像处理基础素材路径</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BASEPATH <span class="meta-string">"/Users/feiyu06/Pictures/img_processing/"</span></span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BYTE unsigned char</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 图像路径</span></div><div class="line">    <span class="built_in">string</span> img_path = <span class="string">"DIP3E_Original_Images_CH06/Fig0642(a)(jupiter_moon_original).tif"</span>;</div><div class="line">    Mat img = imread(BASEPATH+img_path, <span class="number">1</span>);</div><div class="line">    <span class="comment">// 将图像转换到 HSV 颜色空间</span></div><div class="line">    Mat img_hsv;</div><div class="line">    cvtColor(img, img_hsv, CV_BGR2HSV);</div><div class="line">    <span class="comment">// 分离用通道</span></div><div class="line">    <span class="built_in">vector</span>&lt;Mat&gt;  s_channels(img.channels());</div><div class="line">    <span class="comment">// 合并用通道</span></div><div class="line">    <span class="built_in">vector</span>&lt;Mat&gt; m_channels(img.channels());</div><div class="line">    <span class="comment">// 分离 HSV 图像各个通道</span></div><div class="line">    split(img_hsv,s_channels);</div><div class="line">    <span class="comment">// 设置饱和度阈值</span></div><div class="line">    s_channels[<span class="number">1</span>].convertTo(m_channels[<span class="number">1</span>], CV_32F);</div><div class="line">    m_channels[<span class="number">0</span>] = s_channels[<span class="number">0</span>];</div><div class="line">    <span class="keyword">double</span> min,max;</div><div class="line">    minMaxLoc(m_channels[<span class="number">1</span>],&amp;min,&amp;max);</div><div class="line">    <span class="built_in">cout</span>&lt;&lt;max&lt;&lt;<span class="built_in">endl</span>;</div><div class="line">    <span class="keyword">double</span> thresh = max*<span class="number">0.3</span>;</div><div class="line">    <span class="comment">// 二值化饱和度图像</span></div><div class="line">    threshold(m_channels[<span class="number">1</span>], m_channels[<span class="number">1</span>], thresh,<span class="number">1.0</span>, THRESH_BINARY);</div><div class="line">    m_channels[<span class="number">1</span>].convertTo(m_channels[<span class="number">1</span>], CV_8U);</div><div class="line">    <span class="comment">// 二值化后的饱和度图像与色度图像点积获得最终颜色分割图像</span></div><div class="line">    Mat img_dst;</div><div class="line">    multiply(m_channels[<span class="number">0</span>], m_channels[<span class="number">1</span>], img_dst);</div><div class="line">    m_channels[<span class="number">1</span>].convertTo(m_channels[<span class="number">1</span>],CV_32F);</div><div class="line">    namedWindow(<span class="string">"Src image"</span>,WINDOW_AUTOSIZE);</div><div class="line">    namedWindow(<span class="string">"Hue image"</span>,WINDOW_AUTOSIZE);</div><div class="line">    namedWindow(<span class="string">"Saturation image"</span>,WINDOW_AUTOSIZE);</div><div class="line">    namedWindow(<span class="string">"Binary Saturation mask"</span>,WINDOW_AUTOSIZE);</div><div class="line">    namedWindow(<span class="string">"Dst image"</span>,WINDOW_AUTOSIZE);</div><div class="line">    imshow(<span class="string">"Src image"</span>,img);</div><div class="line">    imshow(<span class="string">"Hue image"</span>, m_channels[<span class="number">0</span>]);</div><div class="line">    imshow(<span class="string">"Saturation image"</span>,s_channels[<span class="number">1</span>]);</div><div class="line">    imshow(<span class="string">"Binary Saturation mask"</span>,m_channels[<span class="number">1</span>]);</div><div class="line">    imshow(<span class="string">"Dst image"</span>, img_dst);</div><div class="line">    waitKey(<span class="number">0</span>);</div><div class="line">    <span class="comment">//return</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="全彩色图像的边缘检测："><a href="#全彩色图像的边缘检测：" class="headerlink" title="全彩色图像的边缘检测："></a>全彩色图像的边缘检测：</h2><p>因为梯度（反映图像灰度变化）在向量中的定义不同于标量中的定义，故而在灰度图像中的梯度算法并不能直接作用于全彩色图像。通常，在 RGB 颜色模型中，我们会对各分量进行边缘检测后再叠加。</p>
<p>如下例子所示，我们对彩色图像的各分量图像做边缘检测后进行叠加，在这里，所用到边缘检测算法是 Canny 边缘检测。注意到：</p>
<blockquote>
<p>Canny 算法中减少假边缘数量的方法是采用双阈值法。选择两个阈值（关于阈值的选取方法在扩展中进行讨论），根据高阈值得到一个边缘图像，这样一个图像含有很少的假边缘，但是由于阈值较高，产生的图像边缘可能不闭合，未解决这样一个问题采用了另外一个低阈值。</p>
<p>在高阈值图像中把边缘链接成轮廓，当到达轮廓的端点时，该算法会在断点的 8 邻域点中寻找满足低阈值的点，再根据此点收集新的边缘，直到整个图像边缘闭合。</p>
</blockquote>
<p>在此，我们通过滑动条来控制高、低阈值：</p>
<p><img src="http://7pulhb.com1.z0.glb.clouddn.com/ip - 全彩色图像边缘检测. png" alt="彩色图像边缘检测"></p>
<p>代码如下:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/imgproc/imgproc.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv/cv.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</div><div class="line"></div><div class="line"><span class="comment">// 图像处理基础素材路径</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BASEPATH <span class="meta-string">"/Users/feiyu06/Pictures/img_processing/"</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BYTE unsigned char</span></div><div class="line"></div><div class="line"><span class="comment">// 定义滑动条基本参数</span></div><div class="line"><span class="keyword">int</span> high_thresh = <span class="number">255</span>;</div><div class="line"><span class="keyword">int</span> low_thresh = <span class="number">0</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> max_val = <span class="number">255</span>;</div><div class="line"><span class="built_in">string</span> winname = <span class="string">"Edges Detecting...."</span>;</div><div class="line"><span class="comment">// 原图像</span></div><div class="line">Mat img;</div><div class="line"><span class="comment">// 边缘图像</span></div><div class="line">Mat edges_img;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">edgesDetecting</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">void</span>*)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// 图像路径</span></div><div class="line">    <span class="built_in">string</span> img_path = <span class="string">"DIP3E_Original_Images_CH06/Fig0638(a)(lenna_RGB).tif"</span>;</div><div class="line">    img = imread(BASEPATH+img_path, <span class="number">1</span>);</div><div class="line">    namedWindow(winname,WINDOW_AUTOSIZE);</div><div class="line">    createTrackbar(<span class="string">"High Threshold"</span>, winname, &amp;high_thresh, max_val,edgesDetecting);</div><div class="line">    createTrackbar(<span class="string">"Low Threshold"</span>, winname, &amp;low_thresh,max_val, edgesDetecting);</div><div class="line">    edgesDetecting(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">    namedWindow(<span class="string">"Src Image"</span>,WINDOW_AUTOSIZE);</div><div class="line">    imshow(<span class="string">"Src Image"</span>,img);</div><div class="line">    waitKey(<span class="number">0</span>);</div><div class="line">    <span class="comment">//return</span></div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 定义根据滑动条参数设定来完成边缘检测</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">edgesDetecting</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">void</span>*)</span></span>&#123;</div><div class="line">    <span class="comment">// 分离用通道</span></div><div class="line">    <span class="built_in">vector</span>&lt;Mat&gt; s_channels(img.channels());</div><div class="line">    <span class="comment">// 合并用通道</span></div><div class="line">    <span class="built_in">vector</span>&lt;Mat&gt; m_channels(img.channels());</div><div class="line">    split(img,s_channels);</div><div class="line">    <span class="keyword">int</span> i;</div><div class="line">    <span class="comment">// 对各通道进行边缘检测</span></div><div class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;img.channels();i++)</div><div class="line">        Canny(s_channels[i], m_channels[i], high_thresh, low_thresh);</div><div class="line">    merge(m_channels, edges_img);</div><div class="line">    imshow(winname, edges_img);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;全彩色（full color）图像的处理通常有以下两种策略：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;对每一个颜色分量（通道）进行处理，得到各个分量的处理结果，最后进行叠加操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对整个像素的颜色向量进行处理，得到整个图的处理结果。&lt;/p&gt;
&lt;/l
    
    </summary>
    
      <category term="数字图像处理" scheme="http://yoyoyohamapi.me/categories/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    
      <category term="数字图像处理" scheme="http://yoyoyohamapi.me/tags/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>利用 Sails.js+MongoDB 开发博客系统 (2)-- 框架完善</title>
    <link href="http://yoyoyohamapi.me/2017/03/08/Sails_Tutorial/%E5%88%A9%E7%94%A8sails.js+mongodb%E5%BC%80%E5%8F%91%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F(2)--%E6%A1%86%E6%9E%B6%E5%AE%8C%E5%96%84/"/>
    <id>http://yoyoyohamapi.me/2017/03/08/Sails_Tutorial/利用sails.js+mongodb开发博客系统(2)--框架完善/</id>
    <published>2017-03-08T02:17:57.000Z</published>
    <updated>2017-03-08T02:17:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="章节概述"><a href="#章节概述" class="headerlink" title="章节概述"></a>章节概述</h2><p>在本章中，你将能学到如下知识：</p>
<ul>
<li>如何将 sails 的模板引擎替换为 swig，并且设置和扩展 swig</li>
<li>集成 bower 来管理我们的前端库</li>
<li>集成 compass 来更优雅的撰写 css</li>
<li>通过 grunt 来监听 scss 文件变动，并自动编译</li>
<li>前端模块化开发思路即实现</li>
<li>集成 semantic-ui 来撰写 UI</li>
<li>利用 grunt 来对产品环境下的访问进行优化</li>
</ul>
<h2 id="更换模板引擎"><a href="#更换模板引擎" class="headerlink" title="更换模板引擎"></a>更换模板引擎</h2><p>Sails 默认的模板引擎为 ejs，仅就我个人而言，纯主观上来说，对这个框架不是很喜欢，尤其 ejs 不支持继承，令我大为恼火。所以我会考虑用 <a href="http://jinja.pocoo.org/" target="_blank" rel="external"><strong>jinja</strong></a> 风格的 swig 来做模板引擎。</p>
<h3 id="安装-swig"><a href="#安装-swig" class="headerlink" title="安装 swig"></a>安装 swig</h3><blockquote>
<p>标准的 swig 提供的 filter，tag 等可能不够用，比如字符串分割（split）等就未提供，为此，我们也需要安装其扩展</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">npm install swig --save</div><div class="line">npm install swig-extras --save</div></pre></td></tr></table></figure>
<h3 id="替换默认引擎"><a href="#替换默认引擎" class="headerlink" title="替换默认引擎"></a>替换默认引擎</h3><p>在<strong>config/views.js</strong>中，修改 egine 为 swig, 并对 swig 做一些方便我们开发的配置，比如在这里，我们设定一些常用资源路径，避免了在页面中每次都要书写冗长的路径前缀。同时，为了在开发环境下修改 swig 而不用重启服务器，我们需要设置 swig 默认不缓存:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> extras = <span class="built_in">require</span>(<span class="string">'swig-extras'</span>);</div><div class="line"><span class="built_in">module</span>.exports.views = &#123;</div><div class="line">    <span class="attr">engine</span>: &#123;</div><div class="line">        <span class="comment">/* Template File Extension */</span></div><div class="line">        ext: <span class="string">'swig'</span>,</div><div class="line"></div><div class="line">        <span class="comment">/* Function to handle render request */</span></div><div class="line">        fn: <span class="function"><span class="keyword">function</span> (<span class="params">path, data, cb</span>) </span>&#123;</div><div class="line">            <span class="comment">/* Swig Renderer */</span></div><div class="line">            <span class="keyword">var</span> swig = <span class="built_in">require</span>(<span class="string">'swig'</span>);</div><div class="line">            <span class="comment">// 保证我们在开发环境下每次更改 swig 不用重启 sails</span></div><div class="line">            <span class="keyword">if</span> (data.settings.env === <span class="string">'development'</span>) &#123;</div><div class="line">                swig.setDefaults(&#123;<span class="attr">cache</span>: <span class="literal">false</span>&#125;);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">/*</span></div><div class="line">             * 绑定一些常用路径</div><div class="line">             * Thanks to: https://github.com/mahdaen/sails-views-swig</div><div class="line">             * */</div><div class="line">            <span class="keyword">var</span> paths = &#123;</div><div class="line">                <span class="attr">script</span>: <span class="string">'/js'</span>,</div><div class="line">                <span class="attr">style</span>: <span class="string">'/styles/default'</span>,</div><div class="line">                <span class="attr">image</span>: <span class="string">'/images'</span>,</div><div class="line">                <span class="attr">font</span>: <span class="string">'/fonts'</span>,</div><div class="line">                <span class="attr">icon</span>: <span class="string">'/icons'</span>,</div><div class="line">                <span class="attr">bower</span>: <span class="string">'/bower_components'</span></div><div class="line">            &#125;;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (!data.path) &#123;</div><div class="line">                data.path = paths;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> paths) &#123;</div><div class="line">                    <span class="keyword">if</span> (!key <span class="keyword">in</span> data.path) &#123;</div><div class="line">                        data.path[key] = paths[key];</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 补充 extra</span></div><div class="line">            extras.useFilter(swig, <span class="string">'split'</span>);</div><div class="line">            <span class="comment">/* Render Templates */</span></div><div class="line">            <span class="keyword">return</span> swig.renderFile(path, data, cb);</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="attr">layout</span>: <span class="string">'layout'</span>,</div><div class="line"></div><div class="line">    <span class="attr">partials</span>: <span class="literal">false</span></div><div class="line"></div><div class="line">&#125;;</div><div class="line"></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="创建一些页面"><a href="#创建一些页面" class="headerlink" title="创建一些页面"></a>创建一些页面</h3><p>在<strong>views/</strong>下创建一些 swig 页面, 其中<strong>partial</strong>文件夹下为一些公用视图部分或者视图模板：</p>
<p><img src="http://7pulhb.com1.z0.glb.clouddn.com/sails-views_dir.png" alt="views_dir"></p>
<p>并初始化一些内容<br><strong>layout.swig</strong>:</p>
<figure class="highlight twig"><table><tr><td class="code"><pre><div class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE html&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="template-tag">&#123;% <span class="name"><span class="keyword">block</span></span> title -%&#125;</span><span class="xml"></span><span class="template-tag">&#123;%- <span class="name"><span class="keyword">endblock</span></span> %&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></div><div class="line">    <span class="comment">&#123;# 引入常用 css 文件 #&#125;</span><span class="xml"></span></div><div class="line">    <span class="template-tag">&#123;% <span class="name"><span class="keyword">include</span></span> "stylesheets.swig" -%&#125;</span><span class="xml"></span></div><div class="line">    <span class="template-tag">&#123;% <span class="name"><span class="keyword">block</span></span> stylesheets -%&#125;</span><span class="xml"></span><span class="template-tag">&#123;%- <span class="name"><span class="keyword">endblock</span></span> %&#125;</span><span class="xml"></span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="comment">&#123;# 引入导航栏 #&#125;</span><span class="xml"></span></div><div class="line">    <span class="template-tag">&#123;% <span class="name"><span class="keyword">include</span></span> "header.swig" -%&#125;</span><span class="xml"></span></div><div class="line">    <span class="comment">&#123;# 主内容显示部分，提供给集成页面重写 #&#125;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mainContainer"</span>&gt;</span></div><div class="line">        <span class="template-tag">&#123;% <span class="name"><span class="keyword">block</span></span> content -%&#125;</span><span class="xml"></span></div><div class="line">        <span class="template-tag">&#123;%- <span class="name"><span class="keyword">endblock</span></span> %&#125;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="comment">&#123;# 引入常用脚本 #&#125;</span><span class="xml"></span></div><div class="line"></div><div class="line">    <span class="template-tag">&#123;% <span class="name"><span class="keyword">include</span></span> "scripts.swig" %&#125;</span><span class="xml"></span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong>index.swig</strong>:</p>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">&#123;% extends 'partial/layout.swig' %&#125;</div><div class="line">&#123;% block title -%&#125;Woo 的博客 &#123;%- endblock %&#125;</div><div class="line">&#123;% block content -%&#125;</div><div class="line">    &lt;div&gt;</div><div class="line">        &lt;p&gt;</div><div class="line">            这是 Woo 的博客?</div><div class="line">        &lt;/p&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&#123;%- endblock %&#125;</div></pre></td></tr></table></figure>
<h3 id="设置路由："><a href="#设置路由：" class="headerlink" title="设置路由："></a>设置路由：</h3><p>为我们新添加的 index.twig 添加路由</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="string">'/'</span> : &#123;</div><div class="line">   <span class="attr">view</span> :<span class="string">'index'</span></div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>OK, 现在我们执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sails lift</div></pre></td></tr></table></figure>
<p>并输入<a href="http://localhost:1337" target="_blank" rel="external">http://localhost:1337</a>, 就能看到如下页面：</p>
<p><img src="http://7pulhb.com1.z0.glb.clouddn.com/sails-index_show.png" alt="index_show"></p>
<h2 id="利用-bower-来管理我们的前端库"><a href="#利用-bower-来管理我们的前端库" class="headerlink" title="利用 bower 来管理我们的前端库"></a>利用 bower 来管理我们的前端库</h2><h3 id="安装-bower"><a href="#安装-bower" class="headerlink" title="安装 bower"></a>安装 bower</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">npm install bower -g</div></pre></td></tr></table></figure>
<h3 id="在项目中配置-bower"><a href="#在项目中配置-bower" class="headerlink" title="在项目中配置 bower"></a>在项目中配置 bower</h3><p>在项目根目录下创建. bowerrc 文件, 并在文件中设置 bower 库目录</p>
<figure class="highlight json"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"directory"</span>:<span class="string">"assets/bower_components"</span>,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>之所以需要将 bower 下载下的组件放置在 assets 目录下，是方便我们在不用撰写任何 grunt 任务的情况下就能在页面中引用 bower 下载的库资源。</p>
<h3 id="使用-bower"><a href="#使用-bower" class="headerlink" title="使用 bower"></a>使用 bower</h3><p>我们尝试利用 bower 来下载 jquery</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">bower install jquery --save</div></pre></td></tr></table></figure>
<p>可以看到，jquery 的响应资源已经成功地安装在了在 assets/bower_components 目录下</p>
<p><img src="http://7pulhb.com1.z0.glb.clouddn.com/sails-bower_jquery.png" alt="bower_jquery"></p>
<h2 id="利用-compass-来撰写-CSS"><a href="#利用-compass-来撰写-CSS" class="headerlink" title="利用 compass 来撰写 CSS"></a>利用 compass 来撰写 CSS</h2><h3 id="安装-compass"><a href="#安装-compass" class="headerlink" title="安装 compass"></a>安装 compass</h3><p>基于和 bower 的目录配置同样的理由，我们选择将 compass 放置在 assets 目录下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">gem install compass</div><div class="line">cd assets</div><div class="line">compass init</div></pre></td></tr></table></figure>
<h3 id="配置-compass"><a href="#配置-compass" class="headerlink" title="配置 compass"></a>配置 compass</h3><p>修改 assets/config.rb 的文件内容如下：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><div class="line"><span class="keyword">require</span> <span class="string">'compass/import-once/activate'</span></div><div class="line"><span class="comment"># Require any additional compass plugins here.</span></div><div class="line"></div><div class="line"><span class="comment"># Set this to the root of your project when deployed:</span></div><div class="line">http_path = <span class="string">"/"</span></div><div class="line">css_dir = <span class="string">"styles"</span></div><div class="line">sass_dir = <span class="string">"sass"</span></div><div class="line">images_dir = <span class="string">"images"</span></div><div class="line">javascripts_dir = <span class="string">"js"</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># You can select your preferred output style here (can be overridden via the command line):</span></div><div class="line"><span class="comment"># output_style = :expanded or :nested or :compact or :compressed</span></div><div class="line">output_style = <span class="symbol">:expanded</span></div><div class="line"></div><div class="line"><span class="comment"># To enable relative paths to assets via compass helper functions. Uncomment:</span></div><div class="line"><span class="comment"># relative_assets = true</span></div><div class="line"></div><div class="line"><span class="comment"># To disable debugging comments that display the original location of your selectors. Uncomment:</span></div><div class="line"><span class="comment"># line_comments = false</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># If you prefer the indented syntax, you might want to regenerate this</span></div><div class="line"><span class="comment"># project again passing --syntax sass, or you can uncomment this:</span></div><div class="line"><span class="comment"># preferred_syntax = :sass</span></div><div class="line"><span class="comment"># and then run:</span></div><div class="line"><span class="comment"># sass-convert -R --from scss --to sass sass scss &amp;&amp; rm -rf sass &amp;&amp; mv scss sass</span></div></pre></td></tr></table></figure>
<h3 id="设置-compass-任务"><a href="#设置-compass-任务" class="headerlink" title="设置 compass 任务"></a>设置 compass 任务</h3><p>OK，接下来我们需要创建响应的 grunt task 来设置 compass 的编译任务, 使得每次<strong>assets/sass</strong>文件夹下的 scss 文件变动时，不用手动输入命令就能完成 scss 到 css 的编译工作:</p>
<h3 id="安装-grunt-contrib-compass"><a href="#安装-grunt-contrib-compass" class="headerlink" title="安装 grunt-contrib-compass"></a>安装 grunt-contrib-compass</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">npm install grunt-contrib-compass</div></pre></td></tr></table></figure>
<h3 id="创建-compass-任务"><a href="#创建-compass-任务" class="headerlink" title="创建 compass 任务"></a>创建 compass 任务</h3><p>在<strong>tasks/config</strong>下新建<strong>compass.js</strong>并添加如下内容：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 指定 Compass 配置文件，完成 sass 编译</div><div class="line"> */</div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">grunt</span>)</span>&#123;</div><div class="line">    grunt.config.set(<span class="string">'compass'</span>,&#123;</div><div class="line">        <span class="attr">dist</span>: &#123;</div><div class="line">            <span class="attr">options</span>: &#123;</div><div class="line">                <span class="attr">config</span>: <span class="string">'assets/config.rb'</span>,</div><div class="line">                <span class="comment">// 重要，如果不声明 assets，compass 无法找到待编译的 scss 文件</span></div><div class="line">                basePath : <span class="string">'assets'</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    grunt.loadNpmTasks(<span class="string">'grunt-contrib-compass'</span>);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="监视-scss-文件变动"><a href="#监视-scss-文件变动" class="headerlink" title="监视 scss 文件变动"></a>监视 scss 文件变动</h3><p>修改<strong>tasks/config</strong>下的<strong>watch.js</strong>任务，使得当 scss 文件变动时，compass 能够自动编译 scss 至 css。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">grunt</span>) </span>&#123;</div><div class="line"></div><div class="line">  grunt.config.set(<span class="string">'watch'</span>, &#123;</div><div class="line">    <span class="attr">options</span> :&#123;</div><div class="line">      <span class="attr">livereload</span>: <span class="literal">true</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">api</span>: &#123;</div><div class="line"></div><div class="line">      <span class="comment">// API files to watch:</span></div><div class="line">      files: [<span class="string">'api/**/*'</span>, <span class="string">'!**/node_modules/**'</span>]</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">assets</span>: &#123;</div><div class="line"></div><div class="line">      <span class="comment">// Assets to watch:</span></div><div class="line">      files: [<span class="string">'assets/**/*'</span>, <span class="string">'tasks/pipeline.js'</span>, <span class="string">'!**/node_modules/**'</span>],</div><div class="line"></div><div class="line">      <span class="comment">// When assets are changed:</span></div><div class="line">      tasks: [<span class="string">'syncAssets'</span> , <span class="string">'linkAssets'</span>]</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">compass</span>: &#123;</div><div class="line">      <span class="attr">files</span>: [<span class="string">'assets/sass/&#123;,*/&#125;*.scss'</span>],</div><div class="line">      <span class="attr">tasks</span>: [<span class="string">'compass'</span>,<span class="string">'sync:dev'</span>]</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  grunt.loadNpmTasks(<span class="string">'grunt-contrib-watch'</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="更新任务流"><a href="#更新任务流" class="headerlink" title="更新任务流"></a>更新任务流</h3><p>修改__register/compileAssets.js 任务流，将 compass 添加到编译流程当中。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">grunt</span>) </span>&#123;</div><div class="line">  grunt.registerTask(<span class="string">'compileAssets'</span>, [</div><div class="line">    <span class="string">'clean:dev'</span>,</div><div class="line">    <span class="string">'jst:dev'</span>,</div><div class="line">    <span class="string">'compass'</span>,</div><div class="line">    <span class="string">'copy:dev'</span>,</div><div class="line">    <span class="string">'coffee:dev'</span></div><div class="line">  ]);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="前端模块化开发"><a href="#前端模块化开发" class="headerlink" title="前端模块化开发"></a>前端模块化开发</h2><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>现在我们的前端模块化开发有如下思路：</p>
<p><img src="http://7pulhb.com1.z0.glb.clouddn.com/sails - 前端模块化开发. png" alt="前端模块化开发思路"></p>
<p>即每个页面的前端逻辑受一个<strong>模块(module)</strong>控制，且该模块暴露一个<strong>run()</strong>方法，当该页面加载成功时，<strong>模块</strong>的<strong>run()</strong>方法会被执行。该模块也可引用其他一些模块，只是这些模块对页面透明，这样就做到页面和其对应逻辑的一一对应，方便前端开发者的分工协作。</p>
<h3 id="利用-requirejs-进行模块化开发"><a href="#利用-requirejs-进行模块化开发" class="headerlink" title="利用 requirejs 进行模块化开发"></a>利用 requirejs 进行模块化开发</h3><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">bower install requirejs --save</div></pre></td></tr></table></figure>
<h4 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h4><p>在<strong>views/partial/scripts.swig</strong>下声明 requirejs, 注意相应路径写绝对路径：</p>
<figure class="highlight twig"><table><tr><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">data-main</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; path.script &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">/common/main"</span> <span class="attr">src</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; path.bower &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">/requirejs/require.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p>其中，path 是我们定义好的 swig 扩展。</p>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>在<strong>assets/js/common</strong>下新建<strong>main.js</strong>, 并添加如下内容，注意，baseURL 写绝对路径:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 第三方模块声明</span></div><div class="line"><span class="built_in">require</span>.config(&#123;</div><div class="line">    <span class="attr">baseUrl</span>: <span class="string">'/bower_components/'</span>,</div><div class="line">    <span class="attr">paths</span>: &#123;</div><div class="line">        </div><div class="line">    &#125;&#125;);</div></pre></td></tr></table></figure>
<h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><p>然而每次需要我们手动在<strong>main.js</strong>中维护 bower 下载的库并不是一种优雅的做法，我们现在需要借助 <a href="https://github.com/yeoman/bower-requirejs" target="_blank" rel="external">bower-requirejs</a> 这个插件来帮助我们在 main.js 中自动维护 bower 下载下的相关库。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">npm install bower-requirejs --save-dev</div></pre></td></tr></table></figure>
<p>通过 bower 的 hook 机制，我们将 bower-requejs 任务绑定到每次<strong>bower install</strong>之后，亦即每次通过 bower 安装了插件之后，我们的库会被自动添加到 main.js 中，在<strong>.bowerrc</strong>中添加如下内容：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"directory"</span>:<span class="string">"assets/bower_components"</span>,</div><div class="line">  <span class="attr">"scripts"</span>:&#123;</div><div class="line">    <span class="attr">"postinstall"</span>: <span class="string">".node_modules/.bin/bower-requirejs/bin/bower-requirejs -c assets/js/common/main.js -b assets/bower_components/"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>现在我们安装</p>
<ul>
<li><a href="http://www.semantic-ui.cn/" target="_blank" rel="external">semantic-ui</a>– 将来我们用来完善页面显示的前端样式框架，</li>
<li><a href="http://backbonejs.org/" target="_blank" rel="external">Backbone.js</a>– 前端 MVC 框架。</li>
<li>观察 bower-requirejs 是否配置成功。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">bower install semantic-ui --save</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">bower install backbone --save</div></pre></td></tr></table></figure>
<blockquote>
<p>backbone 的依赖项<strong>undersocre</strong>，bower 会为我们解决</p>
</blockquote>
<p>可以看到，main.js 中已经自动生成了相关配置。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">require</span>.config(&#123;</div><div class="line">    <span class="attr">baseUrl</span>: <span class="string">'/bower_components/'</span>,</div><div class="line">    <span class="attr">paths</span>: &#123;</div><div class="line">        <span class="attr">jquery</span>: <span class="string">'jquery/dist/jquery'</span>,</div><div class="line">        <span class="attr">requirejs</span>: <span class="string">'requirejs/require'</span>,</div><div class="line">        <span class="string">'semantic-ui'</span>: <span class="string">'semantic-ui/dist/semantic'</span>,</div><div class="line">        <span class="attr">underscore</span>: <span class="string">'underscore/underscore'</span>,</div><div class="line">        <span class="attr">backbone</span>: <span class="string">'backbone/backbone'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">packages</span>: [</div><div class="line"></div><div class="line">    ]</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>接下来，我们新建<strong>assets/js/default/index.js</strong>, 随便写入点内容：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 每个模块暴露一个 run()方法执行</span></div><div class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">run</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            $(<span class="string">'body'</span>).css(<span class="string">'background-color'</span>,<span class="string">'black'</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h4 id="配置页面和模块的映射关系："><a href="#配置页面和模块的映射关系：" class="headerlink" title="配置页面和模块的映射关系："></a>配置页面和模块的映射关系：</h4><p><strong>_views/scripts.swig</strong>:</p>
<figure class="highlight twig"><table><tr><td class="code"><pre><div class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span></div><div class="line">    <span class="keyword">var</span> app = &#123;&#125;;</div><div class="line">    <span class="comment">//    如果指明了预调用模块，则为 app 设置动作</span></div><div class="line">    <span class="template-tag">&#123;% <span class="name"><span class="keyword">if</span></span> module -%&#125;</span><span class="xml"><span class="undefined"></span></span></div><div class="line">    app.action = '<span class="template-variable">&#123;&#123; module &#125;&#125;</span><span class="xml"><span class="undefined">';</span></span></div><div class="line">    <span class="template-tag">&#123;%- <span class="name"><span class="keyword">endif</span></span>  %&#125;</span><span class="xml"><span class="undefined"></span></span></div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">data-main</span>=<span class="string">"</span></span><span class="template-variable">&#123;&#123; path.script &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">/common/main"</span> <span class="attr">src</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; path.bower &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">/requirejs/require.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<p>我们新建<strong>assets/js/common/app.js</strong>来调用我们的模块方法, 当 app 模块初始化时，会调用 module 的 run()方法:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">define([<span class="string">'jquery'</span>,<span class="string">'underscore'</span>,<span class="string">'backbone'</span>,<span class="string">'/js/'</span>+app.action+<span class="string">'.js'</span>],<span class="function"><span class="keyword">function</span>(<span class="params">$,_,Backbone,module</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">init</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">module</span>.run();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>修改<strong>assets/js/common/main.js</strong>，让其加载 app:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">require</span>.config(&#123;</div><div class="line">    <span class="attr">baseUrl</span>: <span class="string">'/bower_components/'</span>,</div><div class="line">    <span class="attr">paths</span>: &#123;</div><div class="line">        <span class="attr">jquery</span>: <span class="string">'jquery/dist/jquery'</span>,</div><div class="line">        <span class="attr">requirejs</span>: <span class="string">'requirejs/require'</span>,</div><div class="line">        <span class="string">'semantic-ui'</span>: <span class="string">'semantic-ui/dist/semantic'</span>,</div><div class="line">        <span class="attr">underscore</span>: <span class="string">'underscore/underscore'</span>,</div><div class="line">        <span class="attr">backbone</span>: <span class="string">'backbone/backbone'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">packages</span>: [</div><div class="line"></div><div class="line">    ]</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 加载 app，并运行</span></div><div class="line"><span class="built_in">require</span>([<span class="string">'/js/common/app.js'</span>],<span class="function"><span class="keyword">function</span>(<span class="params">app</span>)</span>&#123;</div><div class="line">    app.init();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>在<strong>views/index.swig</strong>中通过 swig 的<strong>set</strong>标签来制定该页面对应的前端控制逻辑：</p>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">&#123;% extends 'partial/layout.swig' %&#125;</div><div class="line">&#123;# 声明本页面调用的模块 #&#125;</div><div class="line">&#123;% set module = 'default/index' -%&#125;</div><div class="line"></div><div class="line">&#123;% block title -%&#125;Woo 的博客 &#123;%- endblock %&#125;</div><div class="line">&#123;% block content -%&#125;</div><div class="line">    &lt;div&gt;</div><div class="line">        &lt;p&gt;</div><div class="line">            这是 Woo 的博客?</div><div class="line">        &lt;/p&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">&#123;%- endblock %&#125;</div></pre></td></tr></table></figure>
<p>OK, 接下来我们执行</p>
<figure class="highlight plain"><figcaption><span>lift```</span></figcaption><table><tr><td class="code"><pre><div class="line"></div><div class="line">并访问 [http://localhost:1337](http://localhost:1337), 如果页面背景为黑色就代表控制逻辑成功被调用</div><div class="line"></div><div class="line">![sails lift](http://7pulhb.com1.z0.glb.clouddn.com/sails-black.png)</div><div class="line"></div><div class="line">## 利用 semantic-ui 来做界面展示</div><div class="line"></div><div class="line"> 关于 bootstrap 和 semantic-ui 选择纯粹是出于个人爱好了，我更喜欢 semantic-ui 的语义化 css 控制以及其自带一些控件风格，最暖心的是，semantic-ui 的模态框不会抖动有木有！！</div><div class="line"></div><div class="line">之前我们已经在__assets/js/common/main.js__中声明了对 semantic-ui 相应 js 控制逻辑的依赖，接下来再__views/partial/stylesheets.swig__中添加 semantic-ui 的 css 调用：</div><div class="line"></div><div class="line">```twig</div><div class="line">&#123;# semantic #&#125;</div><div class="line">&lt;link href=&quot;&#123;&#123; path.bower &#125;&#125;/semantic-ui/dist/semantic.min.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot;/&gt;</div></pre></td></tr></table></figure>
<h2 id="产品（Production）环境下的访问优化"><a href="#产品（Production）环境下的访问优化" class="headerlink" title="产品（Production）环境下的访问优化:"></a>产品（Production）环境下的访问优化:</h2><p>sails 通过：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sails lift --prod</div></pre></td></tr></table></figure>
<p>来将应用部署到产品环境，在其基础上，我们希望产品环境的访问速度能够得到更大的优化，因而就要考虑对我们自定义的 js，css 模块进行压缩，这里就会修改<strong>uglify.js</strong>及<strong>cssmin.js</strong>两个 grunt 压缩任务，并相应地修改<strong>prod.js</strong>任务流，如下所示:</p>
<p><strong>tasks/config/uglify.js</strong>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">grunt</span>) </span>&#123;</div><div class="line"></div><div class="line">  grunt.config.set(<span class="string">'uglify'</span>, &#123;</div><div class="line"></div><div class="line">    <span class="attr">dist</span>: &#123;</div><div class="line"></div><div class="line">      <span class="attr">src</span>: [<span class="string">'.tmp/public/concat/production.js'</span>],</div><div class="line">      <span class="attr">dest</span>: <span class="string">'.tmp/public/min/production.min.js'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 压缩各个自定义模块 js</span></div><div class="line">    modules: &#123;</div><div class="line">      <span class="attr">files</span>:[&#123;</div><div class="line">        <span class="attr">expand</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">cwd</span>: <span class="string">'.tmp/public/js'</span>,</div><div class="line">        <span class="attr">src</span>: <span class="string">'**/*.js'</span>,</div><div class="line">        <span class="attr">dest</span>: <span class="string">'.tmp/public/js'</span></div><div class="line">      &#125;]</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  grunt.loadNpmTasks(<span class="string">'grunt-contrib-uglify'</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><strong>tasks/config/cssmin.js</strong>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">grunt</span>) </span>&#123;</div><div class="line"></div><div class="line">  grunt.config.set(<span class="string">'cssmin'</span>, &#123;</div><div class="line">    <span class="attr">dist</span>: &#123;</div><div class="line">      <span class="attr">src</span>: [<span class="string">'.tmp/public/concat/production.css'</span>],</div><div class="line">      <span class="attr">dest</span>: <span class="string">'.tmp/public/min/production.min.css'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">modules</span>: &#123;</div><div class="line">      <span class="attr">files</span>:[&#123;</div><div class="line">        <span class="attr">expand</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">cwd</span>: <span class="string">'.tmp/public/styles'</span>,</div><div class="line">        <span class="attr">src</span>: <span class="string">'**/*.css'</span>,</div><div class="line">        <span class="attr">dest</span>: <span class="string">'.tmp/public/styles'</span></div><div class="line">      &#125;]</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line"></div><div class="line">  grunt.loadNpmTasks(<span class="string">'grunt-contrib-cssmin'</span>);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><strong>tasks/register/prod.js</strong>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">grunt</span>) </span>&#123;</div><div class="line">  grunt.registerTask(<span class="string">'prod'</span>, [</div><div class="line">    <span class="string">'compileAssets'</span>,</div><div class="line">    <span class="string">'concat'</span>,</div><div class="line">    <span class="string">'uglify:dist'</span>,</div><div class="line">    <span class="string">'uglify:modules'</span>, <span class="comment">// 压缩自定义模块</span></div><div class="line">    <span class="string">'cssmin:dist'</span>,</div><div class="line">    <span class="string">'cssmin:modules'</span>, <span class="comment">// 压缩自定义 css</span></div><div class="line">    <span class="string">'sails-linker:prodJs'</span>,</div><div class="line">    <span class="string">'sails-linker:prodStyles'</span>,</div><div class="line">    <span class="string">'sails-linker:devTpl'</span>,</div><div class="line">    <span class="string">'sails-linker:prodJsJade'</span>,</div><div class="line">    <span class="string">'sails-linker:prodStylesJade'</span>,</div><div class="line">    <span class="string">'sails-linker:devTplJade'</span></div><div class="line">  ]);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>OK, 现在执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sails lift --prod</div></pre></td></tr></table></figure>
<p>我们看到在<strong>.tmp/public</strong>目录下，我们之前撰写的 css 及 js 文件都被压缩:</p>
<p><img src="http://7pulhb.com1.z0.glb.clouddn.com/sails-css_compressed.png" alt="css_compressed"></p>
<p><img src="http://7pulhb.com1.z0.glb.clouddn.com/sails-js_compressed.png" alt="js_compressed"></p>
<hr>
<h2 id="章节预告"><a href="#章节预告" class="headerlink" title="章节预告"></a>章节预告</h2><p>下一章中，我们将正式进入博客系统的开发，我们先会实现我们的账户系统。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;章节概述&quot;&gt;&lt;a href=&quot;#章节概述&quot; class=&quot;headerlink&quot; title=&quot;章节概述&quot;&gt;&lt;/a&gt;章节概述&lt;/h2&gt;&lt;p&gt;在本章中，你将能学到如下知识：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何将 sails 的模板引擎替换为 swig，并且设置和扩展 s
    
    </summary>
    
      <category term="利用Sails.js+MongoDB开发博客系统" scheme="http://yoyoyohamapi.me/categories/%E5%88%A9%E7%94%A8Sails-js-MongoDB%E5%BC%80%E5%8F%91%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="sails,mongodb,nodejs" scheme="http://yoyoyohamapi.me/tags/sails-mongodb-nodejs/"/>
    
  </entry>
  
  <entry>
    <title>RMM Level -- 对于 REST 的层级划分模型</title>
    <link href="http://yoyoyohamapi.me/2017/03/08/Web/RMM%20Level%20--%20%E5%AF%B9%E4%BA%8EREST%E7%9A%84%E5%B1%82%E7%BA%A7%E5%88%92%E5%88%86%E6%A8%A1%E5%9E%8B/"/>
    <id>http://yoyoyohamapi.me/2017/03/08/Web/RMM Level -- 对于REST的层级划分模型/</id>
    <published>2017-03-08T02:17:57.000Z</published>
    <updated>2017-03-08T02:17:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>##Richardson Maturity Model</p>
<p>原文链接：<a href="http://martinfowler.com/articles/richardsonMaturityModel.html" target="_blank" rel="external">http://martinfowler.com/articles/richardsonMaturityModel.html</a></p>
<p>该模型将 REST 划作了由低到高四个等级，等级越高，RESTful 就越成熟，但是，熟透了东西不一定好，甚至可能烂了，所以，项目中对于 RESTful 层级的选择要灵活把控。先看模型图：</p>
<p><img src="http://7pulhb.com1.z0.glb.clouddn.com/web-REST 层次. png" alt="RMM Model"></p>
<hr>
<p>###Level 0:The swarmp of POX(Plain old XML)</p>
<p>该等级的 REST 有如下特点:</p>
<ol>
<li><p>HTTP 仅作为一个通信隧道（即 HTTP 只关注通信消息，而不关注客户端及服务器间的行为）</p>
</li>
<li><p>采用远程调用协议（Remote Procedure Call Protocol）：即客户端想要执行某一任务，或者说向服务器请求某一服务，只需发送相关消息（执行某一句柄），而不用关心底层实现。</p>
</li>
<li><p>提供一个调用接口给客户端。</p>
</li>
</ol>
<p>考虑一个例子：某病人（Client）想要预约某位医生为其诊断，那么其必然经历：</p>
<ol>
<li><p>病人问询医院（Server）该医生那天是否有空。</p>
</li>
<li><p>医院告知病人该医生当天的空闲时间。</p>
</li>
<li><p>病人执行预约</p>
</li>
</ol>
<p>在 Level 0 中，该过程如下图所示：</p>
<p><img src="http://7pulhb.com1.z0.glb.clouddn.com/web-level0.png" alt="Level 0"></p>
<p>注意到绿色的端点（appointmentService），这是医院（Server）为了病人（Client）能够远程咨询（远程调用）而提供的一个调用接口，以下是该过程的伪代码描述, 其中请求及相应都用 XML 描述。</p>
<ol>
<li>病人想知道 2010 年 1 月 4 号时，jones 医生啥时候有空：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">POST /appointmentService HTTP/1.1</div><div class="line">[various other headers]</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">openSlotRequest</span> <span class="attr">date</span> = <span class="string">"2010-01-04"</span> <span class="attr">doctor</span> = <span class="string">"mjones"</span>/&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>医院告诉病人 jones 医生当日的闲暇时间：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">HTTP/1.1 200 OK</div><div class="line">[various headers]</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">openSlotList</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">start</span> = <span class="string">"1400"</span> <span class="attr">end</span> = <span class="string">"1450"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">doctor</span> <span class="attr">id</span> = <span class="string">"mjones"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">start</span> = <span class="string">"1600"</span> <span class="attr">end</span> = <span class="string">"1650"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">doctor</span> <span class="attr">id</span> = <span class="string">"mjones"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">openSlotList</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>病人选择当中一段时间预约 jones 医生</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">POST /appointmentService HTTP/1.1</div><div class="line">[various other headers]</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">appointmentRequest</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">doctor</span> = <span class="string">"mjones"</span> <span class="attr">start</span> = <span class="string">"1400"</span> <span class="attr">end</span> = <span class="string">"1450"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">patient</span> <span class="attr">id</span> = <span class="string">"jsmith"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">appointmentRequest</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>查看预约结果</li>
</ol>
<p>如果预约成功：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">HTTP/1.1 200 OK</div><div class="line">[various headers]</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">appointment</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">doctor</span> = <span class="string">"mjones"</span> <span class="attr">start</span> = <span class="string">"1400"</span> <span class="attr">end</span> = <span class="string">"1450"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">patient</span> <span class="attr">id</span> = <span class="string">"jsmith"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">appointment</span>&gt;</span></div></pre></td></tr></table></figure>
<p>否则：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">HTTP/1.1 200 OK</div><div class="line">[various headers]</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">appointmentRequestFailure</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">doctor</span> = <span class="string">"mjones"</span> <span class="attr">start</span> = <span class="string">"1400"</span> <span class="attr">end</span> = <span class="string">"1450"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">patient</span> <span class="attr">id</span> = <span class="string">"jsmith"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">reason</span>&gt;</span>Slot not available<span class="tag">&lt;/<span class="name">reason</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">appointmentRequestFailure</span>&gt;</span></div></pre></td></tr></table></figure>
<p>注意到，这里服务器并没有通过状态码来反映预约成功与否，而通过回调了冗长的错误信息。</p>
<hr>
<p>###Level 1：Resources</p>
<p>该层的特点有：</p>
<ol>
<li><p>通过 URI 来定位资源，实现资源独立性</p>
</li>
<li><p>采用 “面向对象” 的通信方式</p>
</li>
</ol>
<p>相比于 Level 0，这层更加成熟的地方是客户端需要标明<strong>“我需要什么？”</strong>，考虑上面的例子，其新的模型如下：</p>
<p><img src="http://7pulhb.com1.z0.glb.clouddn.com/web-level1.png" alt="Level 1"></p>
<p>可以看到，每个资源都有各自调用接口（如医生资源，空闲表资源），该模型的病人预约过程如下：</p>
<ol>
<li>客户决定预约日期</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">POST /doctors/mjones HTTP/1.1</div><div class="line">[various other headers]</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">openSlotRequest</span> <span class="attr">date</span> = <span class="string">"2010-01-04"</span>/&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>医院据此返回当日空闲表</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">HTTP/1.1 200 OK</div><div class="line">[various headers]</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">openSlotList</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">id</span> = <span class="string">"1234"</span> <span class="attr">doctor</span> = <span class="string">"mjones"</span> <span class="attr">start</span> = <span class="string">"1400"</span> <span class="attr">end</span> = <span class="string">"1450"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">id</span> = <span class="string">"5678"</span> <span class="attr">doctor</span> = <span class="string">"mjones"</span> <span class="attr">start</span> = <span class="string">"1600"</span> <span class="attr">end</span> = <span class="string">"1650"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">openSlotList</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>病人请求获得 id 为 1234 的空闲服务（slot）</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">POST /slots/1234 HTTP/1.1</div><div class="line">[various other headers]</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">appointmentRequest</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">patient</span> <span class="attr">id</span> = <span class="string">"jsmith"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">appointmentRequest</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>医院返回该 slot 资源给病人</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">HTTP/1.1 200 OK</div><div class="line">[various headers]</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">appointment</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">id</span> = <span class="string">"1234"</span> <span class="attr">doctor</span> = <span class="string">"mjones"</span> <span class="attr">start</span> = <span class="string">"1400"</span> <span class="attr">end</span> = <span class="string">"1450"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">patient</span> <span class="attr">id</span> = <span class="string">"jsmith"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">appointment</span>&gt;</span></div></pre></td></tr></table></figure>
<hr>
<p>###Level 2:HTTP Verbs</p>
<p>顾名思义，Level 2 追加了 HTTP 动作来指明我们对于资源要做何种操作，如此，客户端的请求就能完整的表述为<strong>“我需要对 XX（资源）做 XX（行为）”</strong>, 该层级是当前使用最为广泛地 REST 层级，通常定义如下四个 HTTP 动作：</p>
<ol>
<li><p><strong>GET</strong>—-》一般性获得资源，并不改变资源，所以这种操作相对安全</p>
</li>
<li><p><strong>POST</strong>—》通常为创建资源操作</p>
</li>
<li><p><strong>PUT</strong>—-》通常为更新资源操作</p>
</li>
<li><p><strong>DELETE</strong>-》删除资源操作</p>
</li>
</ol>
<p>同时，服务端不再通过错误消息（当然，某些系统也会封装错误消息，给予客户友善提示）来告诉客户端执行状态，而是通过返回 HTTP 状态字来告知客户端请求执行结果。</p>
<p>上例在该层级下的模型如下：</p>
<p><img src="http://7pulhb.com1.z0.glb.clouddn.com/web-level2.png" alt="Level 2"></p>
<p>任务过程如下：</p>
<ol>
<li>客户想要获得 10 年 1 月 4 好的医生空闲表</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">GET /doctors/mjones/slots?date=20100104&amp;status=open HTTP/1.1</div><div class="line">Host: royalhope.nhs.uk</div></pre></td></tr></table></figure>
<ol>
<li>医院返回空闲表</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">HTTP/1.1 200 OK</div><div class="line">[various headers]</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">openSlotList</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">id</span> = <span class="string">"1234"</span> <span class="attr">doctor</span> = <span class="string">"mjones"</span> <span class="attr">start</span> = <span class="string">"1400"</span> <span class="attr">end</span> = <span class="string">"1450"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">id</span> = <span class="string">"5678"</span> <span class="attr">doctor</span> = <span class="string">"mjones"</span> <span class="attr">start</span> = <span class="string">"1600"</span> <span class="attr">end</span> = <span class="string">"1650"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">openSlotList</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>客户执行预约：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">POST /slots/1234 HTTP/1.1</div><div class="line">[various other headers]</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">appointmentRequest</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">patient</span> <span class="attr">id</span> = <span class="string">"jsmith"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">appointmentRequest</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>医院告知预约结果：</li>
</ol>
<p>若成功：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">HTTP/1.1 201 Created</div><div class="line">Location: slots/1234/appointment</div><div class="line">[various headers]</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">appointment</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">id</span> = <span class="string">"1234"</span> <span class="attr">doctor</span> = <span class="string">"mjones"</span> <span class="attr">start</span> = <span class="string">"1400"</span> <span class="attr">end</span> = <span class="string">"1450"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">patient</span> <span class="attr">id</span> = <span class="string">"jsmith"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">appointment</span>&gt;</span></div></pre></td></tr></table></figure>
<p>若失败：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">HTTP/1.1 409 Conflict</div><div class="line">[various headers]</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">openSlotList</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">id</span> = <span class="string">"5678"</span> <span class="attr">doctor</span> = <span class="string">"mjones"</span> <span class="attr">start</span> = <span class="string">"1600"</span> <span class="attr">end</span> = <span class="string">"1650"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">openSlotList</span>&gt;</span></div></pre></td></tr></table></figure>
<p>注意其返回状态字的变化，可以和 Level 0 作对比。</p>
<hr>
<p>###Level 3:Hypermedia Controls</p>
<p>首先要知道 HATEOAS (Hypertext As The Engine Of Application State)：这种策略解决了我们如何从得到的资源中顺带知晓下一步应当如何进行？</p>
<p>因为要服务端的响应要封装“下一步如何做”，故而上例的模型变为：</p>
<p><img src="http://7pulhb.com1.z0.glb.clouddn.com/web-level3.png" alt="Level 3"></p>
<p>任务过程如下:</p>
<ol>
<li>病人请求 2010 年 1 月 4 号的空闲表</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">GET /doctors/mjones/slots?date=20100104&amp;status=open HTTP/1.1</div><div class="line">Host: royalhope.nhs.uk</div></pre></td></tr></table></figure>
<ol>
<li>医院返回空闲表，<strong>并且附加了下一步操作</strong>，其中，rel 用于描述客户端要完成什么行为，uri 用于定位该行为需要访问的资源。</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">HTTP/1.1 200 OK</div><div class="line">[various headers]</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">openSlotList</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">id</span> = <span class="string">"1234"</span> <span class="attr">doctor</span> = <span class="string">"mjones"</span> <span class="attr">start</span> = <span class="string">"1400"</span> <span class="attr">end</span> = <span class="string">"1450"</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span> = <span class="string">"/linkrels/slot/book"</span> </span></div><div class="line">           <span class="attr">uri</span> = <span class="string">"/slots/1234"</span>/&gt;</div><div class="line">  <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">id</span> = <span class="string">"5678"</span> <span class="attr">doctor</span> = <span class="string">"mjones"</span> <span class="attr">start</span> = <span class="string">"1600"</span> <span class="attr">end</span> = <span class="string">"1650"</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span> = <span class="string">"/linkrels/slot/book"</span> </span></div><div class="line">           <span class="attr">uri</span> = <span class="string">"/slots/5678"</span>/&gt;</div><div class="line">  <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">openSlotList</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>病人执行预约：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">POST /slots/1234 HTTP/1.1</div><div class="line">[various other headers]</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">appointmentRequest</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">patient</span> <span class="attr">id</span> = <span class="string">"jsmith"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">appointmentRequest</span>&gt;</span></div></pre></td></tr></table></figure>
<ol>
<li>医院回调预约结果，<strong>并告知了客户所有预约完以后可以进行的动作（包括取消，联系，帮助等等）</strong>：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">HTTP/1.1 201 Created</div><div class="line">Location: http://royalhope.nhs.uk/slots/1234/appointment</div><div class="line">[various headers]</div></pre></td></tr></table></figure>
<figure class="highlight xml"><table><tr><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">appointment</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">slot</span> <span class="attr">id</span> = <span class="string">"1234"</span> <span class="attr">doctor</span> = <span class="string">"mjones"</span> <span class="attr">start</span> = <span class="string">"1400"</span> <span class="attr">end</span> = <span class="string">"1450"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">patient</span> <span class="attr">id</span> = <span class="string">"jsmith"</span>/&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span> = <span class="string">"/linkrels/appointment/cancel"</span></span></div><div class="line">        <span class="attr">uri</span> = <span class="string">"/slots/1234/appointment"</span>/&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span> = <span class="string">"/linkrels/appointment/addTest"</span></span></div><div class="line">        <span class="attr">uri</span> = <span class="string">"/slots/1234/appointment/tests"</span>/&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span> = <span class="string">"self"</span></span></div><div class="line">        <span class="attr">uri</span> = <span class="string">"/slots/1234/appointment"</span>/&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span> = <span class="string">"/linkrels/appointment/changeTime"</span></span></div><div class="line">        <span class="attr">uri</span> = <span class="string">"/doctors/mjones/slots?date=20100104@status=open"</span>/&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span> = <span class="string">"/linkrels/appointment/updateContactInfo"</span></span></div><div class="line">        <span class="attr">uri</span> = <span class="string">"/patients/jsmith/contactInfo"</span>/&gt;</div><div class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span> = <span class="string">"/linkrels/help"</span></span></div><div class="line">        <span class="attr">uri</span> = <span class="string">"/help/appointment"</span>/&gt;</div><div class="line"><span class="tag">&lt;/<span class="name">appointment</span>&gt;</span></div></pre></td></tr></table></figure>
<p>显然，Level 3 更加考虑周全，但是这就类似与我们拨打 10010 等查询电话，有时候用户对接下来的动作心里有杆秤，并不需要服务端告知所有能够进行的“下一步”，因而，这种层级在某些时候倒回变成一种累赘。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##Richardson Maturity Model&lt;/p&gt;
&lt;p&gt;原文链接：&lt;a href=&quot;http://martinfowler.com/articles/richardsonMaturityModel.html&quot; target=&quot;_blank&quot; rel=&quot;exte
    
    </summary>
    
      <category term="Web开发" scheme="http://yoyoyohamapi.me/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="REST" scheme="http://yoyoyohamapi.me/tags/REST/"/>
    
  </entry>
  
  <entry>
    <title>利用 Sails.js+MongoDB 开发博客系统 (4)-- 文章模块</title>
    <link href="http://yoyoyohamapi.me/2017/03/08/Sails_Tutorial/%E5%88%A9%E7%94%A8Sails.js+MongoDB%E5%BC%80%E5%8F%91%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F(4)--%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0/"/>
    <id>http://yoyoyohamapi.me/2017/03/08/Sails_Tutorial/利用Sails.js+MongoDB开发博客系统(4)--发布文章/</id>
    <published>2017-03-08T02:17:57.000Z</published>
    <updated>2017-03-08T02:17:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="章节概述"><a href="#章节概述" class="headerlink" title="章节概述"></a>章节概述</h2><p>在本章中，你将能学习到如下知识：</p>
<ul>
<li>认识 mongodb 的 mapReduce 函数，并利用其实现标签统计功能</li>
<li>认识 ES6 中的 Promise，了解其实现库 blue bird，为我们解决 node 中难看的嵌套回调</li>
<li>如何利用 markdown 来创建文章并完成代码高亮显示</li>
</ul>
<h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><p>我们将设计如下两个文档：</p>
<ul>
<li>文章(Article)</li>
<li>分类（Category）</li>
</ul>
<p>而<strong>评论</strong>将利用 <a href="http://duoshuo.com/" target="_blank" rel="external">多说</a> 实现。</p>
<h3 id="文章（Article）设计"><a href="#文章（Article）设计" class="headerlink" title="文章（Article）设计"></a>文章（Article）设计</h3><table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
<th>类型</th>
<th>限制</th>
</tr>
</thead>
<tbody>
<tr>
<td>title</td>
<td>文章标题</td>
<td>string</td>
<td>必选，长度 1-20 字符</td>
</tr>
<tr>
<td>content</td>
<td>文章内容</td>
<td>string</td>
<td>必选，不少于 1 个字符</td>
</tr>
<tr>
<td>author</td>
<td>作者</td>
<td>User</td>
<td>必选</td>
</tr>
<tr>
<td>tags</td>
<td>标签</td>
<td>array</td>
<td></td>
</tr>
<tr>
<td>category</td>
<td>分类</td>
<td>Category</td>
<td>默认：未分类</td>
</tr>
</tbody>
</table>
<h3 id="分类-Category-设计"><a href="#分类-Category-设计" class="headerlink" title="分类 (Category) 设计"></a>分类 (Category) 设计</h3><table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
<th>类型</th>
<th>限制</th>
</tr>
</thead>
<tbody>
<tr>
<td>name</td>
<td>名称</td>
<td>string</td>
<td>必选, 长度 1-20 字符</td>
</tr>
</tbody>
</table>
<h3 id="额外需求"><a href="#额外需求" class="headerlink" title="额外需求"></a>额外需求</h3><ol>
<li>用户具有默认分类 —<strong>未分类</strong>。</li>
<li>每创建一篇文章，需要完成标签统计。</li>
</ol>
<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><h3 id="创建-api"><a href="#创建-api" class="headerlink" title="创建 api"></a>创建 api</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sails generate api article</div><div class="line">sails generate api category</div></pre></td></tr></table></figure>
<h3 id="创建“未分类”"><a href="#创建“未分类”" class="headerlink" title="创建“未分类”"></a>创建“未分类”</h3><p>对于上面的<strong>需求 1</strong>，很容易实现，我们只需要在 User 模型中的<strong>afterCreate</strong>这个生命期中存储一个默认分类即可：</p>
<p><strong>api/models/Category.js</strong>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Category.js</div><div class="line"> *</div><div class="line"> * @description :: 分类</div><div class="line"> * @docs        :: http://sailsjs.org/#!documentation/models</div><div class="line"> */</div><div class="line">DEFAULT_NAME = <span class="string">"未分类"</span>;</div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line"></div><div class="line">    <span class="attr">attributes</span>: &#123;</div><div class="line">        <span class="attr">name</span>: &#123;</div><div class="line">            <span class="attr">type</span>: <span class="string">"string"</span>,</div><div class="line">            <span class="attr">required</span>: <span class="literal">true</span>,</div><div class="line">            <span class="attr">unique</span>:<span class="literal">true</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="comment">// 获得默认分类名</span></div><div class="line">    getDefault: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> DEFAULT_NAME;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><strong>api/models/User.js</strong>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 创建（注册）用户前，对用户密码加密</span></div><div class="line">   beforeCreate: <span class="function"><span class="keyword">function</span> (<span class="params">values, cb</span>) </span>&#123;</div><div class="line">       bcrypt.genSalt(<span class="number">10</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, salt</span>) </span>&#123;</div><div class="line">           bcrypt.hash(values.password, salt, <span class="function"><span class="keyword">function</span> (<span class="params">err, hash</span>) </span>&#123;</div><div class="line">               <span class="keyword">if</span> (err) <span class="keyword">return</span> cb(err);</div><div class="line">               values.password = hash;</div><div class="line">               <span class="comment">// 执行用户定义回调</span></div><div class="line">               cb();</div><div class="line">           &#125;);</div><div class="line">       &#125;);</div><div class="line">   &#125;,</div><div class="line"></div><div class="line">   <span class="comment">// 创建用户后，自动为之生成默认分类 -"未分类"，并更新站点信息</span></div><div class="line">   afterCreate: <span class="function"><span class="keyword">function</span> (<span class="params">createdUser, cb</span>) </span>&#123;</div><div class="line">       <span class="keyword">var</span> thisModal = <span class="keyword">this</span>;</div><div class="line">       Category.create(&#123;<span class="attr">name</span>:Category.getDefault(),<span class="attr">creator</span>:createdUser&#125;)</div><div class="line">           .exec(<span class="function"><span class="keyword">function</span>(<span class="params">err,category</span>)</span>&#123;</div><div class="line">               <span class="keyword">if</span>(category)&#123;</div><div class="line">                   thisModal.updateSite(createdUser);</div><div class="line">                   cb();</div><div class="line">               &#125;</div><div class="line">           &#125;);</div><div class="line">   &#125;,</div></pre></td></tr></table></figure>
<h2 id="标签统计功能实现"><a href="#标签统计功能实现" class="headerlink" title="标签统计功能实现"></a>标签统计功能实现</h2><h3 id="MapReduce"><a href="#MapReduce" class="headerlink" title="MapReduce"></a>MapReduce</h3><p>如何统计所有文章中标签的出现频度，很容易想到的办法是遍历所有文章来统计各个标签的出现的次数，但这样做是十分低效的，为了完成这个需求，我们将利用 MongoDB 中的<strong>mapReduce()</strong>函数，相应知识可以参考官方文档：<a href="http://docs.mongodb.org/manual/core/map-reduce/" target="_blank" rel="external">Map Reduce</a></p>
<p>这里以一个例子简要的介绍一下 mongodb 的 mapreduce。考虑一个学生（Student）集合(Collection)，当中有如下三个学生文档：张三，李四，王五</p>
<p><strong>张三</strong>:</p>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">  name: "张三",</div><div class="line">  class: 1</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>李四</strong>:</p>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">  name: "李四",</div><div class="line">  class: 1</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>王五</strong>:</p>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">  name: "王五",</div><div class="line">  class: 2</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在我们利用 mapreduce 来统计各个班级的学生人数，首先我们要进行一个<strong>map（映射）</strong>过程，其实该过程就是<strong>根据一定条件将划分数据</strong>。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> map = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  emit(<span class="keyword">this</span>.class,&#123;<span class="attr">count</span>:<span class="number">1</span>&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过<strong>emit(参数 1, 参数 2)</strong>方法，我们就能获得输出键值对（key-value），其中，<strong>参数 1</strong>可以看做我们数据的划分依据，例如，本例中我们是根据班级进行划分，而<strong>参数 2</strong>则是要传入这个划分的值，本例中，每个班级下，我们需要学生人数统计 count。</p>
<p>本例中，map 过程将会为我们产生两个文档，分别是：</p>
<p><strong>班级 1</strong>:</p>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">&#123;1,[&#123;count:1&#125;,&#123;count:1&#125;]&#125;</div></pre></td></tr></table></figure>
<p><strong>班级 2</strong>:</p>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">&#123;2,&#123;count:1&#125;&#125;</div></pre></td></tr></table></figure>
<p>下面再通过<strong>reduce（规约）</strong>过程对 map 产生的键值对进行处理, 输出每个班的人数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> reduce = <span class="function"><span class="keyword">function</span>(<span class="params">key,values</span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> res = &#123;<span class="attr">count</span>:<span class="number">0</span>&#125;</div><div class="line">  values.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</div><div class="line">    res.count += value.count;</div><div class="line">  &#125;);</div><div class="line">  <span class="keyword">return</span> res;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>! 重要：reduce 函数中接收的 value 参数的形式，必须和 reduce 函数返回的结果 value 的形式一致</p>
</blockquote>
<p>本例中，reduce 过程将产生两个文档：</p>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">&#123;</div><div class="line">  _id: 1</div><div class="line">  value: &#123;count:2&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">_id: 2</div><div class="line">value: &#123;count:1&#125;</div></pre></td></tr></table></figure>
<p>最后，通过 mongodb 的<strong>mapReduce()</strong>函数将统计信息输出到<strong>statistics</strong>集合中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">db.student.mapReduce(map,reduce,&#123;<span class="attr">out</span>:<span class="string">"statistics"</span>&#125;);</div></pre></td></tr></table></figure>
<p>现在我们执行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">db.statistics.find();</div></pre></td></tr></table></figure>
<p>将能看到如下结果：</p>
<p><img src="http://7pulhb.com1.z0.glb.clouddn.com/sails-mapreduce_result.png" alt="mapreduce"></p>
<h3 id="标签统计实现"><a href="#标签统计实现" class="headerlink" title="标签统计实现"></a>标签统计实现</h3><p>借助 sails 中 <a href="http://sailsjs.org/documentation/reference/waterline-orm/models/native" target="_blank" rel="external"><strong>native()</strong></a> 方法，我们可以封装 mapreduce 函数到我们的业务逻辑中：</p>
<p><strong>api/models/Article.js</strong>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Article.js</div><div class="line"> *</div><div class="line"> * @description :: 文章模型</div><div class="line"> * @docs        :: http://sailsjs.org/#!documentation/models</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 定义 Article 集合的 map，reduce 函数, 统计标签</div><div class="line"> */</div><div class="line"><span class="keyword">var</span> map = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">// 分类依据组成为："用户 ID: 标签"</span></div><div class="line">    <span class="keyword">this</span>.tags.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">tag</span>) </span>&#123;</div><div class="line">        emit(tag, <span class="number">1</span>);</div><div class="line">    &#125;);</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> reduce = <span class="function"><span class="keyword">function</span> (<span class="params">k, values</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> total = <span class="number">0</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; values.length; i++) &#123;</div><div class="line">        total += values[i];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> total;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line"></div><div class="line">    <span class="attr">attributes</span>: &#123;</div><div class="line">        <span class="attr">title</span>: &#123;</div><div class="line">            <span class="attr">type</span>: <span class="string">'string'</span>,</div><div class="line">            <span class="attr">required</span>: <span class="literal">true</span>,</div><div class="line">            <span class="attr">minLength</span>: <span class="number">1</span>,</div><div class="line">            <span class="attr">maxLength</span>: <span class="number">40</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">content</span>: &#123;</div><div class="line">            <span class="attr">type</span>: <span class="string">'string'</span>,</div><div class="line">            <span class="attr">required</span>: <span class="literal">true</span>,</div><div class="line">            <span class="attr">minLength</span>: <span class="number">1</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">tags</span>: &#123;</div><div class="line">            <span class="attr">type</span>: <span class="string">'array'</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">category</span>: &#123;</div><div class="line">            <span class="attr">model</span>: <span class="string">'category'</span>,</div><div class="line">            <span class="attr">required</span>: <span class="literal">true</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="comment">// 每次文章创建完成，更新标签统计</span></div><div class="line">    afterCreate: <span class="function"><span class="keyword">function</span> (<span class="params">article, cb</span>) </span>&#123;</div><div class="line">        <span class="keyword">this</span>.updateTags();</div><div class="line">        cb();</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">//custom</span></div><div class="line">    updateTags: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        Article.native(<span class="function"><span class="keyword">function</span> (<span class="params">err, collection</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (err) <span class="keyword">return</span> res.serverError(err);</div><div class="line">            collection.mapReduce(map, reduce, &#123;<span class="attr">out</span>: <span class="string">"tags"</span>&#125;);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="创建-Tags-api"><a href="#创建-Tags-api" class="headerlink" title="创建 Tags api"></a>创建 Tags api</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sails generate api tags</div></pre></td></tr></table></figure>
<h2 id="添加路由及访问控制"><a href="#添加路由及访问控制" class="headerlink" title="添加路由及访问控制"></a>添加路由及访问控制</h2><h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p><strong>_config/routes.js</strong>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">//----------------Aticles</span></div><div class="line">   <span class="comment">// 默认显示全部文章</span></div><div class="line">   <span class="string">'/'</span>: <span class="string">'ArticleController.index'</span>,</div><div class="line">   <span class="comment">// 显示某篇文章</span></div><div class="line">   <span class="string">'get /article/show/:id'</span> : <span class="string">'ArticleController.show'</span>,</div><div class="line">   <span class="comment">// 跳转到创建文章页</span></div><div class="line">   <span class="string">'get /article/new'</span>: <span class="string">'ArticleController.new'</span>,</div><div class="line">   <span class="comment">// 跳转到编辑文章页</span></div><div class="line">   <span class="string">'get /article/edit/:id'</span>: <span class="string">'ArticleController.edit'</span>,</div><div class="line"></div><div class="line">   <span class="comment">// 显示分类下的全部文章</span></div><div class="line">   <span class="string">'/category/:id/articles/:page'</span>: <span class="string">'CategoryController.getArticles'</span>,</div><div class="line"></div><div class="line">   <span class="comment">// 显示标签下的全部文章</span></div><div class="line">   <span class="string">'/tag/:name/articles/:page'</span>: <span class="string">'TagsController.getArticles'</span>,</div></pre></td></tr></table></figure>
<h3 id="Policies"><a href="#Policies" class="headerlink" title="Policies"></a>Policies</h3><p><strong>config/polies.js</strong>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 文章显示逻辑不需要登录</span></div><div class="line">    ArticleController: &#123;</div><div class="line">        <span class="attr">index</span>: <span class="string">'userCreated'</span>,</div><div class="line">        <span class="attr">show</span>: <span class="string">'userCreated'</span></div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="attr">CategoryController</span>: &#123;</div><div class="line">        <span class="attr">getArticles</span>: <span class="literal">true</span></div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="attr">TagsController</span>: &#123;</div><div class="line">        <span class="attr">getArticles</span>: <span class="literal">true</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h2 id="页面组织"><a href="#页面组织" class="headerlink" title="页面组织"></a>页面组织</h2><p>我是采用如下的页面组织方式:</p>
<p><img src="http://7pulhb.com1.z0.glb.clouddn.com/sails-article_views.png" alt="页面组织"></p>
<p>其中编辑页面和创建页面因为逻辑相似（二者的区别在于表单的 action 及 method，这个我们可以通过），共用<strong>save.swig</strong>，其中含有一个编辑器<strong>_editor.swig</strong>的子页面，建议所有内嵌的子页面都以下划线开头，以示区分。</p>
<h2 id="业务逻辑撰写"><a href="#业务逻辑撰写" class="headerlink" title="业务逻辑撰写"></a>业务逻辑撰写</h2><p><strong>api/controllers/ArticleController.js</strong>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line"></div><div class="line">    <span class="comment">// 跳至创建文章</span></div><div class="line">    <span class="keyword">new</span>: <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">        <span class="comment">// 获取分类</span></div><div class="line">        Category.find()</div><div class="line">            .exec(<span class="function"><span class="keyword">function</span> (<span class="params">err, categories</span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> (!err) &#123;</div><div class="line">                    <span class="keyword">return</span> res.view(</div><div class="line">                        <span class="string">'article/save'</span>,</div><div class="line">                        &#123;</div><div class="line">                            <span class="attr">categories</span>: categories,</div><div class="line">                            <span class="attr">form</span>: &#123;<span class="attr">action</span>: <span class="string">'/article'</span>, <span class="attr">method</span>: <span class="string">'POST'</span>&#125;</div><div class="line">                        &#125;</div><div class="line">                    )</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="comment">// 跳至修改文章:</span></div><div class="line">    edit: <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">        <span class="comment">// 获取文章</span></div><div class="line">        <span class="keyword">var</span> id = req.param(<span class="string">'id'</span>);</div><div class="line">        Article.findOne(id).exec(<span class="function"><span class="keyword">function</span> (<span class="params">err, article</span>) </span>&#123;</div><div class="line">            <span class="comment">// 如果不存在，404</span></div><div class="line">            <span class="keyword">if</span> (article) &#123;</div><div class="line">                <span class="comment">// 获取分类</span></div><div class="line">                Category.find()</div><div class="line">                    .exec(<span class="function"><span class="keyword">function</span> (<span class="params">err, categories</span>) </span>&#123;</div><div class="line">                        <span class="keyword">if</span> (!err) &#123;</div><div class="line">                            <span class="keyword">return</span> res.view(</div><div class="line">                                <span class="string">'article/save'</span>,</div><div class="line">                                &#123;</div><div class="line">                                    <span class="attr">article</span>: article,</div><div class="line">                                    <span class="attr">categories</span>: categories,</div><div class="line">                                    <span class="attr">form</span>: &#123;<span class="attr">action</span>: <span class="string">'/article/'</span> + id, <span class="attr">method</span>: <span class="string">'PUT'</span>&#125;</div><div class="line">                                &#125;</div><div class="line">                            )</div><div class="line">                        &#125;</div><div class="line">                    &#125;);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span> res.notFound();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="Promise-解决难看的嵌套回调"><a href="#Promise-解决难看的嵌套回调" class="headerlink" title="Promise 解决难看的嵌套回调"></a>Promise 解决难看的嵌套回调</h3><p>OK，可以看到，我们已经遇到了 Nodejs 常见的多层嵌套回调了，不断横向延伸的代码感觉就像闷了口大翔在嘴里，非常不舒服，在 ES6 中，可以通过 <a href="https://promisesaplus.com/" target="_blank" rel="external">Promise</a> 来解决嵌套的回调，下面简要介绍一下 Promise。</p>
<p>顾名思义，Promise 代表一种 “许诺”，也就是未来才会发生的东西，如同现实生活中的许诺一样，它会被“履行（fulfiled）” 或者“拒绝履行（rejected）“,Promise 的核心方法就在于<strong>then(onFulfiled,onRejected)</strong>方法，通过 then，我们就能构造一个不断向下的过程，而不是横向延伸。下面看个栗子：</p>
<p>一个 AJAX 的嵌套回调:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 首先我要得到一篇文章</span></div><div class="line">$.get(<span class="string">'/article'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">err,article</span>)</span>&#123;</div><div class="line">  <span class="keyword">if</span>(err)</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  <span class="keyword">else</span></div><div class="line">  <span class="comment">// 在回调中得到该文章所有的评论</span></div><div class="line">    $.get(article.commentsURL,<span class="function"><span class="keyword">function</span>(<span class="params">err,comments</span>)</span>&#123;</div><div class="line">      <span class="comment">//doSomething</span></div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>再看经 promise 处理后的代码:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">$.get(<span class="string">'/article'</span>)</div><div class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">article</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> $.get(article.commentsURL);</div><div class="line">  &#125;)</div><div class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">comments</span>)</span>&#123;</div><div class="line">    <span class="comment">// doSomething</span></div><div class="line">  &#125;)</div><div class="line">  .catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</div><div class="line">    <span class="comment">// error handler</span></div><div class="line">  &#125;)</div></pre></td></tr></table></figure>
<p>显然，这种向下的逐级传递使得回调逻辑更加易读以及易维护。想更深入了解 Promise，可以参看<a href="http://spion.github.io/posts/why-i-am-switching-to-promises.html" target="_blank" rel="external">这篇文章</a>.</p>
<p>sails 所采用的 ORM–Waterline 也提倡我们进行 Promise 式的书写，其所采用的 Promise 实现库是<a href="https://github.com/petkaantonov/bluebird" target="_blank" rel="external">blue bird</a>。现在我们通过 blue bird 对以上的编辑（edit）文章的业务逻辑进行重构：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 跳至修改文章:</span></div><div class="line">edit: <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">    <span class="comment">// 获取文章</span></div><div class="line">    <span class="keyword">var</span> id = req.param(<span class="string">'id'</span>);</div><div class="line">    Article.findOne(id).populate(<span class="string">'category'</span>)</div><div class="line">        .then(<span class="function"><span class="keyword">function</span> (<span class="params">article</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> [article,Category.find()];</div><div class="line">        &#125;)</div><div class="line">        .spread(<span class="function"><span class="keyword">function</span> (<span class="params">article, categories</span>) </span>&#123;</div><div class="line">            res.view(</div><div class="line">                <span class="string">'article/save'</span>,</div><div class="line">                &#123;</div><div class="line">                    <span class="attr">article</span>: article,</div><div class="line">                    <span class="attr">categories</span>: categories,</div><div class="line">                    <span class="attr">form</span>: &#123;<span class="attr">action</span>: <span class="string">'/article/'</span> + id, <span class="attr">method</span>: <span class="string">'PUT'</span>&#125;</div><div class="line">                &#125;</div><div class="line">            );</div><div class="line">        &#125;)</div><div class="line">        .catch(<span class="function"><span class="keyword">function</span> (<span class="params">err</span>) </span>&#123;</div><div class="line">            res.notFound();</div><div class="line">        &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>下面我们访问<a href="http://localhost:1337/article/new" target="_blank" rel="external">localhost:1337/article/new</a>, 进入如下页面:</p>
<p><img src="http://7pulhb.com1.z0.glb.clouddn.com/sails - 创建文章. png" alt="创建文章"></p>
<h2 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h2><h3 id="markdown-支持"><a href="#markdown-支持" class="headerlink" title="markdown 支持"></a>markdown 支持</h3><p>个人不喜欢用富文本编辑器，技术博客最好的写作工具还是 markdown，下面我们通过 bower 来为前端添加 markdown 解析，这里我用的<a href="https://github.com/chjj/marked" target="_blank" rel="external">marked</a>, 没理由，git 的 star 多。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">bower install marked --save</div></pre></td></tr></table></figure>
<h3 id="代码高亮支持"><a href="#代码高亮支持" class="headerlink" title="代码高亮支持"></a>代码高亮支持</h3><p>对于代码高亮，选择老牌的<a href="https://highlightjs.org/" target="_blank" rel="external">highlight.js</a>, 提供了不少很骚的主题。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">bower install highlightjs --save</div></pre></td></tr></table></figure>
<p>记得将喜欢的高亮主题添加到页面，否则看不到加亮效果</p>
<p><strong>views/article/layout.swig</strong>:</p>
<figure class="highlight twig"><table><tr><td class="code"><pre><div class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="keyword">extends</span></span> '../partial/layout.swig' %&#125;</span><span class="xml"></span></div><div class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">block</span></span> stylesheets -%&#125;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"</span></span><span class="template-variable">&#123;&#123; path.style &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">/article.css"</span>/&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"</span></span><span class="template-variable">&#123;&#123; path.bower &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">/highlightjs/styles/solarized_dark.css"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>/&gt;</span></span></div><div class="line"><span class="template-tag">&#123;%- <span class="name"><span class="keyword">endblock</span></span> %&#125;</span><span class="xml"></span></div></pre></td></tr></table></figure>
<h3 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h3><p>现在，我们可以试试效果了，在表单创建相应内容，然后单击预览看看效果：</p>
<p><img src="http://7pulhb.com1.z0.glb.clouddn.com/sails-4_article_edit.png" alt="markdown"></p>
<p><img src="http://7pulhb.com1.z0.glb.clouddn.com/sails-4_article_preview.png" alt="preview"></p>
<blockquote>
<p>在创建 / 编辑文章前端逻辑中，新用到的 semantic-ui 的组件有<a href="http://www.semantic-ui.cn/modules/modal.html" target="_blank" rel="external">modal</a></p>
</blockquote>
<h3 id="重构标签"><a href="#重构标签" class="headerlink" title="重构标签"></a>重构标签</h3><p>因为表单发送的标签（tags）是字符串，而实际上我们的标签在数据库中的组织形式是数组，所以我们需要在<strong>每次后端验证 article 的表单前</strong>对发送过来的标签进行处理，将其转换为字符串形式，并保证每个标签的有效性和唯一性：</p>
<p><strong>api/models/Article.js</strong>中为<strong>beforeValidate</strong>生命期添加逻辑:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 文章验证前，重构标签</span></div><div class="line">    beforeValidate: <span class="function"><span class="keyword">function</span>(<span class="params">article,cb</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(article.tags.length) &#123;</div><div class="line">            <span class="keyword">var</span> rowTags = article.tags[<span class="number">0</span>].split(<span class="string">""</span>);</div><div class="line">            article.tags = [];</div><div class="line">            <span class="comment">// 去除空标签及重复标签</span></div><div class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;rowTags.length;i++)&#123;</div><div class="line">                <span class="keyword">var</span> tag = rowTags[i].replace(<span class="string">" "</span>,<span class="string">""</span>);</div><div class="line">                <span class="keyword">if</span>(tag.length&gt;<span class="number">0</span> &amp;&amp; (article.tags.indexOf(tag)&lt;<span class="number">0</span>))&#123;</div><div class="line">                    article.tags.push(tag);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        cb();</div><div class="line">    &#125;,</div></pre></td></tr></table></figure>
<h2 id="显示文章"><a href="#显示文章" class="headerlink" title="显示文章"></a>显示文章</h2><h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><p>考虑到访问性能，我们要进行分页，分页采用”下一页“方式，操作方式为“点击加载”。</p>
<p>waterline 通过<strong>paginate()</strong>函数实现分页：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">Model.find().paginate(&#123;<span class="attr">page</span>: <span class="number">2</span>, <span class="attr">limit</span>: <span class="number">10</span>&#125;);</div></pre></td></tr></table></figure>
<h3 id="业务逻辑"><a href="#业务逻辑" class="headerlink" title="业务逻辑"></a>业务逻辑</h3><p>在<strong>api/controllers/ArticleController.js</strong>添加文章显示的业务逻辑:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 文章查询顺序：以更新时间逆序</span></div><div class="line">FIND_ORDER = <span class="string">'updatedAt desc'</span>;</div><div class="line"><span class="comment">// 文章每页条目数</span></div><div class="line">FIND_PER_PAGE = <span class="number">2</span>;</div><div class="line"></div><div class="line"><span class="comment">// 文章查询顺序：以更新时间逆序</span></div><div class="line">FIND_ORDER = <span class="string">'updatedAt desc'</span>;</div><div class="line"><span class="comment">// 文章每页条目数</span></div><div class="line">FIND_PER_PAGE = <span class="number">2</span>;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 首页显示文章</div><div class="line">     * @param req</div><div class="line">     * @param res</div><div class="line">     */</div><div class="line">    index:<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</div><div class="line">        <span class="comment">// 获得当前需要加载第几页</span></div><div class="line">        <span class="keyword">var</span> page = req.param(<span class="string">'page'</span>) ? req.param(<span class="string">'page'</span>) : <span class="number">1</span>;</div><div class="line">        <span class="comment">// 如果是第 1 页，则需要加载分类以及标签</span></div><div class="line">        <span class="keyword">if</span>( page==<span class="number">1</span> ) &#123;</div><div class="line">            Article.find(&#123;</div><div class="line">                <span class="attr">sort</span>: FIND_ORDER,</div><div class="line">            &#125;).paginate(&#123;<span class="attr">page</span>: page, <span class="attr">limit</span>: FIND_PER_PAGE&#125;)</div><div class="line">                .populate(<span class="string">'category'</span>).then(<span class="function"><span class="keyword">function</span> (<span class="params">articles</span>) </span>&#123;</div><div class="line">                    <span class="comment">// 每篇文章转换</span></div><div class="line">                    <span class="comment">// 查找分类, 及标签</span></div><div class="line">                    <span class="keyword">return</span> [</div><div class="line">                        articles,</div><div class="line">                        Category.find(),</div><div class="line">                        Tags.find()</div><div class="line">                    ];</div><div class="line">                &#125;)</div><div class="line">                .spread(<span class="function"><span class="keyword">function</span> (<span class="params">articles, categories, tags</span>) </span>&#123;</div><div class="line">                    <span class="keyword">return</span> res.view(</div><div class="line">                        <span class="string">'article/index'</span>,</div><div class="line">                        &#123;</div><div class="line">                            <span class="attr">articles</span>: articles,</div><div class="line">                            <span class="attr">categories</span>: categories,</div><div class="line">                            <span class="attr">tags</span>: tags,</div><div class="line">                            <span class="attr">page</span>: page</div><div class="line">                        &#125;);</div><div class="line">                &#125;);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            Article.find(&#123;</div><div class="line">                    <span class="attr">sort</span>: FIND_ORDER,</div><div class="line">                &#125;).paginate(&#123;<span class="attr">page</span>: page, <span class="attr">limit</span>: FIND_PER_PAGE&#125;)</div><div class="line">                .populate(<span class="string">'category'</span>).exec(<span class="function"><span class="keyword">function</span> (<span class="params">err, articles</span>) </span>&#123;</div><div class="line">                    <span class="keyword">if</span> (!err) &#123;</div><div class="line">                        <span class="comment">// 刷新下一页</span></div><div class="line">                        <span class="keyword">return</span> res.view(</div><div class="line">                            <span class="string">'article/_article'</span>,</div><div class="line">                            &#123;</div><div class="line">                                <span class="attr">articles</span>: articles,</div><div class="line">                                <span class="attr">page</span>: page</div><div class="line">                            &#125;);</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">else</span> &#123;</div><div class="line">                        <span class="built_in">console</span>.log(err);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="comment">// 显示某篇文章</span></div><div class="line">    show:<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> id = req.param(<span class="string">'id'</span>);</div><div class="line">        Article.findOne(id).populate(<span class="string">'category'</span>).</div><div class="line">            exec(<span class="function"><span class="keyword">function</span> (<span class="params">err, article</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span>(err)&#123;</div><div class="line">                res.notFound();</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                res.view(<span class="string">'article/show'</span>,&#123;</div><div class="line">                    <span class="attr">articles</span>: [article]</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;,</div><div class="line">    </div><div class="line">    <span class="comment">//..............</span></div><div class="line"> &#125;;</div></pre></td></tr></table></figure>
<h3 id="markdown-显示优化"><a href="#markdown-显示优化" class="headerlink" title="markdown 显示优化"></a>markdown 显示优化</h3><p>我自己小改了一下 git 的 markdown theme，主要是去掉了自带的代码高亮，来使得 markdown 解析出的内容效果更加舒适，相应文件在<a href="https://github.com/yoyoyohamapi/blog/blob/master/assets/sass/default/markdown.scss" target="_blank" rel="external">这儿</a>,<br>在<strong>views/article/layout.swig</strong>引入 css：</p>
<figure class="highlight twig"><table><tr><td class="code"><pre><div class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="keyword">extends</span></span> '../partial/layout.swig' %&#125;</span><span class="xml"></span></div><div class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">block</span></span> stylesheets -%&#125;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"</span></span><span class="template-variable">&#123;&#123; path.style &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">/article.css"</span>/&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"</span></span><span class="template-variable">&#123;&#123; path.bower &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">/highlightjs/styles/solarized_dark.css"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>/&gt;</span></span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"</span></span><span class="template-variable">&#123;&#123; path.style &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">/markdown.css"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>/&gt;</span></span></div><div class="line"><span class="template-tag">&#123;%- <span class="name"><span class="keyword">endblock</span></span> %&#125;</span><span class="xml"></span></div></pre></td></tr></table></figure>
<p>OK，访问 <a href="http://localhost:1337" target="_blank" rel="external">localhost:1337</a> 看一下效果：</p>
<p><img src="http://7pulhb.com1.z0.glb.clouddn.com/sails-4_article_index.png" alt="文章显示首页"></p>
<hr>
<h2 id="章节预告"><a href="#章节预告" class="headerlink" title="章节预告"></a>章节预告</h2><p>下一章节中，我们将实现个人信息维护功能。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;章节概述&quot;&gt;&lt;a href=&quot;#章节概述&quot; class=&quot;headerlink&quot; title=&quot;章节概述&quot;&gt;&lt;/a&gt;章节概述&lt;/h2&gt;&lt;p&gt;在本章中，你将能学习到如下知识：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;认识 mongodb 的 mapReduce 函数，并利用其实现
    
    </summary>
    
      <category term="利用Sails.js+MongoDB开发博客系统" scheme="http://yoyoyohamapi.me/categories/%E5%88%A9%E7%94%A8Sails-js-MongoDB%E5%BC%80%E5%8F%91%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="sails,mongodb,nodejs,博客系统" scheme="http://yoyoyohamapi.me/tags/sails-mongodb-nodejs-%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>利用 Sails.js+MongoDB 开发博客系统 (5)-- 个人信息维护</title>
    <link href="http://yoyoyohamapi.me/2017/03/08/Sails_Tutorial/%E5%88%A9%E7%94%A8Sails.js+MongoDB%E5%BC%80%E5%8F%91%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F(5)--%E4%B8%AA%E4%BA%BA%E4%BF%A1%E6%81%AF%E7%BB%B4%E6%8A%A4/"/>
    <id>http://yoyoyohamapi.me/2017/03/08/Sails_Tutorial/利用Sails.js+MongoDB开发博客系统(5)--个人信息维护/</id>
    <published>2017-03-08T02:17:57.000Z</published>
    <updated>2017-03-08T02:17:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="章节概述"><a href="#章节概述" class="headerlink" title="章节概述"></a>章节概述</h2><p>在本章中，你将能学到如下知识:</p>
<ul>
<li>利用 skipper 来上传和存储文件</li>
</ul>
<h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><p>对于个人信息维护模块，我们暂时实现如下功能：</p>
<ul>
<li>头像更改, 站点的头像仅支持 jpeg 格式，并保存到：<strong>/assets/images/avatar.jpg</strong></li>
<li>站点信息维护：包括站点名称以及站点介绍</li>
</ul>
<p>其他诸如密码修改等功能留给读者自行完成。</p>
<h2 id="配置路由"><a href="#配置路由" class="headerlink" title="配置路由"></a>配置路由</h2><p><strong>config/routes.js</strong>添加:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">//---------------User Profile</span></div><div class="line">    <span class="string">'/user/profile'</span>: <span class="string">'UserController.index'</span>,</div><div class="line"></div><div class="line">    <span class="string">'/user/profile/avatar'</span>: <span class="string">'UserController.setAvatar'</span>,</div></pre></td></tr></table></figure>
<h2 id="业务逻辑撰写"><a href="#业务逻辑撰写" class="headerlink" title="业务逻辑撰写"></a>业务逻辑撰写</h2><p>sails 中通过 <a href="https://github.com/balderdashy/skipper" target="_blank" rel="external">skipper</a> 实现了<a href="http://www.sailsjs.org/documentation/concepts/file-uploads" target="_blank" rel="external">文件上传</a>，其核心函数是<strong>upload()</strong>，其第一个参数可接受如下配置:</p>
<ul>
<li>dirname：上传文件保存目录</li>
<li>maxBytes：总的上传（不是单个文件）大小限制</li>
<li>saveAs：如果该参数是字符串，表示单个文件的保存名，如果是函数，则对每个上传文件进行设置</li>
<li>onProcess：每此上传过程中的回调逻辑</li>
</ul>
<p><strong>api/controllers/UserController.js</strong>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="comment">// 个人信息修改首页</span></div><div class="line">    index: <span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(req.method === <span class="string">'GET'</span>)&#123;</div><div class="line">            <span class="keyword">return</span> res.view(<span class="string">'user/index'</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="comment">// 跳转到设置头像页面</span></div><div class="line">    setAvatar: <span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (req.method === <span class="string">'GET'</span>)</div><div class="line">            <span class="keyword">return</span> res.view(<span class="string">'user/avatar'</span>);</div><div class="line"></div><div class="line">        <span class="comment">// POST 请求进行文件上传</span></div><div class="line">        <span class="comment">// 判断是否有文件上传</span></div><div class="line">        <span class="keyword">if</span> (!req.file(<span class="string">'avatar'</span>)._files[<span class="number">0</span>]) &#123;</div><div class="line">            <span class="keyword">return</span> res.badRequest(<span class="string">'No file was uploaded'</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">// 判断文件类型是否争取</span></div><div class="line">        <span class="keyword">var</span> fileType = req.file(<span class="string">'avatar'</span>)._files[<span class="number">0</span>].stream.headers[<span class="string">'content-type'</span>];</div><div class="line">        <span class="keyword">if</span> (fileType != <span class="string">'image/jpeg'</span>) &#123;</div><div class="line">            <span class="keyword">return</span> res.badRequest(<span class="string">'文件类型错误, 仅支持 JPG 文件格式'</span>);</div><div class="line">        &#125;</div><div class="line">        req.file(<span class="string">'avatar'</span>).upload(&#123;</div><div class="line">            <span class="attr">maxBytes</span>: <span class="number">10000000</span>,</div><div class="line">            <span class="attr">dirname</span>: <span class="string">'../../assets/images'</span>,</div><div class="line">            <span class="attr">saveAs</span>: <span class="string">'avatar.jpg'</span></div><div class="line">        &#125;, <span class="function"><span class="keyword">function</span> <span class="title">whenDone</span>(<span class="params">err, uploadedFiles</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (err) &#123;</div><div class="line">                <span class="keyword">return</span> res.negotiate(err);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> res.redirect(<span class="string">'/'</span>);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="界面显示"><a href="#界面显示" class="headerlink" title="界面显示"></a>界面显示</h3><p><img src="http://7pulhb.com1.z0.glb.clouddn.com/sails-5_article_profile.png" alt="profile"></p>
<blockquote>
<p>图像预览我选用的插件是<a href="https://github.com/blueimp/JavaScript-Load-Image" target="_blank" rel="external">JavaScript-Load-Image
</a></p>
</blockquote>
<hr>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>利用 sails+mongodb 开发个人博客系统的教程就暂告段落，其实教程中很多东西未必是最佳实践（Best Practice），很多功能也尚未开发，本教程的写作动机和目的也不在于搭建一个博客系统，因为博主认为技术博客的最佳实践仍是静态博客，本教程的出发点还是在于让各位能够了解 sails 搭建 web app 的开发流程、少部分优化手段以及借此让各位接触一下 bower，grunt，semantic-ui 这些前端工具。</p>
<p>真心希望各位能够对文章提出宝贵的意见与批评 —- 吴小蛆.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;章节概述&quot;&gt;&lt;a href=&quot;#章节概述&quot; class=&quot;headerlink&quot; title=&quot;章节概述&quot;&gt;&lt;/a&gt;章节概述&lt;/h2&gt;&lt;p&gt;在本章中，你将能学到如下知识:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;利用 skipper 来上传和存储文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h
    
    </summary>
    
      <category term="利用Sails.js+MongoDB开发博客系统" scheme="http://yoyoyohamapi.me/categories/%E5%88%A9%E7%94%A8Sails-js-MongoDB%E5%BC%80%E5%8F%91%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="sails,mongodb,nodejs,博客系统" scheme="http://yoyoyohamapi.me/tags/sails-mongodb-nodejs-%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>利用 Sails.js+MongoDB 开发博客系统 (3)-- 账户模块</title>
    <link href="http://yoyoyohamapi.me/2017/03/08/Sails_Tutorial/%E5%88%A9%E7%94%A8sails.js+mongodb%E5%BC%80%E5%8F%91%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F(3)--%E7%99%BB%E5%BD%95%E6%B3%A8%E5%86%8C/"/>
    <id>http://yoyoyohamapi.me/2017/03/08/Sails_Tutorial/利用sails.js+mongodb开发博客系统(3)--登录注册/</id>
    <published>2017-03-08T02:17:57.000Z</published>
    <updated>2017-03-08T02:17:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="章节概述"><a href="#章节概述" class="headerlink" title="章节概述"></a>章节概述</h2><p>在本章中，你讲学习到如下知识： </p>
<ul>
<li><p>sails 中如何配置 mongodb</p>
</li>
<li><p>sails 中的模型层（Models）知识，包含有模型属性（attributes），模型生命期回调（lifecycle callbacks）等</p>
</li>
<li><p>利用 Passport.js 来管理我们的账户认证</p>
</li>
<li><p>认识密码加密策略 —bcrypt</p>
</li>
<li><p>认识 sails 的核心模块 —policies</p>
</li>
<li><p>如何在 sails 中撰写自定义配置</p>
</li>
<li><p>如何扩展 swig 模板引擎</p>
</li>
<li><p>semantic-ui 中表单验证模块的应用</p>
</li>
</ul>
<h2 id="设计"><a href="#设计" class="headerlink" title="设计"></a>设计</h2><h3 id="用户（User）文档设计"><a href="#用户（User）文档设计" class="headerlink" title="用户（User）文档设计"></a>用户（User）文档设计</h3><table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
<th>类型</th>
<th>限制</th>
</tr>
</thead>
<tbody>
<tr>
<td>siteName</td>
<td>站点名称</td>
<td>string</td>
<td>必选，1~10 个字符</td>
</tr>
<tr>
<td>siteDesc</td>
<td>站点简介</td>
<td>string</td>
<td>可选，不超过 20 字符</td>
</tr>
<tr>
<td>email</td>
<td>用户邮箱</td>
<td>string(email)</td>
<td>必选，唯一</td>
</tr>
<tr>
<td>password</td>
<td>密码</td>
<td>string</td>
<td>必选，原始长度不少于 6 个字符</td>
</tr>
</tbody>
</table>
<h3 id="用户-api-生成"><a href="#用户-api-生成" class="headerlink" title="用户 api 生成"></a>用户 api 生成</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sails generate api user</div></pre></td></tr></table></figure>
<p>可以看到，sails 为我们生成了 user 相应地模型及控制器</p>
<p><img src="http://7pulhb.com1.z0.glb.clouddn.com/sails-generate_api.png" alt="sails_generate_api"></p>
<h2 id="配置-MongoDB-数据库连接"><a href="#配置-MongoDB-数据库连接" class="headerlink" title="配置 MongoDB 数据库连接"></a>配置 MongoDB 数据库连接</h2><h3 id="安装-sails-对-mongo-的依赖"><a href="#安装-sails-对-mongo-的依赖" class="headerlink" title="安装 sails 对 mongo 的依赖"></a>安装 sails 对 mongo 的依赖</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">npm install sails-mongo --save</div></pre></td></tr></table></figure>
<h3 id="配置-mongo-连接"><a href="#配置-mongo-连接" class="headerlink" title="配置 mongo 连接"></a>配置 mongo 连接</h3><p>修改<strong>config/connections.js</strong>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports.connections = &#123;</div><div class="line">  <span class="attr">mongo</span>: &#123;</div><div class="line">    <span class="attr">adapter</span>: <span class="string">'sails-mongo'</span>,</div><div class="line">    <span class="attr">host</span>: <span class="string">'localhost'</span>, <span class="comment">// defaults to `localhost` if omitted</span></div><div class="line">    port: <span class="number">27017</span>, <span class="comment">// defaults to 27017 if omitted</span></div><div class="line">    database: <span class="string">'blog'</span> <span class="comment">// or omit if not relevant</span></div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="模型层的基本配置"><a href="#模型层的基本配置" class="headerlink" title="模型层的基本配置"></a>模型层的基本配置</h3><p>修改<strong>config/models.js</strong>, 配置模型的连接数据库位 mongodb，并为每个模型添加 updatedAt 以及 createdAt 属性:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports.models = &#123;</div><div class="line"></div><div class="line">  <span class="string">'connection'</span> : <span class="string">'mongo'</span>,</div><div class="line">  <span class="attr">autoCreatedAt</span>: <span class="literal">true</span>,</div><div class="line">  <span class="attr">autoUpdatedAt</span>: <span class="literal">true</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="利用-Passport-js-来管理我们的账户认证"><a href="#利用-Passport-js-来管理我们的账户认证" class="headerlink" title="利用 Passport.js 来管理我们的账户认证"></a>利用 Passport.js 来管理我们的账户认证</h2><p><a href="http://passportjs.org/" target="_blank" rel="external"><strong>Passport.js</strong></a>是 Node.js 中一个专注于登录验证的中间件，配置灵活，支持很多第三方登录验证，同时也能与 sails 无缝衔接。十分感谢 <a href="http://iliketomatoes.com/implement-passport-js-authentication-with-sails-js-0-10-2/" target="_blank" rel="external">这篇教程</a> 帮助我将 Passport.js 集成到 sails 中。</p>
<h3 id="安装相应依赖"><a href="#安装相应依赖" class="headerlink" title="安装相应依赖"></a>安装相应依赖</h3><p>安装<a href="">bcrypt</a>,bcrypt 被认为是比一般加盐加密更好的密码加密手段，一般的加盐加密在密码较简单是仍可能被暴力破解，bcrypt 牺牲了部分性能，来换取更高的密码存储安全，参看如下两篇文章：</p>
<ul>
<li><p><a href="http://codahale.com/how-to-safely-store-a-password/" target="_blank" rel="external">How To Safely Store A Password</a></p>
</li>
<li><p><a href="http://www.cnblogs.com/lixiong/archive/2011/12/24/2300098.html" target="_blank" rel="external">md5/sha1+salt 和 Bcrypt</a></p>
</li>
</ul>
<p>安装 bcrypt:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">npm install bcrpyt --save</div></pre></td></tr></table></figure>
<p>安装 Passport.js:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">npm install passport --save</div></pre></td></tr></table></figure>
<p>因为我们是本地验证，所以只需要 passport 的本地验证支持</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">npm install passport-local --save</div></pre></td></tr></table></figure>
<h3 id="配置-User-实体"><a href="#配置-User-实体" class="headerlink" title="配置 User 实体"></a>配置 User 实体</h3><p>在此博客系统中，用户注册前需要对用户密码进行 bcrypt 加密，这将会利用到 sails 中模型层的生命期回调<a href="http://www.sailsjs.org/documentation/concepts/models-and-orm/lifecycle-callbacks" target="_blank" rel="external">Lifecycle callbacks</a>, 在此，我们用到的生命期为<strong>beforeCreate</strong>，亦即模型创建前执行的回调：</p>
<p><strong>api/models/User.js</strong>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> bcrypt = <span class="built_in">require</span>(<span class="string">'bcrypt'</span>);</div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">attributes</span>: &#123;</div><div class="line">    <span class="comment">// 站点名称</span></div><div class="line">    siteName: &#123;</div><div class="line">      <span class="attr">type</span>: <span class="string">'string'</span>,</div><div class="line">      <span class="attr">required</span>: <span class="literal">true</span>,</div><div class="line">      <span class="attr">minLength</span>:<span class="number">1</span>,</div><div class="line">      <span class="attr">maxLength</span>:<span class="number">10</span></div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 邮箱</span></div><div class="line">    email: &#123;</div><div class="line">      <span class="attr">type</span>: <span class="string">'email'</span>,</div><div class="line">      <span class="attr">unique</span>: <span class="literal">true</span>,</div><div class="line">      <span class="attr">required</span>: <span class="literal">true</span></div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 密码</span></div><div class="line">    password: &#123;</div><div class="line">      <span class="attr">type</span>: <span class="string">'string'</span>,</div><div class="line">      <span class="attr">required</span>: <span class="literal">true</span></div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 站点简介</span></div><div class="line">    siteDesc: &#123;</div><div class="line">      <span class="attr">type</span>: <span class="string">'string'</span>,</div><div class="line">      <span class="attr">defaultsTo</span>: <span class="string">'暂无简介'</span>,</div><div class="line">      <span class="attr">maxLength</span>:<span class="number">40</span></div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 是否管理员（默认为非管理员）</span></div><div class="line">    isAdmin: &#123;</div><div class="line">      <span class="attr">type</span>: <span class="string">'boolean'</span>,</div><div class="line">      <span class="attr">defaultsTo</span>: <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">// 创建（注册）用户前，对用户密码加密</span></div><div class="line">  beforeCreate: <span class="function"><span class="keyword">function</span> (<span class="params">values, cb</span>) </span>&#123;</div><div class="line">    bcrypt.genSalt(<span class="number">10</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, salt</span>) </span>&#123;</div><div class="line">      bcrypt.hash(values.password, salt, <span class="function"><span class="keyword">function</span>(<span class="params">err, hash</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span>(err) <span class="keyword">return</span> cb(err);</div><div class="line">        values.password = hash;</div><div class="line">        <span class="comment">// 执行用户定义回调</span></div><div class="line">        cb();</div><div class="line">      &#125;);</div><div class="line">    &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="创建路由及视图"><a href="#创建路由及视图" class="headerlink" title="创建路由及视图"></a>创建路由及视图</h3><p>先创建一个封装了登录注册逻辑的控制器<strong>AuthController.js</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sails generate controller auth</div></pre></td></tr></table></figure>
<p>接下来在<strong>config/routes.js</strong>中为我们的登录注册创建相应路由：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">//config/routes.js</span></div><div class="line"><span class="built_in">module</span>.exports.routes = &#123;</div><div class="line"></div><div class="line">  <span class="comment">/***************************************************************************</span></div><div class="line">  *                                                                          *</div><div class="line">  * Make the view located at `views/homepage.ejs` (or `views/homepage.jade`, *</div><div class="line">  * etc. depending on your default view engine) your home page.              *</div><div class="line">  *                                                                          *</div><div class="line">  * (Alternatively, remove this and add an `index.html` file in your         *</div><div class="line">  * `assets` directory)                                                      *</div><div class="line">  *                                                                          *</div><div class="line">  ***************************************************************************/</div><div class="line"></div><div class="line">  <span class="comment">//'/': &#123;</span></div><div class="line">  <span class="comment">//  view: 'homepage'</span></div><div class="line">  <span class="comment">//&#125;</span></div><div class="line"></div><div class="line">  <span class="string">'/'</span> : &#123;</div><div class="line">    <span class="attr">view</span> :<span class="string">'index'</span></div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="comment">//---------------Login &amp; Register</span></div><div class="line">    <span class="comment">// 跳转到注册页面</span></div><div class="line">    <span class="string">'get /register'</span>: <span class="string">'AuthController.toRegister'</span>,</div><div class="line">    <span class="comment">// 处理注册逻辑</span></div><div class="line">    <span class="string">'post /register'</span>: <span class="string">'AuthController.processRegister'</span>,</div><div class="line">    <span class="comment">// 跳转到登陆页</span></div><div class="line">    <span class="string">'get /login'</span>: &#123;</div><div class="line">        <span class="attr">view</span>: <span class="string">'passport/login'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="comment">// 处理登陆逻辑</span></div><div class="line">    <span class="string">'post /login'</span>: <span class="string">'AuthController.processLogin'</span>,</div><div class="line">    <span class="comment">// 登出逻辑</span></div><div class="line">    <span class="string">'/logout'</span>: <span class="string">'AuthController.logout'</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="创建对应的视图"><a href="#创建对应的视图" class="headerlink" title="创建对应的视图"></a>创建对应的视图</h3><blockquote>
<p>相应地 css 文件内容不给出，UI 设计见仁见智。</p>
</blockquote>
<p><strong>views/passport/layout.swig</strong>:</p>
<figure class="highlight twig"><table><tr><td class="code"><pre><div class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="keyword">extends</span></span> '../partial/layout.swig' %&#125;</span><span class="xml"></span></div><div class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">block</span></span> stylesheets -%&#125;</span><span class="xml"></span></div><div class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"</span></span><span class="template-variable">&#123;&#123; path.style &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">/passport.css"</span>/&gt;</span></span></div><div class="line"><span class="template-tag">&#123;%- <span class="name"><span class="keyword">endblock</span></span> %&#125;</span><span class="xml"></span></div></pre></td></tr></table></figure>
<p>注意，给登录及注册页面声明待调用模块：<br><strong>passport/login</strong>及<strong>passport/register</strong></p>
<p><strong>views/passport/login.swig</strong>:</p>
<figure class="highlight twig"><table><tr><td class="code"><pre><div class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="keyword">extends</span></span> 'layout.swig' %&#125;</span><span class="xml"></span></div><div class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> module = 'passport/login' %&#125;</span><span class="xml"></span></div><div class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">block</span></span> title -%&#125;</span><span class="xml">欢迎登录</span><span class="template-tag">&#123;%- <span class="name"><span class="keyword">endblock</span></span> %&#125;</span><span class="xml"></span></div><div class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">block</span></span> form_content -%&#125;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"ui form"</span> <span class="attr">action</span>=<span class="string">"/login"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"ui dividing header"</span>&gt;</span> 欢迎登录 < span class="tag">&lt;/<span class="name">h1</span>&gt;</div><div class="line">        <span class="template-tag">&#123;% <span class="name"><span class="keyword">if</span></span> err -%&#125;</span><span class="xml"></span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui error message"</span> <span class="attr">style</span>=<span class="string">"display: block"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span> 登录失败 < span class="tag">&lt;/<span class="name">div</span>&gt;</div><div class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span> 账号或密码错误 < span class="tag">&lt;/<span class="name">p</span>&gt;</div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="template-tag">&#123;%- <span class="name"><span class="keyword">endif</span></span> %&#125;</span><span class="xml"></span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"field"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"您的邮箱"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"field"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"您的密码"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"field"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui buttons"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"ui positive button"</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span> 登录 < span class="tag">&lt;/<span class="name">button</span>&gt;</div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"or"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"ui negative button"</span> <span class="attr">href</span>=<span class="string">"/register"</span>&gt;</span> 注册 < span class="tag">&lt;/<span class="name">a</span>&gt;</div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="template-tag">&#123;%- <span class="name"><span class="keyword">endblock</span></span> %&#125;</span><span class="xml"></span></div></pre></td></tr></table></figure>
<p><strong>views/passport/register.swig</strong>:</p>
<figure class="highlight twig"><table><tr><td class="code"><pre><div class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="keyword">extends</span></span> 'layout.swig' -%&#125;</span><span class="xml"></span></div><div class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">set</span></span> module='passport/register' %&#125;</span><span class="xml"></span></div><div class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">block</span></span> title -%&#125;</span><span class="xml">注册</span><span class="template-tag">&#123;%- <span class="name"><span class="keyword">endblock</span></span> %&#125;</span><span class="xml"></span></div><div class="line"><span class="template-tag">&#123;% <span class="name"><span class="keyword">block</span></span> form_content -%&#125;</span><span class="xml"></span></div><div class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"ui form"</span> <span class="attr">action</span>=<span class="string">"/register"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"ui dividing header"</span>&gt;</span> 欢迎注册 < span class="tag">&lt;/<span class="name">h1</span>&gt;</div><div class="line">        <span class="template-tag">&#123;% <span class="name"><span class="keyword">if</span></span> err -%&#125;</span><span class="xml"></span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui error message"</span> <span class="attr">style</span>=<span class="string">"display: block"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"header"</span>&gt;</span> 注册失败 < span class="tag">&lt;/<span class="name">div</span>&gt;</div><div class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span> 邮箱已被注册 < span class="tag">&lt;/<span class="name">p</span>&gt;</div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="template-tag">&#123;%- <span class="name"><span class="keyword">endif</span></span> %&#125;</span><span class="xml"></span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">"field"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"siteName"</span> <span class="attr">name</span>=<span class="string">"siteName"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"填写站点名称"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"field"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">placeholder</span>=<span class="string">"填写邮箱"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"field"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">placeholder</span>=<span class="string">"填写密码（不少于 6 个字符）"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"field"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">"siteDesc"</span> <span class="attr">name</span>=<span class="string">"siteDesc"</span> <span class="attr">placeholder</span>=<span class="string">"填写站点简介"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"field"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui buttons"</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"ui positive button"</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span> 注册 < span class="tag">&lt;/<span class="name">button</span>&gt;</div><div class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"or"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"ui negative button"</span> <span class="attr">href</span>=<span class="string">"/login"</span>&gt;</span> 登录 < span class="tag">&lt;/<span class="name">a</span>&gt;</div><div class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="template-tag">&#123;%-<span class="name"><span class="keyword">endblock</span></span> %&#125;</span><span class="xml"></span></div></pre></td></tr></table></figure>
<h3 id="撰写登录验证逻辑，感谢-Giancarlo-Soverini-提供教程"><a href="#撰写登录验证逻辑，感谢-Giancarlo-Soverini-提供教程" class="headerlink" title="撰写登录验证逻辑，感谢 Giancarlo Soverini 提供教程"></a>撰写登录验证逻辑，<a href="http://iliketomatoes.com/implement-passport-js-authentication-with-sails-js-0-10-2/" target="_blank" rel="external">感谢 Giancarlo Soverini 提供教程</a></h3><p>在<strong>api/controllers/AuthController.js</strong>添加如下内容：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 验证逻辑控制器</div><div class="line">* */</div><div class="line"><span class="keyword">var</span> passport = <span class="built_in">require</span>(<span class="string">'passport'</span>);</div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 处理注册逻辑</div><div class="line">     * @param req</div><div class="line">     * @param res</div><div class="line">     */</div><div class="line">    processRegister: <span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</div><div class="line">        <span class="comment">// 由请求参数构造待创建 User 对象</span></div><div class="line">        <span class="keyword">var</span> user = req.allParams();</div><div class="line">        User.create(user).exec(<span class="function"><span class="keyword">function</span> <span class="title">createCB</span>(<span class="params">err, created</span>)</span>&#123;</div><div class="line">            <span class="keyword">if</span>(err)&#123;</div><div class="line">               <span class="comment">// 如果有误，返回错误</span></div><div class="line">                res.view(<span class="string">'passport/register'</span>,&#123;<span class="attr">err</span>:err&#125;);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="comment">// 否则，将新创建的用户登录</span></div><div class="line">                req.login(created, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">                    <span class="keyword">if</span> (err) &#123; <span class="keyword">return</span> next(err); &#125;</div><div class="line">                    <span class="keyword">return</span> res.redirect(<span class="string">'/'</span>);</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 处理登陆逻辑</div><div class="line">     * @param req</div><div class="line">     * @param res</div><div class="line">     */</div><div class="line">    processLogin: <span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>)</span>&#123;</div><div class="line">        <span class="comment">// 使用本地验证策略对登录进行验证</span></div><div class="line">        passport.authenticate(<span class="string">'local'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, user, info</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> ((err) || (!user)) &#123;</div><div class="line">                <span class="keyword">return</span> res.send(&#123;</div><div class="line">                    <span class="attr">message</span>: info.message,</div><div class="line">                    <span class="attr">user</span>: user</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">            req.logIn(user, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> (err) res.send(err);</div><div class="line">                <span class="keyword">return</span> res.send(&#123;</div><div class="line">                    <span class="attr">message</span>: info.message,</div><div class="line">                    <span class="attr">user</span>: user</div><div class="line">                &#125;);</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">        &#125;)(req, res);</div><div class="line">    &#125;,</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 处理登出逻辑</div><div class="line">     * @param req</div><div class="line">     * @param res</div><div class="line">     */</div><div class="line">    logout: <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</div><div class="line">        req.logout();</div><div class="line">        res.redirect(<span class="string">'/'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<blockquote>
<p>任何 sails 的控制器方法都有两个参数，<a href="http://www.sailsjs.org/documentation/reference/request-req" target="_blank" rel="external">req（请求）对象</a>及<a href="http://www.sailsjs.org/documentation/reference/response-res" target="_blank" rel="external">res（响应）对象</a>。</p>
</blockquote>
<p>创建<strong>config/passport.js</strong>对 passport 验证进行如下配置：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> passport = <span class="built_in">require</span>(<span class="string">'passport'</span>),</div><div class="line">    <span class="comment">// 使用本地登录逻辑</span></div><div class="line">    LocalStrategy = <span class="built_in">require</span>(<span class="string">'passport-local'</span>).Strategy,</div><div class="line">    <span class="comment">// 使用 bcrypt 进行密码加密</span></div><div class="line">    bcrypt = <span class="built_in">require</span>(<span class="string">'bcrypt'</span>);</div><div class="line"></div><div class="line">passport.serializeUser(<span class="function"><span class="keyword">function</span>(<span class="params">user, done</span>) </span>&#123;</div><div class="line">    done(<span class="literal">null</span>, user.id);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">passport.deserializeUser(<span class="function"><span class="keyword">function</span>(<span class="params">id, done</span>) </span>&#123;</div><div class="line">    User.findOne(&#123; <span class="attr">id</span>: id &#125; , <span class="function"><span class="keyword">function</span> (<span class="params">err, user</span>) </span>&#123;</div><div class="line">        done(err, user);</div><div class="line">    &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line">passport.use(<span class="keyword">new</span> LocalStrategy(&#123;</div><div class="line">        <span class="attr">usernameField</span>: <span class="string">'email'</span>,</div><div class="line">        <span class="attr">passwordField</span>: <span class="string">'password'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="function"><span class="keyword">function</span>(<span class="params">email, password, done</span>) </span>&#123;</div><div class="line"></div><div class="line">        User.findOne(&#123; <span class="attr">email</span>: email &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">err, user</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (err) &#123; <span class="keyword">return</span> done(err); &#125;</div><div class="line">            <span class="keyword">if</span> (!user) &#123;</div><div class="line">                <span class="keyword">return</span> done(<span class="literal">null</span>, <span class="literal">false</span>, &#123; <span class="attr">message</span>: <span class="string">'Incorrect email.'</span> &#125;);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            bcrypt.compare(password, user.password, <span class="function"><span class="keyword">function</span> (<span class="params">err, res</span>) </span>&#123;</div><div class="line">                <span class="keyword">if</span> (!res)</div><div class="line">                    <span class="keyword">return</span> done(<span class="literal">null</span>, <span class="literal">false</span>, &#123;</div><div class="line">                        <span class="attr">message</span>: <span class="string">'Invalid Password'</span></div><div class="line">                    &#125;);</div><div class="line">                <span class="keyword">var</span> returnUser = &#123;</div><div class="line">                    <span class="attr">email</span>: user.email,</div><div class="line">                    <span class="attr">createdAt</span>: user.createdAt,</div><div class="line">                    <span class="attr">id</span>: user.id</div><div class="line">                &#125;;</div><div class="line">                <span class="keyword">return</span> done(<span class="literal">null</span>, returnUser, &#123;</div><div class="line">                    <span class="attr">message</span>: <span class="string">'Logged In Successfully'</span></div><div class="line">                &#125;);</div><div class="line">            &#125;);</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">));</div></pre></td></tr></table></figure>
<h2 id="访问控制-ACL"><a href="#访问控制-ACL" class="headerlink" title="访问控制(ACL)"></a>访问控制(ACL)</h2><p>将 sails 启动后，访问 <a href="http://localhost:1337" target="_blank" rel="external">localhost:1337/register</a> 进行用户注册:</p>
<p><img src="http://7pulhb.com1.z0.glb.clouddn.com/sails - 注册页面. png" alt="注册页面"></p>
<p>然后可以在 mongodb 中看到，我们成功创建了用户:</p>
<p><img src="http://7pulhb.com1.z0.glb.clouddn.com/sails-2_user_created.png" alt="mongo_user_created"></p>
<p>###Policies</p>
<p>如何对系统中的页面进行访问控制，这里就要用到 sails 的核心组件 —<a href="http://www.sailsjs.org/documentation/concepts/policies" target="_blank" rel="external">Policies</a>，接下来我们创建几个 policy 来对我们的业务逻辑进行访问控制（access control）。</p>
<p>首先，创建<strong>api/policies/isAuthenticated.js</strong>，该 policy 用于判断请求是否授权（即用户是否登录）：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 用户是否被授权</div><div class="line"> * @param req</div><div class="line"> * @param res</div><div class="line"> * @param next</div><div class="line"> * @returns &#123;*&#125;</div><div class="line"> */</div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (req.isAuthenticated()) &#123;</div><div class="line">        <span class="keyword">return</span> next();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">return</span> res.redirect(<span class="string">'/login'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>因为本博客系统<strong>仅允许单用户</strong>存在，故在跳转到注册的业务逻辑时，我们需要知道用户是否被创建，如果用户被创建，则跳转回首页，否则继续执行注册相应逻辑：</p>
<p>创建<strong>api/policies/userNotCreated.js</strong>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">    <span class="comment">// 检查数据库中是否已经有用户</span></div><div class="line">    User.find().exec(<span class="function"><span class="keyword">function</span>(<span class="params">err,users</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(users.length)&#123;</div><div class="line">            res.redirect(<span class="string">'/logout'</span>);</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            next();</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>同时，本系统显然只有当用户存在时访问才是有效地（否则没有文章来源）：</p>
<p>创建<strong>api/policies/userCreated.js</strong>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">req, res, next</span>) </span>&#123;</div><div class="line">    <span class="comment">// 检查数据库中是否已经有用户</span></div><div class="line">    User.find().exec(<span class="function"><span class="keyword">function</span>(<span class="params">err,users</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(users.length)&#123;</div><div class="line">            next();</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line">            res.redirect(<span class="string">'/register'</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>然后设置<strong>config/policies.js</strong>，建立 policy 与各业务逻辑的映射关系：</p>
<blockquote>
<p><strong>true</strong>的含义代表，该业务逻辑可被任何角色访问，而通配符 * 则代表所有业务逻辑(action)</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Policy Mappings</div><div class="line"> */</div><div class="line"><span class="built_in">module</span>.exports.policies = &#123;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// 默认所有行为需要登录</span></div><div class="line">    <span class="comment">// 若某些行为不需要，则在下面声明</span></div><div class="line">    <span class="string">'*'</span>: <span class="string">'isAuthenticated'</span>,</div><div class="line"></div><div class="line">    <span class="comment">// 验证逻辑都不需要登录</span></div><div class="line">    <span class="comment">// 用户创建后不再允许注册</span></div><div class="line">    AuthController: &#123;</div><div class="line">        <span class="string">'*'</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">toRegister</span>: <span class="string">'userNotCreated'</span></div><div class="line">    &#125;,</div><div class="line"></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>接下来重启 sails，并访问<a href="http://localhost:1337" target="_blank" rel="external">localhost:1337</a>, 我们将会被跳转登录页：</p>
<p><img src="http://7pulhb.com1.z0.glb.clouddn.com/sails - 登陆页面. png" alt="登录页"></p>
<h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>注入站点名称（siteName），站点简介（siteDesc）等属性将经常被不止一个页面所访问，如果每次我们进行数据库查询获取这两个数据将会是十分低效的，在这里，我们通过 sails 灵活的自定义配置来设置这两个属性。</p>
<p>创建<strong>config/site.js</strong>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports.site = &#123;</div><div class="line">    <span class="comment">// 站点名称</span></div><div class="line">    name  : <span class="string">""</span>,</div><div class="line">    <span class="comment">// 站点介绍</span></div><div class="line">    desc  : <span class="string">""</span>,</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>现在，在 swig 中，我们可以通过如下方式访问到这两个变量了:</p>
<figure class="highlight twig"><table><tr><td class="code"><pre><div class="line"><span class="xml"></span><span class="template-variable">&#123;&#123; sails.config.site.name &#125;&#125;</span><span class="xml"></span></div><div class="line"><span class="template-variable">&#123;&#123; sails.config.site.desc &#125;&#125;</span><span class="xml"></span></div></pre></td></tr></table></figure>
<p>然后，这样的书写方式太过冗长，为此，我们修改我们的视图配置，让页面维护一个<strong>site</strong>对象：</p>
<p><strong>config/views.js</strong>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="keyword">var</span> extras = <span class="built_in">require</span>(<span class="string">'swig-extras'</span>);</div><div class="line"><span class="built_in">module</span>.exports.views = &#123;</div><div class="line">    <span class="attr">engine</span>: &#123;</div><div class="line">        <span class="comment">/* Template File Extension */</span></div><div class="line">        ext: <span class="string">'swig'</span>,</div><div class="line"></div><div class="line">        <span class="comment">/* Function to handle render request */</span></div><div class="line">        fn: <span class="function"><span class="keyword">function</span> (<span class="params">path, data, cb</span>) </span>&#123;</div><div class="line">            <span class="comment">/* Swig Renderer */</span></div><div class="line">            <span class="keyword">var</span> swig = <span class="built_in">require</span>(<span class="string">'swig'</span>);</div><div class="line">            <span class="comment">// 保证我们在开发环境下每次更改 swig 不用重启 sails</span></div><div class="line">            <span class="keyword">if</span> (data.settings.env === <span class="string">'development'</span>) &#123;</div><div class="line">                swig.setDefaults(&#123;<span class="attr">cache</span>: <span class="literal">false</span>&#125;);</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 维护一个 site 变量</span></div><div class="line">            data.site = sails.config.site;</div><div class="line">            <span class="comment">// 提供一个变量标示用户是否登录</span></div><div class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> (data.isLogged) == <span class="string">'undefined'</span>) &#123;</div><div class="line">                data.isLogged = !!data.req.isAuthenticated();</div><div class="line">            &#125;</div><div class="line">            <span class="comment">/*</span></div><div class="line">             * 绑定一些常用路径</div><div class="line">             * Thanks to: https://github.com/mahdaen/sails-views-swig</div><div class="line">             * */</div><div class="line">            <span class="keyword">var</span> paths = &#123;</div><div class="line">                <span class="attr">script</span>: <span class="string">'/js'</span>,</div><div class="line">                <span class="attr">style</span>: <span class="string">'/styles/default'</span>,</div><div class="line">                <span class="attr">image</span>: <span class="string">'/images'</span>,</div><div class="line">                <span class="attr">font</span>: <span class="string">'/fonts'</span>,</div><div class="line">                <span class="attr">icon</span>: <span class="string">'/icons'</span>,</div><div class="line">                <span class="attr">bower</span>: <span class="string">'/bower_components'</span></div><div class="line">            &#125;;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (!data.path) &#123;</div><div class="line">                data.path = paths;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> paths) &#123;</div><div class="line">                    <span class="keyword">if</span> (!key <span class="keyword">in</span> data.path) &#123;</div><div class="line">                        data.path[key] = paths[key];</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// 补充 extra</span></div><div class="line">            extras.useFilter(swig, <span class="string">'split'</span>);</div><div class="line">            <span class="comment">/* Render Templates */</span></div><div class="line">            <span class="keyword">return</span> swig.renderFile(path, data, cb);</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="attr">layout</span>: <span class="string">'layout'</span>,</div><div class="line"></div><div class="line">    <span class="attr">partials</span>: <span class="literal">false</span></div><div class="line"></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>显然，每次服务器启动的时候就应当设置这两个变量，为此，我们修改<strong>config/bootstrap.js</strong>，该文件可以配置服务器启动时的相应动作：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports.bootstrap = <span class="function"><span class="keyword">function</span> (<span class="params">cb</span>) </span>&#123;</div><div class="line">    <span class="comment">// 启动时刷新站点信息</span></div><div class="line">    User.find().exec(<span class="function"><span class="keyword">function</span>(<span class="params">err,users</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span>(users.length &gt; <span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">var</span> user = users[<span class="number">0</span>];</div><div class="line">            sails.config.site.name = user.siteName;</div><div class="line">            sails.config.site.desc = user.siteDesc;</div><div class="line">        &#125;</div><div class="line">        cb();</div><div class="line">    &#125;);</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>而每次用户信息创建或更新时也应当更新站点配置，为此，我们在<strong>User</strong>模型中添加新的生命期回调 —afterUpdate 及 afterCreate:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"></div><div class="line">afterCreate: <span class="function"><span class="keyword">function</span> (<span class="params">createdUser, cb</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.updateSite(user);</div><div class="line">    cb();</div><div class="line">&#125;,</div><div class="line"></div><div class="line"><span class="comment">// 用户信息更新时，更新站点信息</span></div><div class="line">afterUpdate: <span class="function"><span class="keyword">function</span> (<span class="params">user,cb</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.updateSite(user);</div><div class="line">    cb();</div><div class="line">&#125;,</div><div class="line"></div><div class="line"><span class="comment">// 更新站点信息</span></div><div class="line">updateSite: <span class="function"><span class="keyword">function</span>(<span class="params">user</span>)</span>&#123;</div><div class="line">    sails.config.site.name = user.siteName;</div><div class="line">    sails.config.site.desc = user.siteDesc;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h2><p>后端的响应属性验证已经在对应的 User 模型中设置好了，现在我们利用 semantic-ui 的 <a href="http://semantic-ui.com/collections/form.html" target="_blank" rel="external">表单验证模块</a> 来设置前端表单验证，让登录注册页的交互更加完整。</p>
<p>首先，我们要在<strong>assets/js/common/main.js</strong>中手动声明 semantic 表单验证组件的位置：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line"><span class="comment">// 第三方模块声明</span></div><div class="line"><span class="built_in">require</span>.config(&#123;</div><div class="line">    <span class="attr">baseUrl</span>: <span class="string">'/bower_components/'</span>,</div><div class="line">    <span class="attr">paths</span>: &#123;</div><div class="line">        <span class="attr">jquery</span>: <span class="string">'jquery/dist/jquery'</span>,</div><div class="line">        <span class="attr">requirejs</span>: <span class="string">'requirejs/require'</span>,</div><div class="line">        <span class="string">'semantic-ui'</span>: <span class="string">'semantic-ui/dist/semantic'</span>,</div><div class="line">        <span class="attr">underscore</span>: <span class="string">'underscore/underscore'</span>,</div><div class="line">        <span class="attr">backbone</span>: <span class="string">'backbone/backbone'</span>,</div><div class="line">        <span class="string">'semantic-form'</span>: <span class="string">'semantic-ui/dist/components/form.min'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">packages</span>: [</div><div class="line"></div><div class="line">    ]</div><div class="line">&#125;);</div><div class="line"><span class="comment">// 加载 app，并运行</span></div><div class="line"><span class="built_in">require</span>([<span class="string">'/js/common/app.js'</span>],<span class="function"><span class="keyword">function</span>(<span class="params">app</span>)</span>&#123;</div><div class="line">    app.init();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>接下来，我们在<strong>assets/js/passport/</strong>目录下创建三个文件：</p>
<ul>
<li><strong>login.js</strong></li>
<li><strong>register.js</strong></li>
<li><strong>PassportPanel.js</strong></li>
</ul>
<p>其中，<strong>PassportPanel.js</strong>中提供一个账户框视图组件（继承自<strong>Backbone.View</strong>）供 login 及 register 两个 module 调用。</p>
<p><strong>PassportPanel.js</strong>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">define([<span class="string">'semantic-form'</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> PassportPanel = Backbone.View.extend(&#123;</div><div class="line">        <span class="attr">el</span>: $(<span class="string">'.passportContainer'</span>),</div><div class="line">        <span class="attr">events</span>: &#123;</div><div class="line">            <span class="string">'click input'</span>: <span class="string">'hideError'</span></div><div class="line">        &#125;,</div><div class="line">        <span class="attr">initialize</span>: <span class="function"><span class="keyword">function</span> (<span class="params">which</span>) </span>&#123;</div><div class="line">            <span class="comment">// 初始化时绑定表单验证</span></div><div class="line">            <span class="keyword">if</span> (which === <span class="string">'login'</span>)</div><div class="line">                <span class="keyword">this</span>.bindLoginForm();</div><div class="line">            <span class="keyword">else</span></div><div class="line">                <span class="keyword">this</span>.bindRegForm();</div><div class="line"></div><div class="line">        &#125;,</div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 聚焦输入框时，隐藏错误提示</div><div class="line">         */</div><div class="line">        hideError: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> ($(<span class="string">'.error'</span>).length &gt; <span class="number">0</span>) &#123;</div><div class="line">                <span class="keyword">if</span> (!$(<span class="string">'.error'</span>).is(<span class="string">':hidden'</span>)) &#123;</div><div class="line">                    $(<span class="string">'.error'</span>).hide();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;,</div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 绑定登录表单验证</div><div class="line">         */</div><div class="line">        bindLoginForm: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            $(<span class="string">'.ui.form'</span>).form(&#123;</div><div class="line">                <span class="attr">inline</span>: <span class="literal">true</span>,</div><div class="line">                <span class="attr">fields</span>: &#123;</div><div class="line">                    <span class="attr">email</span>: &#123;</div><div class="line">                        <span class="attr">identifier</span>: <span class="string">'email'</span>,</div><div class="line">                        <span class="attr">rules</span>: [</div><div class="line">                            &#123;</div><div class="line">                                <span class="attr">type</span>: <span class="string">'email'</span>,</div><div class="line">                                <span class="attr">prompt</span>: <span class="string">'请填写正确的邮箱'</span></div><div class="line">                            &#125;</div><div class="line">                        ]</div><div class="line">                    &#125;,</div><div class="line">                    <span class="attr">password</span>: &#123;</div><div class="line">                        <span class="attr">identifier</span>: <span class="string">'password'</span>,</div><div class="line">                        <span class="attr">rules</span>: [</div><div class="line">                            &#123;</div><div class="line">                                <span class="attr">type</span>: <span class="string">'empty'</span>,</div><div class="line">                                <span class="attr">prompt</span>: <span class="string">'请填写密码'</span></div><div class="line">                            &#125;</div><div class="line">                        ]</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;,</div><div class="line">        <span class="comment">// 绑定注册表单验证</span></div><div class="line">        bindRegForm: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">            $(<span class="string">'.ui.form'</span>).form(&#123;</div><div class="line">                <span class="attr">inline</span>: <span class="literal">true</span>,</div><div class="line">                <span class="attr">fields</span>: &#123;</div><div class="line">                    <span class="attr">siteName</span>: &#123;</div><div class="line">                        <span class="attr">identifier</span>: <span class="string">'siteName'</span>,</div><div class="line">                        <span class="attr">rules</span>: [</div><div class="line">                            &#123;</div><div class="line">                                <span class="attr">type</span>: <span class="string">'empty'</span>,</div><div class="line">                                <span class="attr">prompt</span>: <span class="string">'站点名不能为空'</span></div><div class="line">                            &#125;,</div><div class="line">                            &#123;</div><div class="line">                                <span class="attr">type</span>: <span class="string">'maxLength[10]'</span>,</div><div class="line">                                <span class="attr">prompt</span>: <span class="string">'站点名不能超过 10 个字符'</span></div><div class="line">                            &#125;</div><div class="line">                        ]</div><div class="line">                    &#125;,</div><div class="line">                    <span class="attr">email</span>: &#123;</div><div class="line">                        <span class="attr">identifier</span>: <span class="string">'email'</span>,</div><div class="line">                        <span class="attr">rules</span>: [</div><div class="line">                            &#123;</div><div class="line">                                <span class="attr">type</span>: <span class="string">'email'</span>,</div><div class="line">                                <span class="attr">prompt</span>: <span class="string">'请填写正确的邮箱'</span></div><div class="line">                            &#125;</div><div class="line">                        ]</div><div class="line">                    &#125;,</div><div class="line">                    <span class="attr">password</span>: &#123;</div><div class="line">                        <span class="attr">identifier</span>: <span class="string">'password'</span>,</div><div class="line">                        <span class="attr">rules</span>: [</div><div class="line">                            &#123;</div><div class="line">                                <span class="attr">type</span>: <span class="string">'length[6]'</span>,</div><div class="line">                                <span class="attr">prompt</span>: <span class="string">'密码不能少于 6 位'</span></div><div class="line">                            &#125;</div><div class="line">                        ]</div><div class="line">                    &#125;,</div><div class="line">                    <span class="attr">siteDesc</span>: &#123;</div><div class="line">                        <span class="attr">identifier</span>: <span class="string">'siteDesc'</span>,</div><div class="line">                        <span class="attr">rules</span>: [</div><div class="line">                            &#123;</div><div class="line">                                <span class="attr">type</span>: <span class="string">'maxLength[20]'</span>,</div><div class="line">                                <span class="attr">prompt</span>: <span class="string">'站点简介不超过 20 字符'</span></div><div class="line">                            &#125;</div><div class="line">                        ]</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> PassportPanel;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>login.js</strong>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">define([<span class="string">'./PassportPanel.js'</span>],<span class="function"><span class="keyword">function</span>(<span class="params">PassportPanel</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">run</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="comment">// 如果有错误，则当 focus 输入域时，自动隐藏错误提示</span></div><div class="line">            <span class="keyword">var</span> loginPanel = <span class="keyword">new</span> PassportPanel(<span class="string">'login'</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p><strong>register.js</strong>:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><div class="line">define([<span class="string">'./PassportPanel.js'</span>],<span class="function"><span class="keyword">function</span>(<span class="params">PassportPanel</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">run</span> : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> regPanel = <span class="keyword">new</span> PassportPanel(<span class="string">'reg'</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>测试一下：</p>
<p><img src="http://7pulhb.com1.z0.glb.clouddn.com/sails - 表单验证测试. png" alt="表单测试"></p>
<h2 id="章节预告"><a href="#章节预告" class="headerlink" title="章节预告"></a>章节预告</h2><p>在下一章当中，我们开始实现博客系统的文章模块。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;章节概述&quot;&gt;&lt;a href=&quot;#章节概述&quot; class=&quot;headerlink&quot; title=&quot;章节概述&quot;&gt;&lt;/a&gt;章节概述&lt;/h2&gt;&lt;p&gt;在本章中，你讲学习到如下知识： &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;sails 中如何配置 mongodb&lt;/p&gt;
&lt;/li&gt;
    
    </summary>
    
      <category term="利用Sails.js+MongoDB开发博客系统" scheme="http://yoyoyohamapi.me/categories/%E5%88%A9%E7%94%A8Sails-js-MongoDB%E5%BC%80%E5%8F%91%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="sails,mongodb,nodejs,登录注册" scheme="http://yoyoyohamapi.me/tags/sails-mongodb-nodejs-%E7%99%BB%E5%BD%95%E6%B3%A8%E5%86%8C/"/>
    
  </entry>
  
  <entry>
    <title>数字图像处理（9）-- 频率域滤波（3）：图像锐化</title>
    <link href="http://yoyoyohamapi.me/2017/03/08/Image_Processing/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%889%EF%BC%89--%20%E9%A2%91%E7%8E%87%E5%9F%9F%E6%BB%A4%E6%B3%A2%EF%BC%883%EF%BC%89%EF%BC%9A%E5%9B%BE%E5%83%8F%E9%94%90%E5%8C%96/"/>
    <id>http://yoyoyohamapi.me/2017/03/08/Image_Processing/数字图像处理（9）-- 频率域滤波（3）：图像锐化/</id>
    <published>2017-03-08T02:17:57.000Z</published>
    <updated>2017-03-08T02:17:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="频率域锐化滤波器："><a href="#频率域锐化滤波器：" class="headerlink" title="频率域锐化滤波器："></a>频率域锐化滤波器：</h2><p><img src="http://7pulhb.com1.z0.glb.clouddn.com/ip - 频率域锐化滤波器透视图. jpg" alt="频率域锐化滤波器"></p>
<p>锐化是平滑的反处理，平滑我们使低频突出，而高频下陷，锐化我们使低频下陷，高频突出。</p>
<p><img src="http://7pulhb.com1.z0.glb.clouddn.com/ip - 频率域锐化滤波器. jpg" alt="频率域锐化滤波器"></p>
<p>如上可以看出，理想高通滤波器存在明显的 “振铃” 现象，而高斯高通滤波器则没有 “振铃” 现象。</p>
<p>实验表明，GHPF 的结果比 BHPF 和 IHPF 的结果更加平滑。</p>
<h2 id="频率域拉普拉斯算子："><a href="#频率域拉普拉斯算子：" class="headerlink" title="频率域拉普拉斯算子："></a>频率域拉普拉斯算子：</h2><p><img src="http://7pulhb.com1.z0.glb.clouddn.com/ip - 拉普拉斯算子 2.jpg" alt="频率域拉普拉斯算子"> </p>
<p>注意，拉普拉斯图像虽然是拱形的，但并非完成的是低频通过的滤波，因为高频分量被乘上了负值也是通过了的，而低频分量乘以一个十分靠近 0 的数则会受到抑制，所以拉普拉斯仍然是一个高通滤波器。可以看到，拉普拉斯滤波函数使得原图像平均灰度级变为 0，故而拉普拉斯滤波后的图像上分布着灰度值有正有负的像素点。</p>
<p>下面是拉普拉斯滤波后的结果：</p>
<p><img src="http://7pulhb.com1.z0.glb.clouddn.com/ip - 拉普拉斯 Demo2.jpg" alt="拉普拉斯滤波 Demo"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;频率域锐化滤波器：&quot;&gt;&lt;a href=&quot;#频率域锐化滤波器：&quot; class=&quot;headerlink&quot; title=&quot;频率域锐化滤波器：&quot;&gt;&lt;/a&gt;频率域锐化滤波器：&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7pulhb.com1.z0.glb.cloudd
    
    </summary>
    
      <category term="数字图像处理" scheme="http://yoyoyohamapi.me/categories/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    
      <category term="数字图像处理" scheme="http://yoyoyohamapi.me/tags/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>数字图像处理（10）-- 在 OpenCv2 及 MATLAB 中傅里叶变换的使用</title>
    <link href="http://yoyoyohamapi.me/2017/03/08/Image_Processing/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%8810%EF%BC%89--%20%E5%9C%A8OpenCv2%E5%8F%8AMATLAB%E4%B8%AD%E5%82%85%E9%87%8C%E5%8F%B6%E5%8F%98%E6%8D%A2%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoyoyohamapi.me/2017/03/08/Image_Processing/数字图像处理（10）-- 在OpenCv2及MATLAB中傅里叶变换的使用/</id>
    <published>2017-03-08T02:17:57.000Z</published>
    <updated>2017-03-08T02:17:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>##opencv2 中：</p>
<figure class="highlight"><table><tr><td class="code"><pre><div class="line">#include &lt;stdio.h&gt;</div><div class="line">#include &lt;iostream&gt;</div><div class="line">#include &lt;opencv2\imgproc\imgproc.hpp&gt;</div><div class="line">#include &lt;opencv2\highgui\highgui.hpp&gt;</div><div class="line"></div><div class="line">using namespace cv;</div><div class="line">using namespace std;</div><div class="line"></div><div class="line">//Gloabla Variables</div><div class="line">Mat imgSrc,imgFrq;</div><div class="line">const char *winSrcName = "Image Src";</div><div class="line">const char *winFrqName = "Image Frq scaled";</div><div class="line"></div><div class="line"></div><div class="line">// 主函数入口 </div><div class="line">int main()&#123;</div><div class="line">  // 读取原图像, 并转换为灰度图像</div><div class="line">  const char *imgSrcPath = "E:\\Srcs\\Fig0323(a)(mars_moon_phobos).tif";</div><div class="line">  imgSrc = imread(imgSrcPath,CV_LOAD_IMAGE_GRAYSCALE);</div><div class="line">  </div><div class="line">  if (imgSrc.empty())</div><div class="line">    return -1;</div><div class="line"></div><div class="line">  Mat padded;// 扩展图像以加快离散傅里叶变换（当图像的尺寸是 2， 3，5 的整数倍时，计算速度最快）</div><div class="line">  int m = getOptimalDFTSize(imgSrc.rows);// 获得最佳变换尺寸</div><div class="line">  int n = getOptimalDFTSize(imgSrc.cols);</div><div class="line">  // 扩展原图像至 Padded 图像中, 边缘添加零, 且边缘右下填充（0,m-imgSrc.rows 代表顶部填充 0 行，底部填充 m-imgSrc.rows 行）</div><div class="line">  copyMakeBorder(imgSrc,padded,0,m-imgSrc.rows,0,n-imgSrc.cols,BORDER_CONSTANT,Scalar::all(0));</div><div class="line"></div><div class="line">  // 为傅立叶变换的结果(实部和虚部) 分配存储空间</div><div class="line">  Mat planes[] = &#123; Mat_&lt;float&gt;(padded), Mat::zeros(padded.size(), CV_32F) &#125;;</div><div class="line">  Mat imgComplex;// 新建复数域的图像</div><div class="line">  merge(planes,2,imgComplex);// 混合图像的实数部分和复数部分至新图像，亦即新图像每个像素点有实数，复数两个通道</div><div class="line"></div><div class="line">  // 执行傅里叶变换</div><div class="line">  dft(imgComplex,imgComplex);</div><div class="line">  // 得到幅度值，去复数域</div><div class="line">  split(imgComplex,planes);</div><div class="line">  magnitude(planes[0], planes[1], planes[0]);// 幅度 = （Real 平方 + Imginary 平方）开根号</div><div class="line">  Mat imgFrq = planes[0];// 此时不标定，将会产生全白色图像（因为平方数很大）</div><div class="line"></div><div class="line">  // 对数化图像，增加亮度(输出图像 = log(1 + 输入图像))</div><div class="line">  imgFrq += Scalar::all(1);</div><div class="line">  log(imgFrq,imgFrq);</div><div class="line">  /*</div><div class="line">  * 频谱图中心化</div><div class="line">  * 将频谱以中心划分为四个象限：</div><div class="line">  * 左上 -&gt;1，左下 -&gt;2，右下 -&gt;3，右上 -&gt;4</div><div class="line">  * 原象限与中心化后的象限对应关系：</div><div class="line">  *1-&gt;3,  2-&gt;4,  3-&gt;1,  4-&gt;2</div><div class="line">  */</div><div class="line">  int centerX = imgFrq.cols / 2;</div><div class="line">  int centerY = imgFrq.rows / 2;</div><div class="line">  Mat q1(imgFrq,Rect(0,0,centerX,centerY));</div><div class="line">  Mat q2(imgFrq, Rect(0, centerY, centerX, centerY));</div><div class="line">  Mat q3(imgFrq, Rect(centerX, centerY, centerX, centerY));</div><div class="line">  Mat q4(imgFrq, Rect(centerX, 0, centerX, centerY));</div><div class="line"></div><div class="line">  // 执行交换</div><div class="line">  Mat tmp;</div><div class="line">  q1.copyTo(tmp);</div><div class="line">  q3.copyTo(q1);</div><div class="line">  tmp.copyTo(q3);</div><div class="line"></div><div class="line">  q2.copyTo(tmp);</div><div class="line">  q4.copyTo(q2);</div><div class="line">  tmp.copyTo(q4);</div><div class="line"></div><div class="line">  // 标定</div><div class="line">  normalize(imgFrq, imgFrq, 255.0,0);</div><div class="line">  // 显示原图像及其填充图像对应的傅里叶频谱</div><div class="line">  namedWindow(winSrcName,CV_WINDOW_AUTOSIZE);</div><div class="line">  imshow(winSrcName,imgSrc);</div><div class="line">  namedWindow(winFrqName, CV_WINDOW_AUTOSIZE);</div><div class="line">  imshow(winFrqName, imgFrq);</div><div class="line">  waitKey(0);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行结果如下：</p>
<p><img src="http://7pulhb.com1.z0.glb.clouddn.com/ip-opencv2_傅里叶. png" alt="opencv2 傅里叶变换"></p>
<p>##Matlab 中:</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><div class="line">imgSrc = imread(<span class="string">'E:\\Srcs\\Fig0323(a)(mars_moon_phobos).tif'</span>);</div><div class="line"><span class="comment">% 进行离散傅里叶变换</span></div><div class="line">imgDst = fft2(imgSrc);</div><div class="line"><span class="comment">% 中心化</span></div><div class="line">imgDstCentered = fftshift(imgDst);</div><div class="line"><span class="comment">% 得到幅度值</span></div><div class="line">imgSpectrum = <span class="built_in">abs</span>(imgDstCentered);</div><div class="line"><span class="comment">% 对数增强</span></div><div class="line">imgSpectrum = <span class="built_in">log</span>(imgSpectrum);</div><div class="line"></div><div class="line"><span class="comment">% 傅里叶反变换</span></div><div class="line">imgIDFT = ifft2(imgDst);</div><div class="line"></div><div class="line"><span class="comment">% 显示工作</span></div><div class="line">figure;</div><div class="line">subplot(<span class="number">131</span>);</div><div class="line">imshow(imgSrc);</div><div class="line">subplot(<span class="number">132</span>);</div><div class="line">imshow(imgSpectrum,[]);</div><div class="line">subplot(<span class="number">133</span>);</div><div class="line">imshow(imgIDFT,[]);</div></pre></td></tr></table></figure>
<p>执行结果如下：</p>
<p><img src="http://7pulhb.com1.z0.glb.clouddn.com/ip-matlab_傅里叶. png" alt="matlab 傅里叶变换"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##opencv2 中：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;#include &amp;lt;stdio.h&amp;gt;&lt;/div&gt;&lt;div class=&quot;l
    
    </summary>
    
      <category term="数字图像处理" scheme="http://yoyoyohamapi.me/categories/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    
      <category term="数字图像处理" scheme="http://yoyoyohamapi.me/tags/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>数字图像处理（12）-- 图像修复及重建 (1)：关于噪声的探讨</title>
    <link href="http://yoyoyohamapi.me/2017/03/08/Image_Processing/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%8812%EF%BC%89--%20%E5%9B%BE%E5%83%8F%E4%BF%AE%E5%A4%8D%E5%8F%8A%E9%87%8D%E5%BB%BA(1)%EF%BC%9A%E5%85%B3%E4%BA%8E%E5%99%AA%E5%A3%B0%E7%9A%84%E6%8E%A2%E8%AE%A8/"/>
    <id>http://yoyoyohamapi.me/2017/03/08/Image_Processing/数字图像处理（12）-- 图像修复及重建(1)：关于噪声的探讨/</id>
    <published>2017-03-08T02:17:57.000Z</published>
    <updated>2017-03-08T02:17:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="首先，我们需要构建图像质量下降的模型："><a href="#首先，我们需要构建图像质量下降的模型：" class="headerlink" title="首先，我们需要构建图像质量下降的模型："></a>首先，我们需要构建图像质量下降的模型：</h2><h3 id="空间域："><a href="#空间域：" class="headerlink" title="空间域："></a>空间域：</h3><p>$g(x,y)=h(x,y)\text{☆}f(x,y)+\eta(x,y)$</p>
<p>其中 $g(x,y)$ 为质量下降后的图像,$h(x,y)$ 使图像降质的函数,$f(x,y)$ 为原图像,$\eta(x,y)$ 为噪声图像</p>
<h3 id="频率域（空间域卷积对应频率域乘积）："><a href="#频率域（空间域卷积对应频率域乘积）：" class="headerlink" title="频率域（空间域卷积对应频率域乘积）："></a>频率域（空间域卷积对应频率域乘积）：</h3><p>$G(u,v)=H(u,v)F(u,v)+N(u,v)$</p>
<p>$G$,$H$,$F$,$N$ 对应如上 $g$,$h$,$f$,$\eta$ 的傅里叶变换。</p>
<h2 id="下面认识几种重要的噪声："><a href="#下面认识几种重要的噪声：" class="headerlink" title="下面认识几种重要的噪声："></a>下面认识几种重要的噪声：</h2><p>###Gaussian:</p>
<p>其概率密度函数为：（$p(z)$ 即噪声灰度为 $z$ 的概率）</p>
<p>$p(z)=\frac{1}{\sqrt{2\pi}\delta}e^{-(z-\bar{z})^2/2\delta^2}$</p>
<p>Gaussian 噪声的特点是：噪声灰度集中在中央灰阶左右，相对偏灰，黑白噪声分布较少。</p>
<p>###Rayleigh:</p>
<p>其概率密度函数为：</p>
<p>$\begin{equation} p(z)=\begin{cases}\frac{2}{b}(z-a)e^{-(z-a)^2/b}&amp;\mbox{for z}\geq{a} \0 &amp;\mbox{for z &lt; a} \end{cases}\end{equation}$</p>
<p>噪声灰度 $\geq a$, 概率密度曲线向右倾斜，右侧积分面积更大，即噪声灰度更多分布在中轴（$a+\sqrt{\frac{b}{2}}$）右侧。</p>
<p>###Erlang(gamma):</p>
<p>其概率密度函数为：</p>
<p>$\begin{equation}p(z)=\begin{cases}\frac{a^bz^{b-1}}{(b-1)!}{-e^{-az}}&amp;\mbox{for z}\geq{0}\0&amp;\mbox{for z &lt; 0}\end{cases}\end{equation}$</p>
<p>Erlang 噪声类似于 Reyleigh 噪声，但可以取到更左侧灰度。</p>
<p>###Exponential:</p>
<p>其概率密度函数为：</p>
<p>$\begin{equation}p(z)=\begin{cases}ae^(-az)&amp;\mbox{for z}\geq{0}\0&amp;\mbox{for z &lt; 0}\end{cases}\end{equation}$</p>
<p>概率密度函数呈指数下降状态，噪声灰度多集中在低灰度区。</p>
<p>###Uniform:</p>
<p>其概率密度函数为：</p>
<p>$\begin{equation}p(z)=\begin{cases}\frac{1}{b-a} &amp;\mbox{for a}\leq{z}\geq{b}\0 &amp;\mbox{otherwise}\end{cases}\end{equation}$</p>
<p>噪声灰度在 [a,b] 间等可能取值。</p>
<p>###Impulse(salt-and-peper):</p>
<p>其概率密度是函数为：</p>
<p>$\begin{equation}p(z)=\begin{cases}P_a &amp;\mbox{for z=a}\P_b &amp;\mbox{for z=b}\0 &amp;\mbox{otherwise}\end{cases}\end{equation}$</p>
<p>噪声灰度以一定可能性取值为 $a$，以一定可能性取值为 $b$，通常 $a$，$b$ 对比明显，一者为白如雪盐(salt)，另者黑如胡椒(pepper)</p>
<h2 id="空间滤波："><a href="#空间滤波：" class="headerlink" title="空间滤波："></a>空间滤波：</h2><p>当图像的降质仅有噪声引起时，即图像的降质模型为：</p>
<p>$g(x,y)=f(x,y)+\eta(x,y)$</p>
<p>$G(u,v)=F(u,v)+N(u,v)$</p>
<p>此时，宜考虑使用空间滤波进行图像修复</p>
<h3 id="均值滤波（mean-filter）："><a href="#均值滤波（mean-filter）：" class="headerlink" title="均值滤波（mean filter）："></a>均值滤波（mean filter）：</h3><p>####Arithmetic mean filter（算数均值滤波）：</p>
<p>图像修复模型：</p>
<p>$\hat{f}(x,y)=\frac{1}{mn}\sum\limits<em>{(s,t)\in S</em>{xy}}g(s,t)$</p>
<p>即坐标 $(x,y)$ 处像素修复后的灰度为该坐标领域 (领域大小为 $m*n$) 内像素灰度的算术平均值，其对 Gaussian 噪声有较好的处理效果。</p>
<p>####Geometric mean filter（几何均值滤波）：</p>
<p>图像修复模型：</p>
<p>$\hat{f}(x,y)=[\prod\limits<em>{(s,t)\in S</em>{xy}}g(s,t)]^{\frac{1}{mn}}$</p>
<p>即坐标 $(x,y)$ 处像素修复后的灰度为该坐标领域 (领域大小为 $m*n$) 内像素灰度的几何平均值，其对 Gaussian 噪声有较好的处理效果。</p>
<p>####Harmonic mean filter（调和平均数滤波）：</p>
<p>图像修复模型：</p>
<p>$\hat{f}(x,y)=\frac{mn}{\sum\limits<em>{(s,t)\in S</em>{xy}}\frac{1}{g(s,t)}}$</p>
<p>该模型有利于消除 salt 噪声，而不利于消除 pepper 噪声。</p>
<p>####Contraharmonic mean filter（反调和平均数滤波）:</p>
<p>图像修复模型：</p>
<p> $\hat{f}(x,y)=\frac{\sum\limits<em>{(s,t)\in S</em>{xy}}g(s,t)^{Q+1}}{\sum\limits<em>{(s,t)\in S</em>{xy}}g(s,t)^{Q}}$</p>
<p>该模型中对于 Q 的取值决定了针对什么噪声做图像复原，例如，若 Q 取正值，则能减轻 pepper 噪声，取负值则减轻 salt 噪声，鱼和熊掌不可兼得。如果 $Q=0$，则该模型就退化成了 arthmetic filter，而若 $Q=-1$，该模型就退化成了 harmonic filter。</p>
<h3 id="统计排序滤波（order-statistic-filter）："><a href="#统计排序滤波（order-statistic-filter）：" class="headerlink" title="统计排序滤波（order-statistic filter）："></a>统计排序滤波（order-statistic filter）：</h3><p>先排序像素灰度，再按一定算法选取某一灰度作为修复灰度。</p>
<p>####Median Filter（中值滤波）：<br>图像修复模型：</p>
<p>$\hat{f}(x,y)=\mbox{median}<em>{(s,t)\in S</em>{xy}}{g(s,t)}$</p>
<p>该模型实现简单，且能很好地消除椒盐噪声，因为通常椒盐噪声的灰度都偏向极端，不太可能落到中值位置（除非某一区域内落入了大量椒盐噪声）。<br>Max and min filters（最大最小值滤波）：<br>图像修复模型;</p>
<p>Max：$\hat{f}(x,y)=\max\limits<em>{(s,t)\in S</em>{xy}}g(s,t)$</p>
<p>Min:   $\hat{f}(x,y)=\min\limits<em>{(s,t)\in S</em>{xy}}g(s,t)$</p>
<p>显然，最大值滤波有利于消除 pepper 噪声，最小值滤波有利于消除 salt 噪声，因为通常 pepper 噪声的灰度都是极度小的，而 salt 噪声的灰度是极度大的。</p>
<p>####Midpoint filter(中点滤波):</p>
<p>图像修复模型：</p>
<p>$\hat{f}(x,y)=\frac{1}{2}[\min\limits<em>{(s,t)\in S</em>{xy}}g(s,t)+\max\limits<em>{(s,t)\in S</em>{xy}}g(s,t)]$</p>
<p>该模型既包含了统计排序又包含了平均化过程，其对于消除随机噪声会有很好地效果比如 Gaussian 噪声和 uniform 噪声。</p>
<p>####Alpha-trimmed mean filter（修正的阿尔法均值滤波）：</p>
<p>图像修复模型：</p>
<p>$\hat{f}(x,y)=\frac{1}{mn-d}\sum\limits<em>{(s,t)\in S</em>{xy}}g_r(s,t)$</p>
<p>该修复模型的工作过程如下：在 $m*n$ 大小排序好的像素领域内，删去前 $d/2$ 个灰度最小像素，前 $d/2$ 个灰度最大像素（掐头去尾可以消除椒盐噪声）,$g_r(s,t)$ 为剩下的 mn-d 个排序好的像素，对剩余像素求灰度平均（平均化操作又能消除如 Gaussian 或者 uniform 这样的随机噪声），故而该算法有利于消除混合噪声。</p>
<p>在该模型中，注意到若 $d=0$，则模型退化为 arithmetic mean filter，而若 $d=mn-1$，则模型退化为 mean filter，d 的选取是该模型的关键。</p>
<h2 id="频率域滤波："><a href="#频率域滤波：" class="headerlink" title="频率域滤波："></a>频率域滤波：</h2><p>一些周期性噪声在图像的频谱图中很容易观察得到，故而我们可以考虑使用<strong>（1）带通滤波器 (bandpass filter) 或带限滤波器（bandreject filter）</strong> <strong>（2）陷波滤波器（notch filter）</strong>对噪声进行消除。</p>
<p>###Ex1：带通或带限滤波器进行滤波</p>
<ol>
<li><p>如下，原图像遭受了严重的正弦波噪声（sinusoidal noise）污染在图像经过傅里叶变换后得到的频谱图的低频区中，零星的，呈圆形的分布着可疑亮点，而我们知道，图像频谱图中的亮点代表某频率出现次数异常得高，即某个灰度变化出现的次数很高，再考虑到正弦噪声是相对于周围像素灰度变化不严重（即正弦噪声对应于低频分量），且正弦噪声为周期性噪声，出现次数频繁（即正弦噪声对应的频率分量在频谱图中很亮），故判断这些亮点对应的图像很可能是正弦噪声。</p>
</li>
<li><p>使用 Butterworth Bandreject Filter 进行滤波。</p>
</li>
<li><p>滤波后的频谱图经傅里叶反变换后得到修复图像。</p>
</li>
<li><p>并且可通过带通滤波器提取到噪声图像。</p>
</li>
</ol>
<p><img src="http://7pulhb.com1.z0.glb.clouddn.com/ip - 滤波 Demo.png" alt="滤波 Demo"></p>
<p>###Ex2：使用陷波滤波器进行滤波：</p>
<p>陷波滤波器类似于带限滤波器，都是使某一部分频率下陷，但陷波滤波器着重指是不规则形状包围的频率分量下陷。</p>
<p>如下，对被水平扫描线噪声污染了的图像做傅里叶变换获得其频谱图，可以观察到中央分布着一条垂直亮线，即暗示着在垂直方向，图像的灰度变化剧烈，而各条水平扫描线正是在垂直方向上灰度变化剧烈，故我们使该条垂直亮线下陷，即得到了修复图像，是该条垂直亮线通过，则得到了水平扫描线图像。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;首先，我们需要构建图像质量下降的模型：&quot;&gt;&lt;a href=&quot;#首先，我们需要构建图像质量下降的模型：&quot; class=&quot;headerlink&quot; title=&quot;首先，我们需要构建图像质量下降的模型：&quot;&gt;&lt;/a&gt;首先，我们需要构建图像质量下降的模型：&lt;/h2&gt;&lt;h3 i
    
    </summary>
    
      <category term="数字图像处理" scheme="http://yoyoyohamapi.me/categories/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    
      <category term="数字图像处理" scheme="http://yoyoyohamapi.me/tags/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>数字图像处理（11）-- MATLAB 实现自适应中值滤波 (Adaptive Median Filter)</title>
    <link href="http://yoyoyohamapi.me/2017/03/08/Image_Processing/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%8811%EF%BC%89--%20MATLAB%E5%AE%9E%E7%8E%B0%E8%87%AA%E9%80%82%E5%BA%94%E4%B8%AD%E5%80%BC%E6%BB%A4%E6%B3%A2(Adaptive%20Median%20Filter)/"/>
    <id>http://yoyoyohamapi.me/2017/03/08/Image_Processing/数字图像处理（11）-- MATLAB实现自适应中值滤波(Adaptive Median Filter)/</id>
    <published>2017-03-08T02:17:57.000Z</published>
    <updated>2017-03-08T02:17:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>在之前的图像降噪试验中，采取了一般的中值滤波方法，即选定窗口内的中间大小值作为输出像素的值，这在大部分情况都能反映窗口区域内像素的灰度情况。但是考虑到一种情况，假若窗口内分布着大量噪点，则选取的中值就有可能是噪声的灰度。为了避免这种情况，将在中值滤波过程中考虑对中值的判断及选取，这在 Gonzalez 的 <a href="http://item.jd.com/10658649.html" target="_blank" rel="external">《数字图像处理中》</a> 第五章称之为 Adaptive Median Filter。</p>
<p>其业务流程如下：</p>
<h3 id="首先确定窗口内几个主要参数："><a href="#首先确定窗口内几个主要参数：" class="headerlink" title="首先确定窗口内几个主要参数："></a>首先确定窗口内几个主要参数：</h3><ul>
<li><p>$z_{min}$: 窗口内最小灰度值（可能是 salt）</p>
</li>
<li><p>$z_{max}$: 窗口内最大灰度值（可能是 pepper）</p>
</li>
<li><p>$z_{mid}$: 窗口内中点灰度值</p>
</li>
<li><p>$z_{xy}$: 窗口中央元素灰度值</p>
</li>
<li><p>$S_{max}$: 最大允许窗口大小</p>
</li>
</ul>
<h3 id="对窗口内中值的判断分为如下两步："><a href="#对窗口内中值的判断分为如下两步：" class="headerlink" title="对窗口内中值的判断分为如下两步："></a>对窗口内中值的判断分为如下两步：</h3><p>####StageA：</p>
<blockquote>
<p>$A<em>1$ = $z</em>{mid}$ - $z_{min}$</p>
<p>$A<em>2$ = $z</em>{mid}$ - $z_{max}$</p>
<p>IF $A_1$&gt;0 AND $A_2$&lt;0 go to stageB // 当中值落在最大灰度与最小灰度间</p>
<p>Else increase the window size // 否则增加窗口大小重新选择中值直到合适</p>
<p>If window size&lt;=$S_max$ repeat StageA</p>
<p>Else output $z_{mid}$</p>
</blockquote>
<p>####StageB：</p>
<blockquote>
<p>$B<em>1$ = $z</em>{xy}$ - $z_{min}$</p>
<p>$B<em>2$ = $z</em>{xy}$ - $z_{max}$</p>
<p>// 当窗口中央元素不为噪声时，/ 窗口中央元素的优先级高于中值</p>
<p>If $B_1$&gt;0 AND $B<em>2$&lt;0 ,output $z</em>{xy}$</p>
<p>Else output $z_{mid}$</p>
</blockquote>
<p>具体实现代码如下:</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="params">[ imgDst ]</span> = <span class="title">adaptiveMedianFilter</span><span class="params">( imgSrc,kernelSize, maxKernelSize )</span></span></div><div class="line"><span class="comment">% 该函数完成自适应的中值滤波</span></div><div class="line">    <span class="comment">%params:    imgSrc: 原图像</span></div><div class="line">    <span class="comment">%           kernelSize: 卷积核大小（默认为 3）</span></div><div class="line">    <span class="comment">%           maxKernelSize: 卷积核大小（默认为 3）</span></div><div class="line">    </div><div class="line">    <span class="comment">%return:    imgDst: 输出图像</span></div><div class="line"></div><div class="line">    width = <span class="built_in">size</span>(imgSrc,<span class="number">1</span>);</div><div class="line">    height = <span class="built_in">size</span>(imgSrc,<span class="number">2</span>);  </div><div class="line">    </div><div class="line">    <span class="comment">% 需要填充的边缘厚度</span></div><div class="line">    numsPadding = <span class="built_in">floor</span>(maxKernelSize/<span class="number">2</span>);</div><div class="line">    imgPadded = <span class="built_in">zeros</span>([height+numsPadding*<span class="number">2</span>,width+numsPadding*<span class="number">2</span>]);</div><div class="line">    imgPadded(numsPadding+<span class="number">1</span>:numsPadding+height,numsPadding+<span class="number">1</span>:numsPadding+width) = imgSrc;</div><div class="line">    </div><div class="line">    <span class="comment">% 下面是自适应的中值滤波的循环过程</span></div><div class="line">    <span class="keyword">for</span> <span class="built_in">i</span>=numsPadding+<span class="number">1</span>:numsPadding+height</div><div class="line">        <span class="keyword">for</span> <span class="built_in">j</span>=numsPadding+<span class="number">1</span>:numsPadding+width</div><div class="line">            stageA( <span class="built_in">i</span>,<span class="built_in">j</span>,kernelSize,maxKernelSize,imgPadded );         </div><div class="line">        <span class="keyword">end</span></div><div class="line">    <span class="keyword">end</span></div><div class="line">    </div><div class="line">    <span class="comment">% 消去黑边</span></div><div class="line">    imgDst = imgPadded(numsPadding+<span class="number">1</span>:numsPadding+height,numsPadding+<span class="number">1</span>:numsPadding+width);</div><div class="line"></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="params">[ A1,A2,z,zMid,zMax,zMin ]</span> = <span class="title">stageA</span><span class="params">( i,j,kernelSize,maxKernelSize,imgPadded )</span></span></div><div class="line"><span class="comment">%Stage A:</span></div><div class="line">    <span class="keyword">while</span> <span class="number">1</span></div><div class="line">        <span class="comment">% 获得窗口内像素点</span></div><div class="line">        pixels = [];</div><div class="line">        <span class="keyword">for</span> k=-<span class="built_in">floor</span>(kernelSize/<span class="number">2</span>):<span class="built_in">floor</span>(kernelSize)/<span class="number">2</span></div><div class="line">            <span class="keyword">for</span> l=-<span class="built_in">floor</span>(kernelSize/<span class="number">2</span>):<span class="built_in">floor</span>(kernelSize)/<span class="number">2</span></div><div class="line">                pixels = [pixels imgPadded(i+k,j+l)];</div><div class="line">            <span class="keyword">end</span></div><div class="line">        <span class="keyword">end</span></div><div class="line">        len = <span class="built_in">length</span>(pixels);</div><div class="line">        zMax = max(pixels);</div><div class="line">        zMin = min(pixels);</div><div class="line">        zMid = median(pixels);</div><div class="line">        z = pixels((len+<span class="number">1</span>)/<span class="number">2</span>); </div><div class="line">        A1 = zMid - zMin;</div><div class="line">        A2 = zMid - zMax;</div><div class="line">        <span class="keyword">if</span> A1&gt;<span class="number">0</span> &amp;&amp; A2&lt;<span class="number">0</span></div><div class="line">            shouldBe = stageB(z,zMid,zMax,zMin);</div><div class="line">            imgPadded(<span class="built_in">i</span>,<span class="built_in">j</span>) = zMid;</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            kernelSize = kernelSize + <span class="number">2</span>;</div><div class="line">            <span class="keyword">if</span> kernelSize &gt; maxKernelSize</div><div class="line">                 imgPadded(<span class="built_in">i</span>,<span class="built_in">j</span>) = zMid;</div><div class="line">                 <span class="keyword">break</span>;</div><div class="line">            <span class="keyword">end</span></div><div class="line">        <span class="keyword">end</span></div><div class="line">    <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="params">[shouldBe]</span> = <span class="title">stageB</span><span class="params">(z,zMid,zMax,zMin)</span></span></div><div class="line"><span class="comment">%Stage B:</span></div><div class="line">    B1 = z-zMin;</div><div class="line">    B2 = z-zMax;</div><div class="line">    <span class="keyword">if</span> B1&gt;<span class="number">0</span> &amp;&amp; B2&lt;<span class="number">0</span></div><div class="line">        shouldBe = z;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        shouldBe = zMid;</div><div class="line">    <span class="keyword">end</span>   </div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>测试代码如下：</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><div class="line">clear all;</div><div class="line">close all;</div><div class="line">imgPath = <span class="string">'malight.bmp'</span>;</div><div class="line">imgSrc = imread(imgPath);</div><div class="line"><span class="comment">% 加入噪声</span></div><div class="line">imgNoised = imnoise(imgSrc,<span class="string">'salt &amp; pepper'</span>,<span class="number">0.02</span>);</div><div class="line">mKernelSize = <span class="number">3</span>;</div><div class="line">imgDst1 = medianFilter(imgNoised,mKernelSize);</div><div class="line">mKernelSize = <span class="number">5</span>;</div><div class="line">imgDst2 = medianFilter(imgNoised,mKernelSize);</div><div class="line">mkernelSize = <span class="number">3</span>;</div><div class="line">maxKernelSize = <span class="number">7</span>;</div><div class="line">tic</div><div class="line">imgDst3 =  adaptiveMedianFilter( imgSrc,mKernelSize, maxKernelSize);</div><div class="line">toc</div><div class="line"><span class="comment">% 显示实验结果</span></div><div class="line">figure(<span class="string">'NumberTitle'</span>, <span class="string">'off'</span>, <span class="string">'Name'</span>, <span class="string">'中值滤波降噪'</span>);</div><div class="line">subplot(<span class="number">221</span>);</div><div class="line">imshow(imgSrc);</div><div class="line">title(<span class="string">'原图像'</span>);</div><div class="line">subplot(<span class="number">222</span>);</div><div class="line">imshow(imgNoised,[]);</div><div class="line">title(<span class="string">'噪声图像'</span>);</div><div class="line">subplot(<span class="number">223</span>);</div><div class="line">imshow(imgDst1,[]);</div><div class="line">title(<span class="string">'卷积核大小为 3 的中值滤波'</span>);</div><div class="line">subplot(<span class="number">224</span>);</div><div class="line">imshow(imgDst3,[]);</div><div class="line">title(<span class="string">'最大卷积核为 7 的自适应中值滤波'</span>);</div></pre></td></tr></table></figure>
<p>执行效果：</p>
<p><img src="http://7pulhb.com1.z0.glb.clouddn.com/ip - 自适应中值滤波. jpg" alt="自适应中值滤波与一般中值滤波效果对比"></p>
<p>令人遗憾的是，虽然自适应中值滤波会带来更好的降噪效果，但是也会带来更长的时间开销，处理一张 256*256 大小的灰度图耗时达到了 240~250 秒左右(这有很大一部分原因是我的算法尚未优化所导致的)。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在之前的图像降噪试验中，采取了一般的中值滤波方法，即选定窗口内的中间大小值作为输出像素的值，这在大部分情况都能反映窗口区域内像素的灰度情况。但是考虑到一种情况，假若窗口内分布着大量噪点，则选取的中值就有可能是噪声的灰度。为了避免这种情况，将在中值滤波过程中考虑对中值的判断及
    
    </summary>
    
      <category term="数字图像处理" scheme="http://yoyoyohamapi.me/categories/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    
      <category term="数字图像处理" scheme="http://yoyoyohamapi.me/tags/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>数字图像处理（14）-- 颜色知识 (1)：CIE 色度图</title>
    <link href="http://yoyoyohamapi.me/2017/03/08/Image_Processing/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%8814%EF%BC%89--%20%E9%A2%9C%E8%89%B2%E7%9F%A5%E8%AF%86(1)%EF%BC%9ACIE%E8%89%B2%E5%BA%A6%E5%9B%BE/"/>
    <id>http://yoyoyohamapi.me/2017/03/08/Image_Processing/数字图像处理（14）-- 颜色知识(1)：CIE色度图/</id>
    <published>2017-03-08T02:17:57.000Z</published>
    <updated>2017-03-08T02:17:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>CIE（国际照明委员会）色度图：</p>
<p><img src="http://7pulhb.com1.z0.glb.clouddn.com/ip - 色度图. jpg" alt="色度图 1"></p>
<p><img src="http://7pulhb.com1.z0.glb.clouddn.com/ip - 色度图 2.jpg" alt="色度图 2"></p>
<p>明度、色调和饱和度称为颜色视觉三特性。 明度就是明亮的程度； 色调是由波长决定的色别，如 700nm 光的色调是红色，579nm 光的色调是黄色，510nm 光的色调是绿色等等； 饱和度就是纯度，没有混入白色的窄带单色，在视觉上就是高饱和度的颜色。光谱所有的光都是最纯的颜色光，加入白色越多，混合后的颜色就越不纯，看起来也就越不饱和。</p>
<p>$(Color)=R(R)+G(G)+B(B)$ 式中，$(C)$ 代表某一种颜色，$(R)、$(G)$、$(B)$ 是红、绿、蓝三基色，$R$、$G$、$B$ 是每种颜色的比例系数，它们的和等于 $1$，即 $R+G+B=1$，“C” 是指匹配即在视觉上颜色相同，如某一蓝绿色可以表达为： </p>
<p>$(C)=0.06(R)+0.31(G)+0.63(B)$</p>
<p>关于色度图的解释如下：</p>
<p>色度图的边缘称为光谱轨迹，其中 590nm 这些数字代表波长。</p>
<p>横轴表示红基色的比例，纵轴表示绿基色的比例，当中没有专门的第三轴来表示兰基色的比例，因为兰基色的比例可由 R+B+R=1 推知。</p>
<p>设色度图上有一颜色 S，由 C 通过 S 画一直线至光谱轨迹 O 点（590nm），S 颜色的主波长即为 590nm，此处光谱的颜色即 S 的色调（橙色）。某一颜色离开 C 点至光谱轨迹的距离表明它的色纯度，即饱和度。颜色越靠近 C 越不纯，越靠近光谱轨迹越纯。S 点位于从 C 到 590nm 光谱轨迹的 45% 处，所以它的色纯度为 45%（色纯度 %=（CS/CO）×100。从光谱轨迹的任一点通过 C 画一直线抵达对侧光谱轨迹的一点，这条直线两端的颜色互为补色（虚线）。从紫红色段的任一点通过 C 点画一直线抵达对侧光谱轨迹的一点，这个非光谱色就用该光谱颜色的补色来表示。表示方法是在非光谱色的补色的波长后面加一 C 字，如 536G，这一紫红色是 536nm 绿色的补色。 CIE1931 色度图有很大的实用价值，任何颜色，不管是光源色还是表面色，都可以在这个色度图上标定出来，这就使颜色的描述简便而准确了。例如为了保证颜色标志的正确辨认和交通安全的管制，在 CIE1931 色度图上规定了具体的范围，它适用于各种警告信号和颜色标志的编码。再如在 CIE1931 色度图上，可推出由两种颜色相混合所得出的各种中间色。如 Q 和 S 相加，得出 Q 到 S 直线的各种中间颜色，如 T 点，由 C 通过 T 抵达 552nm 的光谱色，可由 552nm 的波长颜色看出 T 的色调，并可由 T 在 C 与 552nm 光谱色之间所占位置看出它的纯度。 在实际应用中，如彩色电视、彩色摄影（乳胶处理）或其它颜色复现系统都需要选择适当的红（R）、绿（G）、蓝（B）三基色，用来复现白色和各种颜色，所选定的（R）、（G）、（B）在色度图上的位置形成一个三角形。应使（R）、（G）、（B）三角形尽量能包括较大面积，同时（R）、（G）、（B）线应尽量靠近光谱轨迹，以复现比较饱和的红、绿、蓝等颜色。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CIE（国际照明委员会）色度图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7pulhb.com1.z0.glb.clouddn.com/ip - 色度图. jpg&quot; alt=&quot;色度图 1&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7pulhb.com1.z
    
    </summary>
    
      <category term="数字图像处理" scheme="http://yoyoyohamapi.me/categories/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    
      <category term="数字图像处理" scheme="http://yoyoyohamapi.me/tags/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>数字图像处理（13）-- 图像修复及重建 (2)：关于降质函数的探讨</title>
    <link href="http://yoyoyohamapi.me/2017/03/08/Image_Processing/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%8813%EF%BC%89--%20%E5%9B%BE%E5%83%8F%E4%BF%AE%E5%A4%8D%E5%8F%8A%E9%87%8D%E5%BB%BA(2)%EF%BC%9A%E5%85%B3%E4%BA%8E%E9%99%8D%E8%B4%A8%E5%87%BD%E6%95%B0%E7%9A%84%E6%8E%A2%E8%AE%A8/"/>
    <id>http://yoyoyohamapi.me/2017/03/08/Image_Processing/数字图像处理（13）-- 图像修复及重建(2)：关于降质函数的探讨/</id>
    <published>2017-03-08T02:17:57.000Z</published>
    <updated>2017-03-08T02:17:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>在上一章中，我们着重讨论了图像受噪声污染而引起的质量下降，本章，将考虑原图像受某个降质函数的影响而引起的图像质量下降。</p>
<p>其频率域的降质模型为：</p>
<span>$$G(u,v)=F(u,v)H(u,v)+N(u,v)$$</span><!-- Has MathJax -->
<p>其中：$G(u,v)$ 为质量下降后的图像的傅里叶变换,$H(u,v)$ 为降质函数的傅里叶变换,$F(u,v)$ 为原图像的傅里叶变换,$N(u,v)$ 为噪声图像的傅里叶变换。</p>
<p>##1. 逆滤波（Inverse Filtering）<br>这是一种概念上最为简单的图像修复方式，即我们考虑修复后的图像为：</p>
<span>$$\widehat{F}(u,v)=\frac{G(u,v)}{H(u,v)}$$</span><!-- Has MathJax -->
<p>亦即：</p>
<span>$$\widehat{F}(u,v)=F(u,v)+\frac{N(u,v)}{H(u,v)}$$</span><!-- Has MathJax -->
<p> 从上式不难看出，即便我们知道了降质函数 H，假如噪声 N 未知，我们仍然无法估计出修复后的图像，并且，若 H 在某一点取很小的值，也会导致整个式子无意义（因为此时 $\frac{N(u,v)}{H(u,v)}$ 将无限大，即原图像被无限忽视）。故而在实际应用中，我们考虑截断 H 中较小的值，即截断 H 的频谱图中远离中心位置的分量。</p>
<p>##2. 维纳滤波（Wiener Filtering）<br>维纳滤波也称为最小均方差滤波（Minimum Mean Square Error Filtering），最小均方差滤波的目标是要找到一个原图像的估计 $\hat{f}$ 与原图像 f 的最小误差，其中，误差的定义式如下：</p>
<span>$$e^2=E{(f-\hat{f})^2}$$</span><!-- Has MathJax -->
<p>其中，E 是期望。</p>
<p>现在，假定：</p>
<p>图像，噪声相互独立<br>图像或者噪声其一有 0 均值<br>$\hat{f}$ 的灰度是关于 f 灰度的线性函数<br>由以上假定，可以由如下式子保证 $\hat{f}$ 与 f 之间的误差最小;</p>
<span>$$$\widehat{F}(u,v)=[\frac{1}{H(u,v)}\frac{|H(u,v)|^2}{|H(u,v)|^2+S_\eta(u,v)/S_f(u,v)}]G(u,v)$$</span><!-- Has MathJax -->
<p> 其中，$S_\eta(u,v)=|N(u,v)|^2$ 即噪声的功率谱，$S_f(u,v)=|F(u,v)|^2$ 即未退化的图像的功率谱。</p>
<p>值得注意的时，若 $|N(u,v)|^2$ 为零，则维纳滤波退化成了逆滤波。同时，当我们处理白噪声是，$|N(u,v)|^2$ 通常是一个常数，这就大大简化了处理难度，但是，$|F(u,v)|^2$ 仍然未知，通常，我们选择用一个常数 K 来近似 $\frac{S_\eta(u,v)}{S_f(u,v)}$, 得到了如下维纳滤波表达式：</p>
<span>$$\widehat{F}(u,v)=[\frac{1}{H(u,v)}\frac{|H(u,v)|^2}{|H(u,v)|^2+K}]G(u,v)$$</span><!-- Has MathJax -->
<p>##3. 图像质量的度量标准;</p>
<h3 id="信噪比-SNR（signal-to-noise-ratio）"><a href="#信噪比-SNR（signal-to-noise-ratio）" class="headerlink" title="信噪比 SNR（signal-to-noise-ratio）"></a>信噪比 SNR（signal-to-noise-ratio）</h3><span>$$SNR=\frac{\sum\limits_{u=0}^{M-1}\sum\limits_{v=0}^{N-1}|F(u,v)|^2}{\sum\limits_{u=0}^{M-1}\sum\limits_{v=0}^{N-1}|(u,v)|^2}$$</span><!-- Has MathJax -->
<p>该标准是通过原图像与附加噪声间的比例关系来衡量图像质量，显然，该值越大，图像质量越高。</p>
<h3 id="均方差-MSE（mean-square-error）"><a href="#均方差-MSE（mean-square-error）" class="headerlink" title="均方差 MSE（mean square error）"></a>均方差 MSE（mean square error）</h3><span>$$MSE=\frac{1}{MN}\sum\limits_{x=0}^{M-1}\sum\limits_{y=0}^{N-1}[f(x,y)-\hat{f}(x,y)]^2$$</span><!-- Has MathJax -->
<p>该标准是通过比较估计图像与原图像间的差异来衡量图像修复情况的。值越小，修复越成功。</p>
<h3 id="空间域的信噪比-SNR"><a href="#空间域的信噪比-SNR" class="headerlink" title="空间域的信噪比 SNR"></a>空间域的信噪比 SNR</h3><span>$$SNR=\frac{\sum\limits_{x=0}^{M-1}\sum\limits_{y=0}^{N-1}\hat{f}(x,y)^2}{\sum\limits_{x=0}^{M-1}\sum\limits_{y=0}^{N-1}[f(x,y)-\hat{f}(x,y)]^2}$$</span><!-- Has MathJax -->
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在上一章中，我们着重讨论了图像受噪声污染而引起的质量下降，本章，将考虑原图像受某个降质函数的影响而引起的图像质量下降。&lt;/p&gt;
&lt;p&gt;其频率域的降质模型为：&lt;/p&gt;
&lt;span&gt;$$G(u,v)=F(u,v)H(u,v)+N(u,v)$$&lt;/span&gt;&lt;!-- Has Ma
    
    </summary>
    
      <category term="数字图像处理" scheme="http://yoyoyohamapi.me/categories/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    
      <category term="数字图像处理" scheme="http://yoyoyohamapi.me/tags/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>数字图像处理（16）-- 颜色知识 (3)：伪彩色图像处理</title>
    <link href="http://yoyoyohamapi.me/2017/03/08/Image_Processing/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%8816%EF%BC%89--%20%E9%A2%9C%E8%89%B2%E7%9F%A5%E8%AF%86(3)%EF%BC%9A%E4%BC%AA%E5%BD%A9%E8%89%B2%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    <id>http://yoyoyohamapi.me/2017/03/08/Image_Processing/数字图像处理（16）-- 颜色知识(3)：伪彩色图像处理/</id>
    <published>2017-03-08T02:17:57.000Z</published>
    <updated>2017-03-08T02:17:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>伪彩色图像处理，顾名思义，其操作对象并非彩色图像，而是一般的灰度图像，伪彩色图像处理即将一般的灰度图像转换为彩色图像。</p>
<h2 id="灰度切割："><a href="#灰度切割：" class="headerlink" title="灰度切割："></a>灰度切割：</h2><p>那么如何将一般的灰度转换为彩色呢？我们首先会想到人工赋予每个灰度或者每个灰度级一个彩色值，这便是灰度切割，或者说是强度切割。</p>
<p><img src="http://7pulhb.com1.z0.glb.clouddn.com/ip - 灰度切割. png" alt="灰度切割"></p>
<h2 id="变换函数："><a href="#变换函数：" class="headerlink" title="变换函数："></a>变换函数：</h2><p>该方法将原始灰度通过变换函数形成彩色向量，如下图所示：</p>
<p><img src="http://7pulhb.com1.z0.glb.clouddn.com/ip - 变换函数. png" alt="变换函数"></p>
<p>伪彩色处理的目的还是在于通过更醒目的颜色突出原图像某些区域。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;伪彩色图像处理，顾名思义，其操作对象并非彩色图像，而是一般的灰度图像，伪彩色图像处理即将一般的灰度图像转换为彩色图像。&lt;/p&gt;
&lt;h2 id=&quot;灰度切割：&quot;&gt;&lt;a href=&quot;#灰度切割：&quot; class=&quot;headerlink&quot; title=&quot;灰度切割：&quot;&gt;&lt;/a&gt;灰度切割
    
    </summary>
    
      <category term="数字图像处理" scheme="http://yoyoyohamapi.me/categories/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    
      <category term="数字图像处理" scheme="http://yoyoyohamapi.me/tags/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>数字图像处理（15）-- 颜色知识 (2)：颜色模型</title>
    <link href="http://yoyoyohamapi.me/2017/03/08/Image_Processing/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%8815%EF%BC%89--%20%E9%A2%9C%E8%89%B2%E7%9F%A5%E8%AF%86(2)%EF%BC%9A%E9%A2%9C%E8%89%B2%E6%A8%A1%E5%9E%8B/"/>
    <id>http://yoyoyohamapi.me/2017/03/08/Image_Processing/数字图像处理（15）-- 颜色知识(2)：颜色模型/</id>
    <published>2017-03-08T02:17:57.000Z</published>
    <updated>2017-03-08T02:17:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>###RGB 颜色模型：<br>该模型使用红绿蓝三基色构成的三维向量来表示某一颜色，这种表示所具有的颜色语义是相当清楚的，然而并不能很好地适应人的视觉特点也不利于印刷。</p>
<p><img src="http://7pulhb.com1.z0.glb.clouddn.com/ip-RGB 颜色模型. jpg" alt="RGB 颜色模型"></p>
<p>在 RGB 颜色模型的三维空间中，可以看到，立方体的对角线恰好是灰度。</p>
<p>同时，有如下几个概念需要明确：</p>
<p><strong>色深 (depth)</strong>：是用 bit 数来表示数码影像色彩数目的单位。例如（23，127，240）就是 24 位色深（8bit * 3），那么总的颜色数就为 224≈16,777,216 ，即 24 位色深能够表达约 1600 万种颜色，这十分接近人能够分辨的色彩范围。</p>
<p><strong>安全色</strong>：不同的平台（Mac、PC 等）有不同的调色板，不同的浏览器也有自己的调色板。这就意味着对于一幅图，显示在 Mac 上的 Web 浏览器中的图像，与它在 PC 上相同浏览器中显示的效果可能差别很大。为了解决各平台调色板的差异，就有了 web 安全色的概念。在该模型中，用相应的 16 制进制值 00、33、66、99、CC 和 FF 的组合（可重复选取）来表达颜色，这也就意味着，web 安全色共有 6<em>6</em>6=216 种。</p>
<p><img src="http://7pulhb.com1.z0.glb.clouddn.com/ip-web 安全色. jpg" alt="web 安全色"></p>
<p>##CMY 及 CMYK 颜色模型：<br>CMYK 也称作印刷色彩模式，是一种依靠反光的色彩模式，和 RGB 类似，CMY 是 3 种印刷油墨名称的首字母：青色 Cyan、品红色 Magenta、黄色 Yellow。其中 K 是源自一种只使用黑墨的印刷版 Key Plate。从理论上来说，只需要 CMY 三种油墨就足够了，它们三个加在一起就应该得到黑色。但是由于目前制造工艺还不能造出高纯度的油墨，CMY 相加的结果实际是一种暗红色。</p>
<p><img src="http://7pulhb.com1.z0.glb.clouddn.com/ip-CMYK.jpg" alt="CMYK"></p>
<p>##HSI 颜色模型：</p>
<p><strong>色调 H(Hue)</strong>： 与光波的波长有关，它表示人的感官对不同颜色的感受，如红色、绿色、蓝色等，它也可表示一定范围的颜色，如暖色、冷色等。<br>饱和度 S(Saturation)： 表示颜色的纯度，纯光谱色是完全饱和的，加入白光会稀释饱和度。饱和度越大，颜色看起来就会越鲜艳，反之亦然。</p>
<p><strong>强度 I(Intensity)</strong>： 对应成像亮度和图像灰度，是颜色的明亮程度。<br>HSI 模型的建立基于两个重要的事实： ① I 分量与图像的彩色信息无关；② H 和 S 分量与人感受颜色的方式是紧密相联的。这些特点使得 HSI 模型非常适合彩色特性检测与分析。<br>HSI 最大的优势就是分离了‘灰度’与颜色信息，这样，一般的会读操作就可以对 HSI 图像直接应用。</p>
<p>##Lab 颜色模型：</p>
<p>Lab 颜色空间中的 L 分量用于表示像素的亮度，取值范围是 [0,100], 表示从纯黑到纯白；a 表示从红色到绿色的范围，取值范围是 [127,-128]；b 表示从黄色到蓝色的范围，取值范围是 [127,-128]。<br>不难看出，Lab 颜色空间同样很好的分离了颜色和亮度信息，并且 a,b 分别都是表示颜色间的渐变程度，而非颜色自己本身，这样做的好处据说是更加利于人的视觉特性。</p>
<p>Lab 颜色空间有如下优势：</p>
<ul>
<li><p>基于生理特征描述人类对于颜色的感觉。</p>
</li>
<li><p>设备独立，也就是说适用于显示设别，印刷设备乃至输入设备。</p>
</li>
</ul>
<p>在数字图像处理中，Lab 颜色模型有利于：</p>
<ul>
<li><p>色调及对比度的编辑。</p>
</li>
<li><p>图像压缩。</p>
</li>
</ul>
<p>在 PhotoShop 中，图像编辑所采用的颜色模型正是 Lab 颜色模型。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;###RGB 颜色模型：&lt;br&gt;该模型使用红绿蓝三基色构成的三维向量来表示某一颜色，这种表示所具有的颜色语义是相当清楚的，然而并不能很好地适应人的视觉特点也不利于印刷。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7pulhb.com1.z0.glb.clouddn.c
    
    </summary>
    
      <category term="数字图像处理" scheme="http://yoyoyohamapi.me/categories/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    
      <category term="数字图像处理" scheme="http://yoyoyohamapi.me/tags/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>利用 Sails.js+MongoDB 开发博客系统 (1)-- 创建项目</title>
    <link href="http://yoyoyohamapi.me/2017/03/08/Sails_Tutorial/%E5%88%A9%E7%94%A8sails.js+mongodb%E5%BC%80%E5%8F%91%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F(1)--%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE/"/>
    <id>http://yoyoyohamapi.me/2017/03/08/Sails_Tutorial/利用sails.js+mongodb开发博客系统(1)--创建项目/</id>
    <published>2017-03-08T02:17:57.000Z</published>
    <updated>2017-03-08T02:17:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Sails-js-简介"><a href="#Sails-js-简介" class="headerlink" title="Sails.js 简介"></a>Sails.js 简介</h2><p>Sails 是构建于 <a href="http://expressjs.com/" target="_blank" rel="external">Express</a> 之上的一个实时 Node MVC 框架，其整个风格来源于<a href="http://rubyonrails.org/" target="_blank" rel="external">Ruby on Rails</a>, 包括提供了类似于 Rails 的脚手架功能，同时又吸纳了不少现代 web app 工具和功能，比如 grunt 和 websocket 等。</p>
<p>显然，Sails 的最佳应用场景会是一些实时性较强的场景，比如聊天室，游戏等，但是官方也笃定的认为 sails 适用于任何 web app 的开发。对于 web 之前我已经使用过了的 php 的 symfony2 和 ruby 的 rails，但在学习了 Nodejs 之后，我需要一个 node 的框架进行项目实战，因此，我充满感性的因为那只小章鱼和官网健全的文档选择了 sails，这一点都不机智。</p>
<p>本教程（也可以说是开发日志）将帮助各位开发一个基本的个人技术博客站点，旨在让大家熟悉 sails 的开发流程，并且在好好的串联一下有关 js，有关前端，有关 mongo 的相关知识，真正要搭建一个健壮的博客系统，教程上的内容还远远不够，需要各位自己努力。</p>
<p><a href="https://github.com/yoyoyohamapi/blog" target="_blank" rel="external">项目 demo 的源码</a>已经托管到了 github，方便各位在遇到困惑的时候进行查阅。</p>
<p><img src="http://www.sailsjs.org/images/bkgd_squiddy.png" alt="sails"></p>
<h2 id="前驱知识"><a href="#前驱知识" class="headerlink" title="前驱知识"></a>前驱知识</h2><p>在完成博客系统搭建前，你需要去认识或者学习以下罗列出的几门知识，个人认为，每次新技能 get 是会带来如同网游中技能树成长的快感的。</p>
<ul>
<li><p><a href="https://nodejs.org/" target="_blank" rel="external"><strong>Node.js</strong></a>:</p>
<p>  要注意，Node 并非 javascript 一个框架，相比框架，Node 更加底层。其实 Node.js 归为前驱知识也并不必要，因为大部分想要利用 Sails 来构建博客系统的读者在之前已经对 Node.js 有所接触了。</p>
<p>  教程：任何工程技术最好的教学资料一定是官方文档(理由不是官方文档写的多么精彩，而是足够时效)，除了官方文档外，我的 Node 启蒙还有<a href="http://item.jd.com/11457487.html" target="_blank" rel="external">《Node.js 实战》</a>。</p>
</li>
</ul>
<ul>
<li><p><a href="http://gruntjs.com/" target="_blank" rel="external"><strong>Grunt（智慧野猪）</strong></a>:</p>
<p>  一个前端自动化构建工具，从现在开始，应当把以前你那混乱不堪，毫无优化的前端代码扔到历史的垃圾桶了，我们需要<strong>Grunt</strong>让我们的前端更加智慧。Grunt 本意是 “咕噜声”, 官方也是贴切的采用了野猪作为其 Logo，猪是一种大智若愚的动物，而<strong>Grunt</strong>“愚 “在一定学习成本，配置撰写，“智” 在撰写完成后行云流水的自动化构建体验。</p>
</li>
<li><p><a href="http://bower.io/" target="_blank" rel="external"><strong>Bower（美丽园丁鸟）</strong></a>:</p>
<p>  <strong>Bower</strong>是一个前端插件管理器，类似于 PHP 的<a href=""><strong>composer</strong></a>,<strong>bower</strong>能够帮助开发者脱离手动下载包，手动管理包的依赖关系等等繁重业务劳动。BTW, 似乎前端这个技术的 Logo（看见小鸟嘴上衔着的叶纸了吗，是不是就是那片璀璨的 jquery 哇）总是设计精良，名字也是诗意盎然（勤劳如园丁鸟，衔取树枝木条，造就景观大厦），相比之下，<strong>composer</strong>那残念的指挥家简直不能看。</p>
</li>
</ul>
<p>对于<strong>Grunt</strong>和<strong>Bower</strong>的学习，除了官方资料外，<a href="https://github.com/materliu" target="_blank" rel="external">materliu</a>的 <a href="http://www.imooc.com/learn/30" target="_blank" rel="external">视频教程</a> 十分推荐，PPT 制作精良，讲解也充满文艺气息，风格非常对我胃口。</p>
<ul>
<li><p><a href="http://sass-lang.com/" target="_blank" rel="external"><strong>Sass</strong></a> &amp; <a href="http://compass-style.org/" target="_blank" rel="external"><strong>Compass</strong></a>:</p>
<p>  <strong>Sass</strong>能够程序化我们的 css，提高了我们 css 代码的重用性，而<strong>Compass</strong>则又让 Sass 变得无比强大。借助于<strong>Compass</strong>，我们现在甚至都只用一句话就能写出一个健壮的 box shadow，而不用在充满疲惫地去为该属性添加一个个内核前缀。</p>
</li>
<li><p><a href="http://requirejs.org/" target="_blank" rel="external"><strong>RequireJS</strong></a>: 其实我是国内 <a href="">Seajs</a> 的忠实拥趸，但是考虑到更好的兼容性，前端模块化开发这次选择了<strong>RequireJS</strong>，如果你曾经接触过<strong>Seajs</strong>，那么学习<strong>RequireJS</strong>并不是难事。</p>
</li>
</ul>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="基础设施"><a href="#基础设施" class="headerlink" title="基础设施"></a>基础设施</h3><ol>
<li>node 环境搭建：<a href="https://github.com/joyent/node/wiki/Installing-Node.js-via-package-manager" target="_blank" rel="external">戳我</a></li>
<li>ruby 环境搭建：<a href="https://www.ruby-lang.org/en/documentation/" target="_blank" rel="external">戳我</a></li>
<li>mongodb 安装：<a href="https://www.mongodb.org/downloads" target="_blank" rel="external">戳我</a></li>
</ol>
<hr>
<h3 id="编辑器-or-IDE"><a href="#编辑器-or-IDE" class="headerlink" title="编辑器 or IDE"></a>编辑器 or IDE</h3><p>如果是想用编辑器开发，<a href="http://www.sublimetext.com/" target="_blank" rel="external">sublime</a>依旧会是首选，git 官方出品的 <a href="https://atom.io/" target="_blank" rel="external">Atom</a> 目前也发布了 1.0 稳定版，大家可以尝鲜。如果是 IDE，作为 jetbrain 家的铁粉，会强烈推荐<a href="https://www.jetbrains.com/webstorm/" target="_blank" rel="external">webstorm</a>，各种愉悦，爽快加轻松不一一列举辣。</p>
<hr>
<h2 id="项目创建"><a href="#项目创建" class="headerlink" title="项目创建"></a>项目创建</h2><h3 id="安装-sails"><a href="#安装-sails" class="headerlink" title="安装 sails"></a>安装 sails</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sudo npm -g install sails</div></pre></td></tr></table></figure>
<h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sails new blog</div></pre></td></tr></table></figure>
<p>如此这般，我们就在当前目录下创建了一个 sails 项目（如果你知道<a href="http://yeoman.io/" target="_blank" rel="external">Yeoman</a>, 那也不建议用<strong>Yeaman</strong>来创建项目，上面 sails 的相关构建器（generator）已经许久没有更新了）。</p>
<h2 id="目录结构："><a href="#目录结构：" class="headerlink" title="目录结构："></a>目录结构：</h2><p><img src="http://7pulhb.com1.z0.glb.clouddn.com/sails - 目录结构. png" alt="sails 目录结构"></p>
<p>__blog</p>
<p>..<strong>api</strong>: 存放业务逻辑，数据模型，安全策略等</p>
<p>..<strong>assets</strong>: 用过 web 开发框架应该对此很熟悉，就是存放图像，js，css 等静态资源的目录，值得一提的是，sails 项目运行起来后，静态资源会被 grunt 中配置的响应任务压缩并转移到. tmp 文件下，即网站上对这些资源的寻址实际也是定位到. tmp 下，这样做有两个好处：</p>
<pre><code>1. 压缩的资源能够提高网页的加载和访问效率。
2. 保留了源文件，便于开发者调试和修改。
</code></pre><p>..<strong>config</strong>: 配置文件存放目录</p>
<p>..<strong>node_modules</strong>: node 包存放目录</p>
<p>..<strong>tasks</strong>: grunt 任务存放目录, 我们可以将自己撰写的 grunt 任务放到<strong>tasks/config</strong>目录下，然后在<strong>tasks/register</strong>注册任务，就能够通过 grunt 执行我们的构建过程了。</p>
<p>..<strong>views</strong>: 视图存放目录</p>
<hr>
<h2 id="Grunt-Tasks-说明"><a href="#Grunt-Tasks-说明" class="headerlink" title="Grunt Tasks 说明"></a>Grunt Tasks 说明</h2><p><img src="http://7pulhb.com1.z0.glb.clouddn.com/sails-grunt_tasks.png" alt="grunt task"></p>
<p>###tasks/config / 下配置任务说明</p>
<ul>
<li><strong>clean.js</strong>: </li>
</ul>
<p><strong>dev</strong>模式下，清除<strong>.tmp</strong>目录下文件，亦即给项目一个干净的启动状态。<strong>build</strong>模式下，清除<strong>www</strong>目录。</p>
<ul>
<li><strong>coffee.js</strong>: </li>
</ul>
<p>将<strong>assets/js</strong>下的 js 文件转化成 CoffeScript 并输出至<strong>.tmp/public</strong>目录。</p>
<ul>
<li><strong>concat.js</strong>: </li>
</ul>
<p>文件合并，将已经注入到页面的各个 js 及各个 css 文件合并，并输出至<strong>.tmp/public</strong>目录。</p>
<ul>
<li><strong>copy.js</strong>: </li>
</ul>
<p>文件复制，<strong>dev</strong>模式下，将<strong>assets</strong>下的资源复制到<strong>.tmp/public 目录</strong>。<strong>build</strong>模式下，将<strong>.tmp/public</strong>目录下文件复制到<strong>www</strong>目录下。</p>
<ul>
<li><strong>cssmin.js</strong>:</li>
</ul>
<p>将<strong>concat.js</strong>合并好的 css 文件压缩。</p>
<ul>
<li><strong>jst.js</strong>: </li>
</ul>
<p>预编译模板（模板引擎为 jst）。</p>
<ul>
<li><strong>less.js</strong>: </li>
</ul>
<p>因为我们用了 sass，所以不再考虑用 less。</p>
<ul>
<li><strong>sails-linker.js</strong>: </li>
</ul>
<p>sails 链接器，当你在 html 文件中插入</p>
<p><img src="http://7pulhb.com1.z0.glb.clouddn.com/sails-sails_linkers.png" alt="sails_linker"></p>
<p>等代码包裹块后，该任务能够自动注入在<strong>pipeline.js</strong>中设置好的 js 文件，css 文件的注入也类似。注入后的文件输出至<strong>.tmp/public</strong>目录及<strong>views</strong>目录。</p>
<ul>
<li><strong>sync.js</strong>: </li>
</ul>
<p>同步两个目录，这里同步的是<strong>assets</strong>目录和. tmp/public，该任务和<strong>copy.js</strong>任务非常类似，不同的是，同步仅发生在文件改变时。</p>
<ul>
<li><strong>uglify.js</strong>: </li>
</ul>
<p>这个大家不会陌生，用来压缩 js 文件的，这里的压缩对象是<strong>concat.js</strong>合并好的 js 文件。</p>
<ul>
<li><strong>watch.js</strong>: </li>
</ul>
<p>文件监听，当文件改变时触发相应地任务，如在 sails 中，<strong>aseests</strong>等目录下的文件变化时，会触发 [<strong>syncAssets</strong> , <strong>linkAssets</strong>] 这一任务流，该任务流中的这两个任务会在之后介绍。</p>
<h3 id="tasks-register-下注册的任务流说明"><a href="#tasks-register-下注册的任务流说明" class="headerlink" title="tasks/register / 下注册的任务流说明"></a>tasks/register / 下注册的任务流说明</h3><ul>
<li><strong>compileAssets.js</strong>:</li>
</ul>
<p>顾名思义, 该任务旨在编译<strong>assets</strong>目录下文件，该任务流的任务执行过程为:</p>
<p>clean:dev –》 jst:dev –》  less:dev –》 copy:dev –》 coffee:dev</p>
<p>亦即：缓存清除 –》编译 jst 至<strong>.tmp/public</strong> –》编译 less 至<strong>.tmp/publc</strong> –》剩余文件 (字体，图片等) 拷贝至<strong>.tmp/public</strong> –》js 转换成 coffeescript2 至<strong>.tmp/public</strong></p>
<ul>
<li><strong>linkAssetsXXXX.js</strong>:</li>
</ul>
<p>利用<strong>sails-linker</strong>, 完成一系列的注入操作</p>
<ul>
<li><strong>syncAssets.js</strong>:</li>
</ul>
<p>同步<strong>assets/</strong>目录下文件的任务流，其过程为：</p>
<p>jst:dev –》 less:dev –》 sync:dev –》coffee:dev</p>
<p>中文释义不再赘述。</p>
<ul>
<li><strong>default.js</strong>:</li>
</ul>
<p>该任务流会在 grunt 命令后不接任何参数时执行，其任务过程为：</p>
<p>compileAssets –》 linkAssets –》 watch，即编译，链接，运行时监听（这个工作过程学过<strong>操作系统</strong>的同学不会陌生）</p>
<ul>
<li><strong>build.js</strong>:</li>
</ul>
<p>构建任务流，因为这只是完成构建任务，故而其任务过程相比较<strong>default.js</strong>, 不再监听文件改动，而是在任务流末尾执行 clean，copy 等任务打扫下战场。</p>
<ul>
<li><strong>buildProd.js</strong>:</li>
</ul>
<p>只是在产品环境（production）下的构建过程，相比较于<strong>build.js</strong>，会执行一些文件合并及压缩工作来提高页面访问体验和效率。</p>
<hr>
<h2 id="扬帆起航（Sails-lift）"><a href="#扬帆起航（Sails-lift）" class="headerlink" title="扬帆起航（Sails lift）"></a>扬帆起航（Sails lift）</h2><p>OK，现在我们可以启动项目了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">sails lift</div></pre></td></tr></table></figure>
<p>不带参数 lift 过程默认会执行的 grunt 任务流为<strong>default.js</strong>。(lift 的详细参数使用说明可以通过 <code>sails lift -h</code> 查看)<br>接下来在浏览器输入 <a href="http://localhost:1337，你应该能够看到如下页面：" target="_blank" rel="external">http://localhost:1337，你应该能够看到如下页面：</a><br><img src="http://7pulhb.com1.z0.glb.clouddn.com/sails-sais_lift.png" alt="sais lift"></p>
<hr>
<h2 id="章节预告"><a href="#章节预告" class="headerlink" title="章节预告"></a>章节预告</h2><p>在下一章当中，我们不会立即开始博客系统开发，而是先对 sails 再进行一定的配置和改造，使其能够更加方便我们的代码编写。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Sails-js-简介&quot;&gt;&lt;a href=&quot;#Sails-js-简介&quot; class=&quot;headerlink&quot; title=&quot;Sails.js 简介&quot;&gt;&lt;/a&gt;Sails.js 简介&lt;/h2&gt;&lt;p&gt;Sails 是构建于 &lt;a href=&quot;http://express
    
    </summary>
    
      <category term="利用Sails.js+MongoDB开发博客系统" scheme="http://yoyoyohamapi.me/categories/%E5%88%A9%E7%94%A8Sails-js-MongoDB%E5%BC%80%E5%8F%91%E5%8D%9A%E5%AE%A2%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="sails,mongodb,nodejs" scheme="http://yoyoyohamapi.me/tags/sails-mongodb-nodejs/"/>
    
  </entry>
  
  <entry>
    <title>数字图像处理（18）-- 颜色知识 (5)：图像金字塔</title>
    <link href="http://yoyoyohamapi.me/2017/03/08/Image_Processing/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%8818%EF%BC%89--%20%E9%A2%9C%E8%89%B2%E7%9F%A5%E8%AF%86(5)%EF%BC%9A%E5%9B%BE%E5%83%8F%E9%87%91%E5%AD%97%E5%A1%94/"/>
    <id>http://yoyoyohamapi.me/2017/03/08/Image_Processing/数字图像处理（18）-- 颜色知识(5)：图像金字塔/</id>
    <published>2017-03-08T02:17:57.000Z</published>
    <updated>2017-03-08T02:17:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>为什么我们需要处理不同分辨率下的图像，这还是因为分辨率直接关系到我们对于图像上目标的识别，例如，一些极为细致的景物我们就需要在高分表率下观察，否则在高分辨率下的一坨鼻屎在低分辨率下可能就会糊成一滩雀斑。但这也不能否定掉低分辨率的作用，比如广袤的原野，无论在高分辨率下还是低分辨率下，它都是原野，那么，小体积，少信息量的低分辨率图像更加利于加快我们的处理速度。</p>
<p>首先认识图像金字塔：<br>图像金字塔，堂堂五个字，能够反映其气节的还是金字塔三个字。金字塔是什么形状的？由下至上横截面积不断缩小直至近似为一个点，在图像金字塔中，金字塔是一副图像对应的不同分辨率图像的集合，金字塔每层的横截面就是该图像对应的某个分辨率，通常金字塔底部为图像原始分辨率，由上至下每层分辨率缩小 2 倍，至金字塔塔尖，分辨率为 1x1，亦即缩小为一点。</p>
<p>图像金字塔主要分为<strong>近似金字塔(approximation pyramid)</strong>, 亦称为<strong>高斯金字塔</strong>，和<strong>预测残差金字塔(predication residual pyramid)</strong>，亦称<strong>拉普拉斯金字塔</strong>。</p>
<p>下图是二者的建立过程（插入滤波器的译法实在不好，应当是插值滤波器）：</p>
<p><img src="http://7pulhb.com1.z0.glb.clouddn.com/ip - 金字塔建立过程. jpg" alt="金字塔建立过程"></p>
<p>第 J 层的分辨率图像先与近似滤波器作用，完成向下 2 倍的采样，这样便得到了第 J-1 层的图像，分什么称之为近似图像，就是因为图像尽管变模糊了，但大致还是和 j 层输入图像类似。其实，金字塔向下 (向塔尖方向) 的过程就是 “近似” 过程。</p>
<p>该近似图像再通过插值滤波器向上进行 2 倍采样，得到了预测图像（向上，即向金字塔底部的过程就是对图像的预测，由近似图像预测原图像），原图像与预测图像做差就得到了预测残差图像。</p>
<p>在 opencv2 中，通过</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line">pyrDown()</div></pre></td></tr></table></figure>
<p>方法对图像进行向下采样，得到原图像的近似.</p>
<p>通过</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line">pyrUp()</div></pre></td></tr></table></figure>
<p>方法对近似图像进行向上采样，得到原图像的预测，在与原图像做差，获得残差图像。</p>
<p>范例及代码如下：</p>
<p>原图像</p>
<p><img src="http://7pulhb.com1.z0.glb.clouddn.com/ip - 金字塔_原图像. png" alt="原图像"></p>
<p>近似图像</p>
<p><img src="http://7pulhb.com1.z0.glb.clouddn.com/ip - 金字塔_近似图像. png" alt="近似图像"></p>
<p>预测图像</p>
<p><img src="http://7pulhb.com1.z0.glb.clouddn.com/ip - 金字塔_预测图像. png" alt="预测图像"></p>
<p>预测残差</p>
<p><img src="http://7pulhb.com1.z0.glb.clouddn.com/ip - 金字塔_预测残差. png" alt="预测残差"></p>
<pre><code class="cpp"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\highgui\highgui.hpp&gt;</span></span>
<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\imgproc\imgproc.hpp&gt;</span></span>

<span class="keyword">using</span> <span class="keyword">namespace</span> cv;

<span class="comment">//Global Varaibles</span>
Mat imgSrc, imgApproximation,imgPredication,imgResidual;
<span class="keyword">const</span> <span class="keyword">char</span> *winNameSrc = <span class="string">"Src Image"</span>;
<span class="keyword">const</span> <span class="keyword">char</span> *winNameAppr = <span class="string">"Approximation Image"</span>;
<span class="keyword">const</span> <span class="keyword">char</span> *winNamePred = <span class="string">"Predication Image"</span>;
<span class="keyword">const</span> <span class="keyword">char</span> *winNamePredR = <span class="string">"Predication Residual Image"</span>;

<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>{
<span class="keyword">const</span> <span class="keyword">char</span> *imgPath = <span class="string">"F:\\ImgPrcSrcs\\DIP3E_CH08_Original_Images\\Fig0819(a).tif"</span>;
imgSrc = imread(imgPath, CV_LOAD_IMAGE_GRAYSCALE);
Size sizeSrc = imgSrc.size();
<span class="comment">// 向下两倍采样, 获得近似图像 imgApproximation</span>
pyrDown(imgSrc,imgApproximation,Size(sizeSrc.width/<span class="number">2</span>,sizeSrc.height/<span class="number">2</span>));
<span class="comment">// 向上两倍采样，获得预测图像 imgPredication</span>
pyrUp(imgApproximation, imgPredication, sizeSrc);
<span class="comment">// 将原图像与预测图像做差运算，获得预测残差图像</span>
imgResidual = imgSrc - imgPredication;
imgResidual.convertTo(imgResidual, CV_32F);
imshow(winNameSrc, imgSrc);
imshow(winNameAppr,imgApproximation);
imshow(winNamePred,imgPredication);
imshow(winNamePredR, imgResidual);
waitKey(<span class="number">0</span>);
}
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;为什么我们需要处理不同分辨率下的图像，这还是因为分辨率直接关系到我们对于图像上目标的识别，例如，一些极为细致的景物我们就需要在高分表率下观察，否则在高分辨率下的一坨鼻屎在低分辨率下可能就会糊成一滩雀斑。但这也不能否定掉低分辨率的作用，比如广袤的原野，无论在高分辨率下还是低分
    
    </summary>
    
      <category term="数字图像处理" scheme="http://yoyoyohamapi.me/categories/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    
      <category term="数字图像处理" scheme="http://yoyoyohamapi.me/tags/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>数字图像处理（2）-- 图像的代数运算</title>
    <link href="http://yoyoyohamapi.me/2017/03/08/Image_Processing/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%882%EF%BC%89--%20%E5%9B%BE%E5%83%8F%E7%9A%84%E4%BB%A3%E6%95%B0%E8%BF%90%E7%AE%97/"/>
    <id>http://yoyoyohamapi.me/2017/03/08/Image_Processing/数字图像处理（2）-- 图像的代数运算/</id>
    <published>2017-03-08T02:17:57.000Z</published>
    <updated>2017-03-08T02:17:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="图像加法"><a href="#图像加法" class="headerlink" title="图像加法"></a>图像加法</h2><p><img src="http://7pulhb.com1.z0.glb.clouddn.com/ip - 图像的加法. jpg" alt="图像的加法"></p>
<ol>
<li>去除 “叠加性噪音” </li>
</ol>
<p><img src="http://7pulhb.com1.z0.glb.clouddn.com/ip - 去除叠加性噪音. jpg" alt="去除 “叠加性噪音” "></p>
<ol>
<li>生成图像的叠加效果（控制两幅图对应像素的显示亮度比例）</li>
</ol>
<p><img src="http://7pulhb.com1.z0.glb.clouddn.com/ip - 生成叠加效果. jpg" alt="生成图像的叠加效果"></p>
<h2 id="图像减法"><a href="#图像减法" class="headerlink" title="图像减法"></a>图像减法</h2><p><img src="http://7pulhb.com1.z0.glb.clouddn.com/ip - 图像减法. jpg" alt="图像的减法"></p>
<p><strong>图像的减法主要应用在:</strong></p>
<ol>
<li><p>去除不需要的叠加性图案</p>
</li>
<li><p>检测两幅图像之间的差别</p>
</li>
<li><p>计算物体边界的梯度（差分运算）</p>
</li>
</ol>
<h2 id="图像乘法"><a href="#图像乘法" class="headerlink" title="图像乘法"></a>图像乘法</h2><ol>
<li>图象的局部显示 （用二值模板图像与原图像做乘法）</li>
</ol>
<p><img src="http://7pulhb.com1.z0.glb.clouddn.com/ip - 图像乘法. jpg" alt="显示图像感兴趣区域（ROI）"></p>
<h2 id="几何空间变换"><a href="#几何空间变换" class="headerlink" title="几何空间变换"></a>几何空间变换</h2><p><img src="http://7pulhb.com1.z0.glb.clouddn.com/ip - 几何空间变换. jpg" alt="图像的几何变换"></p>
<p>坐标旋转公式的推导：<a href="http://www.cnblogs.com/ywxgod/archive/2010/08/06/1793609.html" target="_blank" rel="external">参看这里</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;图像加法&quot;&gt;&lt;a href=&quot;#图像加法&quot; class=&quot;headerlink&quot; title=&quot;图像加法&quot;&gt;&lt;/a&gt;图像加法&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://7pulhb.com1.z0.glb.clouddn.com/ip - 图像的加法. jp
    
    </summary>
    
      <category term="数字图像处理" scheme="http://yoyoyohamapi.me/categories/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    
      <category term="数字图像处理" scheme="http://yoyoyohamapi.me/tags/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>数字图像处理（3）-- 图像处理的概率方法</title>
    <link href="http://yoyoyohamapi.me/2017/03/08/Image_Processing/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%883%EF%BC%89--%20%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E7%9A%84%E6%A6%82%E7%8E%87%E6%96%B9%E6%B3%95/"/>
    <id>http://yoyoyohamapi.me/2017/03/08/Image_Processing/数字图像处理（3）-- 图像处理的概率方法/</id>
    <published>2017-03-08T02:17:57.000Z</published>
    <updated>2017-03-08T02:17:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>释义：直接将图像的灰度值看成是随机变量</p>
<p><img src="http://7pulhb.com1.z0.glb.clouddn.com/ip - 图像处理的概率方法. jpg" alt="图像处理的概率方法"></p>
<p>数学中，随机变量的方差反映了其与均值（期望）的偏离程度，灰度图像的方差越大，即像素的灰度值变化程度越大，明暗对比更加强烈。</p>
<p><img src="http://7pulhb.com1.z0.glb.clouddn.com/ip - 灰度标准差. jpg" alt="灰度标准差"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;释义：直接将图像的灰度值看成是随机变量&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7pulhb.com1.z0.glb.clouddn.com/ip - 图像处理的概率方法. jpg&quot; alt=&quot;图像处理的概率方法&quot;&gt;&lt;/p&gt;
&lt;p&gt;数学中，随机变量的方差反映了其与均
    
    </summary>
    
      <category term="数字图像处理" scheme="http://yoyoyohamapi.me/categories/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    
      <category term="数字图像处理" scheme="http://yoyoyohamapi.me/tags/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>数字图像处理（4）-- 图像增强：灰度变化</title>
    <link href="http://yoyoyohamapi.me/2017/03/08/Image_Processing/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%884%EF%BC%89--%20%E5%9B%BE%E5%83%8F%E5%A2%9E%E5%BC%BA%EF%BC%9A%E7%81%B0%E5%BA%A6%E5%8F%98%E5%8C%96/"/>
    <id>http://yoyoyohamapi.me/2017/03/08/Image_Processing/数字图像处理（4）-- 图像增强：灰度变化/</id>
    <published>2017-03-08T02:17:57.000Z</published>
    <updated>2017-03-08T02:17:57.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="图像增强的基本方法："><a href="#图像增强的基本方法：" class="headerlink" title="图像增强的基本方法："></a>图像增强的基本方法：</h2><h3 id="空间域处理（增强构成图像的像素）："><a href="#空间域处理（增强构成图像的像素）：" class="headerlink" title="空间域处理（增强构成图像的像素）："></a>空间域处理（增强构成图像的像素）：</h3><ul>
<li><strong>点处理</strong>（图象灰度变换、直方图均衡等）。</li>
<li><strong>邻域处理</strong>（线性、非线性平滑和锐化等）。</li>
</ul>
<h3 id="频域处理-："><a href="#频域处理-：" class="headerlink" title="频域处理 ："></a>频域处理 ：</h3><p><strong>高、低通滤波</strong>、<strong>同态滤波</strong>等</p>
<h2 id="空间域增强"><a href="#空间域增强" class="headerlink" title="空间域增强"></a>空间域增强</h2><p>公式 $g(x,y)=T[f(x,y)]$</p>
<p>其中：</p>
<p>$f(x,y)$：输入图像</p>
<p>$g(x,y)$：输出图像</p>
<p>$T$ 是对 $f$ 的一种操作，定义在（x,y）的邻域上。</p>
<p>空间域一般的方法是利用点 $(x,y)$ 事先定义的邻域里的一个 f 值的函数来决定 $g$ 在 $(x,y)$ 的值, 主要是利用所谓的模板（也称为滤波器, 核, 掩模）. 模板是一个小的 (3×3) 二维阵列, 模板的系数值决定了处理的性质, 如图像尖锐化等. 以这种方法为基础的增强技术通常是指<strong>模板处理</strong>或<strong>空域滤波</strong>.</p>
<h3 id="灰度变换：-s-T-r-—————-s-为输出灰度值，-r-为输入灰度值"><a href="#灰度变换：-s-T-r-—————-s-为输出灰度值，-r-为输入灰度值" class="headerlink" title="灰度变换：$s=T(r)$—————-$s$ 为输出灰度值，$r$ 为输入灰度值"></a>灰度变换：$s=T(r)$—————-$s$ 为输出灰度值，$r$ 为输入灰度值</h3><ul>
<li><p><strong>线性变换</strong>(正比或反比)</p>
</li>
<li><p><strong>对数变换</strong>(对数和反对数的)</p>
</li>
<li><p><strong>幂次变换</strong>(n 次幂和 n 次方根变换)</p>
</li>
</ul>
<p>注：下图的灰度级是均一化的灰度级</p>
<p><img src="http://7pulhb.com1.z0.glb.clouddn.com/ip - 灰度变换. png" alt="灰度变换"></p>
<p>Ex：（灰度已经均一化）</p>
<ul>
<li><p><strong>图像反转</strong>：s=L-1-r(考虑灰度级为[0,L-1], 显然，原来灰度值为 L-1 的输出后灰度值为 0, 实现了反色)</p>
</li>
<li><p><strong>对数变换</strong>：s=clog(1+r)（由上图知道，对数变换曲线处于正比函数上方，图像变亮，c 值用来控制灰度不超值？）</p>
</li>
<li><p><strong>幂次变换</strong>：s=crγ（伽马校正，当γ&lt;0 时，变换函数曲线在正比函数上方（因为均一化造成），输出灰度级变小。即此时扩展低灰度级，压缩高灰度级，使图像变亮，如下图所示。反之使图像变暗。）</p>
</li>
</ul>
<p><img src="http://7pulhb.com1.z0.glb.clouddn.com/ip - 幂次变换. png" alt="幂次变换"></p>
<p>幂次变换代码片：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\highgui\highgui.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\imgproc\imgproc.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="comment">//Global variables</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span> *winNameSrc = <span class="string">"Src Image!"</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span> *winNameDst = <span class="string">"Dst Image!"</span>;</div><div class="line">Mat imgSrc, imgDst;</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *imgPath = <span class="string">"F:\\ImgPrcSrcs\\DIP3E_Original_Images_CH03\\Fig0309(a)(washed_out_aerial_image).tif"</span>;</div><div class="line">  imgSrc = imread(imgPath,CV_LOAD_IMAGE_GRAYSCALE);</div><div class="line">  namedWindow(winNameSrc,CV_WINDOW_AUTOSIZE);</div><div class="line">  imshow(winNameSrc,imgSrc);</div><div class="line">  imgSrc.convertTo(imgSrc, CV_32FC1);</div><div class="line">  <span class="comment">// 重要！幂次变换考虑将灰度级归一化</span></div><div class="line">  normalize(imgSrc, imgDst, <span class="number">1.0</span>, <span class="number">0.0</span>, NORM_MINMAX);</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; imgDst.rows; i++)&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; imgDst.cols; j++)&#123;</div><div class="line">      imgDst.at&lt;<span class="keyword">float</span>&gt;(i, j) = <span class="built_in">pow</span>(imgDst.at&lt;<span class="keyword">float</span>&gt;(i, j),<span class="number">5.0</span>);</div><div class="line">    &#125;</div><div class="line">   &#125;</div><div class="line">   <span class="comment">// 重构灰度级，方便图像显示</span></div><div class="line">   normalize(imgDst, imgDst, <span class="number">255.0</span>, <span class="number">0.0</span>, NORM_MINMAX);</div><div class="line">   namedWindow(winNameDst, CV_WINDOW_AUTOSIZE);</div><div class="line">   imgDst.convertTo(imgDst, CV_8UC1);</div><div class="line">   imshow(winNameDst,imgDst);</div><div class="line">   waitKey(<span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="分段线性变换"><a href="#分段线性变换" class="headerlink" title="分段线性变换"></a>分段线性变换</h3><p>顾名思义，在不同灰度区间采用线性变换，以<strong>对比拉伸</strong>为例：</p>
<p><img src="http://7pulhb.com1.z0.glb.clouddn.com/ip - 对比拉伸. jpg" alt="对比拉伸"></p>
<p>ab</p>
<p>cd</p>
<p>(a)变换函数的形式 (b)低对比度图像 (c)对比度拉伸的结果 (d)门限化的结果</p>
<p>由 a 图可以看出，亮处变亮，暗处变暗, 中部灰度剧烈变化，即提高了明暗对比。代码如下：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\highgui\highgui.hpp&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2\imgproc\imgproc.hpp&gt;</span></span></div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</div><div class="line"> </div><div class="line"><span class="comment">//Global Variables</span></div><div class="line">Mat imgSrc, imgGray, imgDst;</div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span> *winNameSrc = <span class="string">"Src Image!"</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span> *winNameDst = <span class="string">"Dst Image!"</span>;</div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *imgPath = <span class="string">"F:\\ImgPrcSrcs\\DIP3E_Original_Images_CH03\\Fig0310(b)(washed_out_pollen_image).tif"</span>;</div><div class="line">  imgSrc = imread(imgPath);</div><div class="line">  cvtColor(imgSrc,imgGray,CV_RGB2GRAY);</div><div class="line">  <span class="comment">// 灰度格式转换 </span></div><div class="line">  imgGray.convertTo(imgGray,CV_32FC1);</div><div class="line">  <span class="comment">// 归一化图像</span></div><div class="line">  normalize(imgGray,imgDst,<span class="number">1.0</span>,<span class="number">0.0</span>,NORM_MINMAX);</div><div class="line">  <span class="comment">// 进行对比拉伸</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; imgDst.rows; i++)&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; imgDst.cols; j++)&#123;</div><div class="line">      <span class="keyword">if</span> (imgDst.at&lt;<span class="keyword">float</span>&gt;(i, j) &lt;= (<span class="keyword">float</span>)<span class="number">1</span>/ <span class="number">3</span>)</div><div class="line">        imgDst.at&lt;<span class="keyword">float</span>&gt;(i, j) = <span class="number">0.5</span>*imgDst.at&lt;<span class="keyword">float</span>&gt;(i, j);</div><div class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (imgDst.at&lt;<span class="keyword">float</span>&gt;(i, j) &gt;= (<span class="keyword">float</span>)<span class="number">2</span> / <span class="number">3</span>)</div><div class="line">        imgDst.at&lt;<span class="keyword">float</span>&gt;(i, j) = <span class="number">0.5</span>*imgDst.at&lt;<span class="keyword">float</span>&gt;(i, j) + <span class="number">0.5</span>;</div><div class="line">      <span class="keyword">else</span></div><div class="line">        imgDst.at&lt;<span class="keyword">float</span>&gt;(i, j) = <span class="number">2</span> * imgDst.at&lt;<span class="keyword">float</span>&gt;(i, j) - <span class="number">0.5</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 重构灰度级，方便显示</span></div><div class="line">  normalize(imgDst,imgDst,<span class="number">255.0</span>,<span class="number">0</span>,NORM_MINMAX);</div><div class="line">  imgDst.convertTo(imgDst, CV_8UC1);</div><div class="line">  namedWindow(winNameSrc,CV_WINDOW_AUTOSIZE);</div><div class="line">  imshow(winNameSrc,imgSrc);</div><div class="line">  namedWindow(winNameDst,CV_WINDOW_AUTOSIZE);</div><div class="line">  imshow(winNameDst,imgDst);</div><div class="line">  waitKey(<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line">``` </div><div class="line"></div><div class="line">### 灰度切割（高亮感兴趣灰度级）</div><div class="line"></div><div class="line"></div><div class="line">![灰度切割](http:<span class="comment">//7pulhb.com1.z0.glb.clouddn.com/ip - 灰度切割. jpg)</span></div><div class="line"></div><div class="line">a 图中显示灰度值处于 AB 间的灰度保持恒定高亮，其余灰度保持为恒定值（变暗），这样就突出目标，消除背景。</div><div class="line"></div><div class="line">b 图中 A~B 变暗，其余灰度不变，显然就有利于突出目标，保留背景细节。</div><div class="line"></div><div class="line"> 下面图像左侧为原图，右侧为试用 b 变换突出了目标区域，并保留了其余细节。</div><div class="line"></div><div class="line">![高亮 ROI](http:<span class="comment">//7pulhb.com1.z0.glb.clouddn.com/ip - 高亮 ROI.jpg)</span></div><div class="line"></div><div class="line">代码如下：</div><div class="line"></div><div class="line">```cpp</div><div class="line">#include &lt;opencv2\highgui\highgui.hpp&gt;</div><div class="line">#include &lt;opencv2\imgproc\imgproc.hpp&gt;</div><div class="line">#include &lt;iostream&gt;</div><div class="line"> </div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</div><div class="line"> </div><div class="line"><span class="comment">//Global Variables</span></div><div class="line">Mat imgSrc, imgGray, imgDst;</div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span> *winNameSrc = <span class="string">"Src Image!"</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span> *winNameDst = <span class="string">"Dst Image!"</span>;</div><div class="line"><span class="keyword">int</span> beginLevel = <span class="number">150</span>, endLevel = <span class="number">200</span>;<span class="comment">// 感兴趣的灰度区间 </span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxLevel = <span class="number">255</span>;</div><div class="line"> </div><div class="line"><span class="comment">//Funcation Daclarations</span></div><div class="line"><span class="keyword">void</span> IntensitySlicing(<span class="keyword">int</span> ,<span class="keyword">void</span> *);</div><div class="line"> </div><div class="line"><span class="keyword">int</span> main()&#123;</div><div class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *imgPath = <span class="string">"F:\\ImgPrcSrcs\\DIP3E_Original_Images_CH03\\Fig0312(a)(kidney).tif"</span>;</div><div class="line">  imgSrc = imread(imgPath);</div><div class="line">  cvtColor(imgSrc, imgGray, CV_RGB2GRAY);</div><div class="line">  namedWindow(winNameSrc, CV_WINDOW_AUTOSIZE);</div><div class="line">  imshow(winNameSrc, imgSrc);</div><div class="line">  createTrackbar(<span class="string">"begin level:"</span>, winNameSrc, &amp;amp;beginLevel, maxLevel,IntensitySlicing);</div><div class="line">  createTrackbar(<span class="string">"end level:"</span>, winNameSrc, &amp;amp;endLevel, maxLevel, IntensitySlicing);</div><div class="line">  waitKey(<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"> </div><div class="line"><span class="keyword">void</span> IntensitySlicing(<span class="keyword">int</span>, <span class="keyword">void</span> *)&#123;</div><div class="line">  imgDst = imgGray.clone();</div><div class="line">  imgDst.convertTo(imgDst, CV_32SC1);</div><div class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">"["</span>&lt;&lt;beginLevel &lt;&lt;<span class="string">","</span>&lt;&lt;endLevel&lt;&lt;<span class="string">"]"</span>&lt;&lt; <span class="built_in">endl</span>;</div><div class="line">  <span class="keyword">if</span> (endLevel &gt; beginLevel)&#123;</div><div class="line">    <span class="comment">// 进行高亮感兴趣区域</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; imgDst.rows; i++)&#123;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; imgDst.cols; j++)&#123;</div><div class="line">        <span class="comment">// 落在灰度区间的变亮</span></div><div class="line">        <span class="keyword">if</span> (imgDst.at&lt;<span class="keyword">int</span>&gt;(i, j) &gt;= beginLevel &amp;amp;&amp;amp; imgDst.at&lt;<span class="keyword">int</span>&gt;(i, j) &lt;= endLevel)&#123;</div><div class="line">          imgDst.at&lt;<span class="keyword">int</span>&gt;(i, j) = <span class="number">250</span>;</div><div class="line">         &#125;</div><div class="line">   <span class="comment">// 反之不变</span></div><div class="line">      &#125;	</div><div class="line"> 		&#125;</div><div class="line"> 	&#125;</div><div class="line">   imgDst.convertTo(imgDst,CV_8UC1);</div><div class="line">   namedWindow(winNameDst, CV_WINDOW_AUTOSIZE);</div><div class="line">   imshow(winNameDst, imgDst);</div><div class="line">&#125;</div><div class="line">``` </div><div class="line"></div><div class="line">### 位图切割：</div><div class="line"></div><div class="line"> 假设灰度值用 < span class="number">8bit 表示，则每一位即代表一个位平面，图像将被分为 < span class="number">8 个位平面（bit plane），每个平面的像素的灰度即为该位平面的十进制值。</div><div class="line"></div><div class="line">如__00100010__灰度会被分为 < span class="number">8 个位平面 </div><div class="line"></div><div class="line">（<span class="number">00000000</span>,<span class="number">00000000</span>,<span class="number">00100000</span>,<span class="number">00000000</span>,<span class="number">00000000</span>,<span class="number">00000000</span>,<span class="number">0000010</span>,<span class="number">00000000</span>）。</div><div class="line"></div><div class="line"> 显然每个位平面（bit plane）是可以考虑构成一副二值图像，如第 < span class="number">8 位只可能构成 < span class="number">10000000（<span class="number">128</span>）或者 < span class="number">00000000（<span class="number">0</span>），即原像素灰度最高位等于 < span class="number">1（即灰度属于 [<span class="number">128</span>,<span class="number">255</span>]）者的第 < span class="number">8 位平面灰度为 < span class="number">128（二值化后令为 < span class="number">1），最高位等于 < span class="number">0(即灰度属于[<span class="number">0</span>,<span class="number">127</span>]) 者的第 < span class="number">8 位平面灰度为 < span class="number">0（二值化后令为零）;</div><div class="line"></div><div class="line">再考虑第 < span class="number">1 位只可能构成 < span class="number">00000001（<span class="number">1</span>）或者 < span class="number">00000000（<span class="number">0</span>），即原像素灰度最低位等于 < span class="number">1（即灰度属于 [<span class="number">1</span>,<span class="number">255</span>]）者的第 < span class="number">1 位平面灰度为 < span class="number">1（二值化后为 < span class="number">1），而等于 < span class="number">0（即灰度属于 < span class="number">0）者的第一位平面灰度为 < span class="number">0（二值化后为 < span class="number">0）。</div><div class="line"></div><div class="line"> 注意到下图（第一幅为原图，而其余图像为第 < span class="number">1 到第 < span class="number">8 位平面的二值化图像），一个图像的高阶位如前 < span class="number">4 位包含视觉上很重要的大多数数据；其它位对图像中的更多微小细节（暗部细节）有作用。（Why？因为某像素灰度高位数字构成的位平面更接近于原始强度，如某像素的灰度为 < span class="number">11000010（<span class="number">194</span>），其最高位构成的位平面为 < span class="number">1000000（<span class="number">128</span>，二值化后为 < span class="number">1，即白色，与原灰度接近）相对于第二位 < span class="number">00000010（<span class="number">2</span>，二值化后为 < span class="number">0，即黑色，与原灰度差异过大）更加接近 < span class="number">194）</div><div class="line"></div><div class="line">![位图切割](http:<span class="comment">//7pulhb.com1.z0.glb.clouddn.com/ip - 位图切割. png)</span></div><div class="line"></div><div class="line"> 示例代码如下：</div><div class="line"></div><div class="line">```cpp</div><div class="line">#include &lt;opencv2\highgui\highgui.hpp&gt;</div><div class="line">#include &lt;opencv2\imgproc\imgproc.hpp&gt;</div><div class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cv;</div><div class="line"><span class="comment">//Global Variables</span></div><div class="line">Mat imgSrc, imgGray, imgDst;</div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span> *winNameSrc = <span class="string">"Src Image!"</span>;</div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span> *winNameDst = <span class="string">"Dst Image!"</span>;</div><div class="line"><span class="keyword">int</span> n=<span class="number">4</span>;<span class="comment">// 第 n 位位平面</span></div><div class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxLevel = <span class="number">8</span>;</div><div class="line"><span class="comment">//Funcation Daclarations</span></div><div class="line"><span class="keyword">void</span> getNthBitPlane(<span class="keyword">int</span> ,<span class="keyword">void</span> *);</div><div class="line"><span class="keyword">int</span> main()&#123;</div><div class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *imgPath = <span class="string">"F:\\ImgPrcSrcs\\DIP3E_Original_Images_CH03\\Fig0314(a)(100-dollars).tif"</span>;</div><div class="line">  imgSrc = imread(imgPath);</div><div class="line">  cvtColor(imgSrc, imgGray, CV_RGB2GRAY);</div><div class="line">  namedWindow(winNameSrc, CV_WINDOW_AUTOSIZE);</div><div class="line">  imshow(winNameSrc, imgSrc);</div><div class="line">  createTrackbar(<span class="string">"nth bit plane:\n"</span>, winNameSrc, &amp;amp;n, maxLevel, getNthBitPlane);</div><div class="line">  getNthBitPlane(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">  waitKey(<span class="number">0</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">void</span> getNthBitPlane(<span class="keyword">int</span>, <span class="keyword">void</span> *)&#123;</div><div class="line">  imgDst = imgGray.clone();</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; imgDst.rows; i++)&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; imgDst.cols; j++)&#123;</div><div class="line">      <span class="comment">// 通过移位操作获取第 n 位</span></div><div class="line">      <span class="keyword">int</span> bit = (<span class="keyword">int</span>)(imgDst.at&lt;uchar&gt;(i, j) &gt;&gt; (n - <span class="number">1</span>));</div><div class="line">      <span class="keyword">if</span> (bit == <span class="number">1</span>)</div><div class="line">      imgDst.at&lt;uchar&gt;(i, j) = <span class="number">255</span>;<span class="comment">// 二值化</span></div><div class="line">      <span class="keyword">else</span></div><div class="line">      imgDst.at&lt;uchar&gt;(i, j) = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  namedWindow(winNameDst, CV_WINDOW_AUTOSIZE);</div><div class="line">  imshow(winNameDst, imgDst);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;图像增强的基本方法：&quot;&gt;&lt;a href=&quot;#图像增强的基本方法：&quot; class=&quot;headerlink&quot; title=&quot;图像增强的基本方法：&quot;&gt;&lt;/a&gt;图像增强的基本方法：&lt;/h2&gt;&lt;h3 id=&quot;空间域处理（增强构成图像的像素）：&quot;&gt;&lt;a href=&quot;#空间域处
    
    </summary>
    
      <category term="数字图像处理" scheme="http://yoyoyohamapi.me/categories/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
    
      <category term="数字图像处理" scheme="http://yoyoyohamapi.me/tags/%E6%95%B0%E5%AD%97%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
</feed>
